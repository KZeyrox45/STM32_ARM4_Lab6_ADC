
Bai6_ADC_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000797c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe8  08007b04  08007b04  00017b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aaec  0800aaec  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aaec  0800aaec  0001aaec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaf4  0800aaf4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaf4  0800aaf4  0001aaf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aaf8  0800aaf8  0001aaf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800aafc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000002e8  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000304  20000304  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019781  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c1f  00000000  00000000  000397cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  0003d3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001278  00000000  00000000  0003e838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002539c  00000000  00000000  0003fab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b3e6  00000000  00000000  00064e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc5f4  00000000  00000000  00080232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015c826  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005370  00000000  00000000  0015c87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007aec 	.word	0x08007aec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08007aec 	.word	0x08007aec

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96e 	b.w	8000cf8 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468c      	mov	ip, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8083 	bne.w	8000b4a <__udivmoddi4+0x116>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d947      	bls.n	8000ada <__udivmoddi4+0xa6>
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b142      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	f1c2 0020 	rsb	r0, r2, #32
 8000a54:	fa24 f000 	lsr.w	r0, r4, r0
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	4097      	lsls	r7, r2
 8000a5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbbc f6f8 	udiv	r6, ip, r8
 8000a6c:	fa1f fe87 	uxth.w	lr, r7
 8000a70:	fb08 c116 	mls	r1, r8, r6, ip
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f10e 	mul.w	r1, r6, lr
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a86:	f080 8119 	bcs.w	8000cbc <__udivmoddi4+0x288>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8116 	bls.w	8000cbc <__udivmoddi4+0x288>
 8000a90:	3e02      	subs	r6, #2
 8000a92:	443b      	add	r3, r7
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	45a6      	cmp	lr, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8105 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000ab6:	45a6      	cmp	lr, r4
 8000ab8:	f240 8102 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000abc:	3802      	subs	r0, #2
 8000abe:	443c      	add	r4, r7
 8000ac0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac4:	eba4 040e 	sub.w	r4, r4, lr
 8000ac8:	2600      	movs	r6, #0
 8000aca:	b11d      	cbz	r5, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad4:	4631      	mov	r1, r6
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	b902      	cbnz	r2, 8000ade <__udivmoddi4+0xaa>
 8000adc:	deff      	udf	#255	; 0xff
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d150      	bne.n	8000b88 <__udivmoddi4+0x154>
 8000ae6:	1bcb      	subs	r3, r1, r7
 8000ae8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aec:	fa1f f887 	uxth.w	r8, r7
 8000af0:	2601      	movs	r6, #1
 8000af2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000af6:	0c21      	lsrs	r1, r4, #16
 8000af8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000afc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b00:	fb08 f30c 	mul.w	r3, r8, ip
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000b08:	1879      	adds	r1, r7, r1
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0xe2>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	f200 80e9 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1ac9      	subs	r1, r1, r3
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x10c>
 8000b30:	193c      	adds	r4, r7, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x10a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80d9 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e7bf      	b.n	8000aca <__udivmoddi4+0x96>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d909      	bls.n	8000b62 <__udivmoddi4+0x12e>
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	f000 80b1 	beq.w	8000cb6 <__udivmoddi4+0x282>
 8000b54:	2600      	movs	r6, #0
 8000b56:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	fab3 f683 	clz	r6, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d14a      	bne.n	8000c00 <__udivmoddi4+0x1cc>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0x140>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 80b8 	bhi.w	8000ce4 <__udivmoddi4+0x2b0>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb61 0103 	sbc.w	r1, r1, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0a8      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b88:	f1c2 0320 	rsb	r3, r2, #32
 8000b8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b90:	4097      	lsls	r7, r2
 8000b92:	fa01 f002 	lsl.w	r0, r1, r2
 8000b96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9a:	40d9      	lsrs	r1, r3
 8000b9c:	4330      	orrs	r0, r6
 8000b9e:	0c03      	lsrs	r3, r0, #16
 8000ba0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f108 	mul.w	r1, r6, r8
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x19c>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bc2:	f080 808d 	bcs.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 808a 	bls.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b281      	uxth	r1, r0
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be0:	fb00 f308 	mul.w	r3, r0, r8
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x1c4>
 8000be8:	1879      	adds	r1, r7, r1
 8000bea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bee:	d273      	bcs.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d971      	bls.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	4439      	add	r1, r7
 8000bf8:	1acb      	subs	r3, r1, r3
 8000bfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bfe:	e778      	b.n	8000af2 <__udivmoddi4+0xbe>
 8000c00:	f1c6 0c20 	rsb	ip, r6, #32
 8000c04:	fa03 f406 	lsl.w	r4, r3, r6
 8000c08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c0c:	431c      	orrs	r4, r3
 8000c0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c12:	fa01 f306 	lsl.w	r3, r1, r6
 8000c16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	0c3b      	lsrs	r3, r7, #16
 8000c22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c26:	fa1f f884 	uxth.w	r8, r4
 8000c2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c32:	fb09 fa08 	mul.w	sl, r9, r8
 8000c36:	458a      	cmp	sl, r1
 8000c38:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x220>
 8000c42:	1861      	adds	r1, r4, r1
 8000c44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c48:	d248      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4a:	458a      	cmp	sl, r1
 8000c4c:	d946      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c52:	4421      	add	r1, r4
 8000c54:	eba1 010a 	sub.w	r1, r1, sl
 8000c58:	b2bf      	uxth	r7, r7
 8000c5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c66:	fb00 f808 	mul.w	r8, r0, r8
 8000c6a:	45b8      	cmp	r8, r7
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x24a>
 8000c6e:	19e7      	adds	r7, r4, r7
 8000c70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c74:	d22e      	bcs.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c76:	45b8      	cmp	r8, r7
 8000c78:	d92c      	bls.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4427      	add	r7, r4
 8000c7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c82:	eba7 0708 	sub.w	r7, r7, r8
 8000c86:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8a:	454f      	cmp	r7, r9
 8000c8c:	46c6      	mov	lr, r8
 8000c8e:	4649      	mov	r1, r9
 8000c90:	d31a      	bcc.n	8000cc8 <__udivmoddi4+0x294>
 8000c92:	d017      	beq.n	8000cc4 <__udivmoddi4+0x290>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x27a>
 8000c96:	ebb3 020e 	subs.w	r2, r3, lr
 8000c9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ca2:	40f2      	lsrs	r2, r6
 8000ca4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ca8:	40f7      	lsrs	r7, r6
 8000caa:	e9c5 2700 	strd	r2, r7, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	462e      	mov	r6, r5
 8000cb8:	4628      	mov	r0, r5
 8000cba:	e70b      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6fd      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc4:	4543      	cmp	r3, r8
 8000cc6:	d2e5      	bcs.n	8000c94 <__udivmoddi4+0x260>
 8000cc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ccc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7df      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e7d2      	b.n	8000c7e <__udivmoddi4+0x24a>
 8000cd8:	4660      	mov	r0, ip
 8000cda:	e78d      	b.n	8000bf8 <__udivmoddi4+0x1c4>
 8000cdc:	4681      	mov	r9, r0
 8000cde:	e7b9      	b.n	8000c54 <__udivmoddi4+0x220>
 8000ce0:	4666      	mov	r6, ip
 8000ce2:	e775      	b.n	8000bd0 <__udivmoddi4+0x19c>
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e74a      	b.n	8000b7e <__udivmoddi4+0x14a>
 8000ce8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cec:	4439      	add	r1, r7
 8000cee:	e713      	b.n	8000b18 <__udivmoddi4+0xe4>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	e724      	b.n	8000b40 <__udivmoddi4+0x10c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d02:	463b      	mov	r3, r7
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d0e:	4b3d      	ldr	r3, [pc, #244]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d10:	4a3d      	ldr	r2, [pc, #244]	; (8000e08 <MX_ADC1_Init+0x10c>)
 8000d12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d14:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d1a:	4b3a      	ldr	r3, [pc, #232]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d20:	4b38      	ldr	r3, [pc, #224]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d26:	4b37      	ldr	r3, [pc, #220]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d2c:	4b35      	ldr	r3, [pc, #212]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d34:	4b33      	ldr	r3, [pc, #204]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d3a:	4b32      	ldr	r3, [pc, #200]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d3c:	4a33      	ldr	r2, [pc, #204]	; (8000e0c <MX_ADC1_Init+0x110>)
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d40:	4b30      	ldr	r3, [pc, #192]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000d46:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d48:	2205      	movs	r2, #5
 8000d4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d54:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d5a:	482a      	ldr	r0, [pc, #168]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d5c:	f002 f91e 	bl	8002f9c <HAL_ADC_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d66:	f001 fcd5 	bl	8002714 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d6a:	2308      	movs	r3, #8
 8000d6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d76:	463b      	mov	r3, r7
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4822      	ldr	r0, [pc, #136]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d7c:	f002 fa80 	bl	8003280 <HAL_ADC_ConfigChannel>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d86:	f001 fcc5 	bl	8002714 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d8a:	2309      	movs	r3, #9
 8000d8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d92:	463b      	mov	r3, r7
 8000d94:	4619      	mov	r1, r3
 8000d96:	481b      	ldr	r0, [pc, #108]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d98:	f002 fa72 	bl	8003280 <HAL_ADC_ConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000da2:	f001 fcb7 	bl	8002714 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000da6:	230a      	movs	r3, #10
 8000da8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000daa:	2303      	movs	r3, #3
 8000dac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dae:	463b      	mov	r3, r7
 8000db0:	4619      	mov	r1, r3
 8000db2:	4814      	ldr	r0, [pc, #80]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000db4:	f002 fa64 	bl	8003280 <HAL_ADC_ConfigChannel>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000dbe:	f001 fca9 	bl	8002714 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000dc2:	230b      	movs	r3, #11
 8000dc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000dd0:	f002 fa56 	bl	8003280 <HAL_ADC_ConfigChannel>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000dda:	f001 fc9b 	bl	8002714 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000dde:	230c      	movs	r3, #12
 8000de0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000de2:	2305      	movs	r3, #5
 8000de4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de6:	463b      	mov	r3, r7
 8000de8:	4619      	mov	r1, r3
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000dec:	f002 fa48 	bl	8003280 <HAL_ADC_ConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000df6:	f001 fc8d 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000054 	.word	0x20000054
 8000e08:	40012000 	.word	0x40012000
 8000e0c:	0f000001 	.word	0x0f000001

08000e10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a3c      	ldr	r2, [pc, #240]	; (8000f20 <HAL_ADC_MspInit+0x110>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d171      	bne.n	8000f16 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b3b      	ldr	r3, [pc, #236]	; (8000f24 <HAL_ADC_MspInit+0x114>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a3a      	ldr	r2, [pc, #232]	; (8000f24 <HAL_ADC_MspInit+0x114>)
 8000e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b38      	ldr	r3, [pc, #224]	; (8000f24 <HAL_ADC_MspInit+0x114>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b34      	ldr	r3, [pc, #208]	; (8000f24 <HAL_ADC_MspInit+0x114>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a33      	ldr	r2, [pc, #204]	; (8000f24 <HAL_ADC_MspInit+0x114>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b31      	ldr	r3, [pc, #196]	; (8000f24 <HAL_ADC_MspInit+0x114>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <HAL_ADC_MspInit+0x114>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a2c      	ldr	r2, [pc, #176]	; (8000f24 <HAL_ADC_MspInit+0x114>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <HAL_ADC_MspInit+0x114>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000e86:	2307      	movs	r3, #7
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	4823      	ldr	r0, [pc, #140]	; (8000f28 <HAL_ADC_MspInit+0x118>)
 8000e9a:	f003 f913 	bl	80040c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	481e      	ldr	r0, [pc, #120]	; (8000f2c <HAL_ADC_MspInit+0x11c>)
 8000eb2:	f003 f907 	bl	80040c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000eb8:	4a1e      	ldr	r2, [pc, #120]	; (8000f34 <HAL_ADC_MspInit+0x124>)
 8000eba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ebc:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000ed0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000edc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000ee0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000efa:	480d      	ldr	r0, [pc, #52]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000efc:	f002 fd72 	bl	80039e4 <HAL_DMA_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000f06:	f001 fc05 	bl	8002714 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000f0e:	639a      	str	r2, [r3, #56]	; 0x38
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f16:	bf00      	nop
 8000f18:	3728      	adds	r7, #40	; 0x28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40012000 	.word	0x40012000
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	2000009c 	.word	0x2000009c
 8000f34:	40026410 	.word	0x40026410

08000f38 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2108      	movs	r1, #8
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <button_init+0x14>)
 8000f42:	f003 fa5b 	bl	80043fc <HAL_GPIO_WritePin>
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40020c00 	.word	0x40020c00

08000f50 <button_Scan>:

void button_Scan(){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2108      	movs	r1, #8
 8000f5a:	482f      	ldr	r0, [pc, #188]	; (8001018 <button_Scan+0xc8>)
 8000f5c:	f003 fa4e 	bl	80043fc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2108      	movs	r1, #8
 8000f64:	482c      	ldr	r0, [pc, #176]	; (8001018 <button_Scan+0xc8>)
 8000f66:	f003 fa49 	bl	80043fc <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	492b      	ldr	r1, [pc, #172]	; (800101c <button_Scan+0xcc>)
 8000f70:	482b      	ldr	r0, [pc, #172]	; (8001020 <button_Scan+0xd0>)
 8000f72:	f005 f85c 	bl	800602e <HAL_SPI_Receive>
	  int button_index = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f7e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	e03f      	b.n	8001006 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db06      	blt.n	8000f9a <button_Scan+0x4a>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	dc03      	bgt.n	8000f9a <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3304      	adds	r3, #4
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e018      	b.n	8000fcc <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	dd07      	ble.n	8000fb0 <button_Scan+0x60>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b07      	cmp	r3, #7
 8000fa4:	dc04      	bgt.n	8000fb0 <button_Scan+0x60>
			  button_index = 7 - i;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f1c3 0307 	rsb	r3, r3, #7
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	e00d      	b.n	8000fcc <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b07      	cmp	r3, #7
 8000fb4:	dd06      	ble.n	8000fc4 <button_Scan+0x74>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0b      	cmp	r3, #11
 8000fba:	dc03      	bgt.n	8000fc4 <button_Scan+0x74>
			  button_index = i + 4;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	e003      	b.n	8000fcc <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f1c3 0317 	rsb	r3, r3, #23
 8000fca:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <button_Scan+0xcc>)
 8000fce:	881a      	ldrh	r2, [r3, #0]
 8000fd0:	897b      	ldrh	r3, [r7, #10]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <button_Scan+0x96>
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <button_Scan+0xd4>)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2100      	movs	r1, #0
 8000fe0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000fe4:	e009      	b.n	8000ffa <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <button_Scan+0xd4>)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	b299      	uxth	r1, r3
 8000ff2:	4a0c      	ldr	r2, [pc, #48]	; (8001024 <button_Scan+0xd4>)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000ffa:	897b      	ldrh	r3, [r7, #10]
 8000ffc:	085b      	lsrs	r3, r3, #1
 8000ffe:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3301      	adds	r3, #1
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	ddbc      	ble.n	8000f86 <button_Scan+0x36>
	  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40020c00 	.word	0x40020c00
 800101c:	20000038 	.word	0x20000038
 8001020:	20000218 	.word	0x20000218
 8001024:	200000fc 	.word	0x200000fc

08001028 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 800102c:	2100      	movs	r1, #0
 800102e:	4802      	ldr	r0, [pc, #8]	; (8001038 <buzzer_init+0x10>)
 8001030:	f005 fd3e 	bl	8006ab0 <HAL_TIM_PWM_Start>
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000270 	.word	0x20000270

0800103c <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 8001046:	4a07      	ldr	r2, [pc, #28]	; (8001064 <buzzer_SetVolume+0x28>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <buzzer_SetVolume+0x28>)
 800104e:	781a      	ldrb	r2, [r3, #0]
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <buzzer_SetVolume+0x2c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	2000003a 	.word	0x2000003a
 8001068:	20000270 	.word	0x20000270

0800106c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_DMA_Init+0x3c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <MX_DMA_Init+0x3c>)
 800107c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_DMA_Init+0x3c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2038      	movs	r0, #56	; 0x38
 8001094:	f002 fc6f 	bl	8003976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001098:	2038      	movs	r0, #56	; 0x38
 800109a:	f002 fc88 	bl	80039ae <HAL_NVIC_EnableIRQ>

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
    ds3231_Write(ADRESS_SEC, 0x00); // seconds
 80010b0:	2100      	movs	r1, #0
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 f81a 	bl	80010ec <ds3231_Write>
    ds3231_Write(ADRESS_MIN, 0x00); // minutes
 80010b8:	2100      	movs	r1, #0
 80010ba:	2001      	movs	r0, #1
 80010bc:	f000 f816 	bl	80010ec <ds3231_Write>
    ds3231_Write(ADRESS_HOUR, 0x16); // hours
 80010c0:	2116      	movs	r1, #22
 80010c2:	2002      	movs	r0, #2
 80010c4:	f000 f812 	bl	80010ec <ds3231_Write>
    ds3231_Write(ADRESS_DAY, 0x06); // day
 80010c8:	2106      	movs	r1, #6
 80010ca:	2003      	movs	r0, #3
 80010cc:	f000 f80e 	bl	80010ec <ds3231_Write>
    ds3231_Write(ADRESS_DATE, 0x30); // date
 80010d0:	2130      	movs	r1, #48	; 0x30
 80010d2:	2004      	movs	r0, #4
 80010d4:	f000 f80a 	bl	80010ec <ds3231_Write>
    ds3231_Write(ADRESS_MONTH, 0x11); // month
 80010d8:	2111      	movs	r1, #17
 80010da:	2005      	movs	r0, #5
 80010dc:	f000 f806 	bl	80010ec <ds3231_Write>
    ds3231_Write(ADRESS_YEAR, 0x24); // year
 80010e0:	2124      	movs	r1, #36	; 0x24
 80010e2:	2006      	movs	r0, #6
 80010e4:	f000 f802 	bl	80010ec <ds3231_Write>
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}

080010ec <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af04      	add	r7, sp, #16
 80010f2:	4603      	mov	r3, r0
 80010f4:	460a      	mov	r2, r1
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	4613      	mov	r3, r2
 80010fa:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 80010fc:	79bb      	ldrb	r3, [r7, #6]
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 fe68 	bl	8002dd4 <DEC2BCD>
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	b29a      	uxth	r2, r3
 800110c:	230a      	movs	r3, #10
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	2301      	movs	r3, #1
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	f107 030f 	add.w	r3, r7, #15
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2301      	movs	r3, #1
 800111c:	21d0      	movs	r1, #208	; 0xd0
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <ds3231_Write+0x40>)
 8001120:	f003 fae4 	bl	80046ec <HAL_I2C_Mem_Write>
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2000017c 	.word	0x2000017c

08001130 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8001136:	230a      	movs	r3, #10
 8001138:	9302      	str	r3, [sp, #8]
 800113a:	2307      	movs	r3, #7
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <ds3231_ReadTime+0xa4>)
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2301      	movs	r3, #1
 8001144:	2200      	movs	r2, #0
 8001146:	21d0      	movs	r1, #208	; 0xd0
 8001148:	4823      	ldr	r0, [pc, #140]	; (80011d8 <ds3231_ReadTime+0xa8>)
 800114a:	f003 fbc9 	bl	80048e0 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <ds3231_ReadTime+0xa4>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f001 fe24 	bl	8002da0 <BCD2DEC>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <ds3231_ReadTime+0xac>)
 800115e:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <ds3231_ReadTime+0xa4>)
 8001162:	785b      	ldrb	r3, [r3, #1]
 8001164:	4618      	mov	r0, r3
 8001166:	f001 fe1b 	bl	8002da0 <BCD2DEC>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <ds3231_ReadTime+0xb0>)
 8001170:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <ds3231_ReadTime+0xa4>)
 8001174:	789b      	ldrb	r3, [r3, #2]
 8001176:	4618      	mov	r0, r3
 8001178:	f001 fe12 	bl	8002da0 <BCD2DEC>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <ds3231_ReadTime+0xb4>)
 8001182:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <ds3231_ReadTime+0xa4>)
 8001186:	78db      	ldrb	r3, [r3, #3]
 8001188:	4618      	mov	r0, r3
 800118a:	f001 fe09 	bl	8002da0 <BCD2DEC>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <ds3231_ReadTime+0xb8>)
 8001194:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <ds3231_ReadTime+0xa4>)
 8001198:	791b      	ldrb	r3, [r3, #4]
 800119a:	4618      	mov	r0, r3
 800119c:	f001 fe00 	bl	8002da0 <BCD2DEC>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <ds3231_ReadTime+0xbc>)
 80011a6:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <ds3231_ReadTime+0xa4>)
 80011aa:	795b      	ldrb	r3, [r3, #5]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f001 fdf7 	bl	8002da0 <BCD2DEC>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <ds3231_ReadTime+0xc0>)
 80011b8:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <ds3231_ReadTime+0xa4>)
 80011bc:	799b      	ldrb	r3, [r3, #6]
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 fdee 	bl	8002da0 <BCD2DEC>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <ds3231_ReadTime+0xc4>)
 80011ca:	701a      	strb	r2, [r3, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000124 	.word	0x20000124
 80011d8:	2000017c 	.word	0x2000017c
 80011dc:	2000011c 	.word	0x2000011c
 80011e0:	2000011e 	.word	0x2000011e
 80011e4:	20000121 	.word	0x20000121
 80011e8:	20000120 	.word	0x20000120
 80011ec:	2000011f 	.word	0x2000011f
 80011f0:	20000122 	.word	0x20000122
 80011f4:	2000011d 	.word	0x2000011d

080011f8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08e      	sub	sp, #56	; 0x38
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]
 800120e:	615a      	str	r2, [r3, #20]
 8001210:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
 8001220:	615a      	str	r2, [r3, #20]
 8001222:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001224:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <MX_FSMC_Init+0xec>)
 8001226:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800122a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800122c:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <MX_FSMC_Init+0xec>)
 800122e:	4a2e      	ldr	r2, [pc, #184]	; (80012e8 <MX_FSMC_Init+0xf0>)
 8001230:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001232:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <MX_FSMC_Init+0xec>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <MX_FSMC_Init+0xec>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <MX_FSMC_Init+0xec>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <MX_FSMC_Init+0xec>)
 8001246:	2210      	movs	r2, #16
 8001248:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <MX_FSMC_Init+0xec>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <MX_FSMC_Init+0xec>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001256:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <MX_FSMC_Init+0xec>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <MX_FSMC_Init+0xec>)
 800125e:	2200      	movs	r2, #0
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <MX_FSMC_Init+0xec>)
 8001264:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001268:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <MX_FSMC_Init+0xec>)
 800126c:	2200      	movs	r2, #0
 800126e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <MX_FSMC_Init+0xec>)
 8001272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001276:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_FSMC_Init+0xec>)
 800127a:	2200      	movs	r2, #0
 800127c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_FSMC_Init+0xec>)
 8001280:	2200      	movs	r2, #0
 8001282:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_FSMC_Init+0xec>)
 8001286:	2200      	movs	r2, #0
 8001288:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800128a:	230f      	movs	r3, #15
 800128c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800128e:	230f      	movs	r3, #15
 8001290:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001292:	233c      	movs	r3, #60	; 0x3c
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800129a:	2310      	movs	r3, #16
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800129e:	2311      	movs	r3, #17
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80012a2:	2300      	movs	r3, #0
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80012a6:	2308      	movs	r3, #8
 80012a8:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80012aa:	230f      	movs	r3, #15
 80012ac:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80012ae:	2309      	movs	r3, #9
 80012b0:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80012b6:	2310      	movs	r3, #16
 80012b8:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80012ba:	2311      	movs	r3, #17
 80012bc:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80012c2:	463a      	mov	r2, r7
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <MX_FSMC_Init+0xec>)
 80012cc:	f005 fa92 	bl	80067f4 <HAL_SRAM_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80012d6:	f001 fa1d 	bl	8002714 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80012da:	bf00      	nop
 80012dc:	3738      	adds	r7, #56	; 0x38
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000012c 	.word	0x2000012c
 80012e8:	a0000104 	.word	0xa0000104

080012ec <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001300:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <HAL_FSMC_MspInit+0x88>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d131      	bne.n	800136c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_FSMC_MspInit+0x88>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_FSMC_MspInit+0x8c>)
 8001314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001316:	4a18      	ldr	r2, [pc, #96]	; (8001378 <HAL_FSMC_MspInit+0x8c>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6393      	str	r3, [r2, #56]	; 0x38
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <HAL_FSMC_MspInit+0x8c>)
 8001320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800132a:	f64f 7388 	movw	r3, #65416	; 0xff88
 800132e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800133c:	230c      	movs	r3, #12
 800133e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	4619      	mov	r1, r3
 8001344:	480d      	ldr	r0, [pc, #52]	; (800137c <HAL_FSMC_MspInit+0x90>)
 8001346:	f002 febd 	bl	80040c4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800134a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800134e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800135c:	230c      	movs	r3, #12
 800135e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	4619      	mov	r1, r3
 8001364:	4806      	ldr	r0, [pc, #24]	; (8001380 <HAL_FSMC_MspInit+0x94>)
 8001366:	f002 fead 	bl	80040c4 <HAL_GPIO_Init>
 800136a:	e000      	b.n	800136e <HAL_FSMC_MspInit+0x82>
    return;
 800136c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2000003c 	.word	0x2000003c
 8001378:	40023800 	.word	0x40023800
 800137c:	40021000 	.word	0x40021000
 8001380:	40020c00 	.word	0x40020c00

08001384 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800138c:	f7ff ffae 	bl	80012ec <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08e      	sub	sp, #56	; 0x38
 800139c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
 80013b2:	4b76      	ldr	r3, [pc, #472]	; (800158c <MX_GPIO_Init+0x1f4>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a75      	ldr	r2, [pc, #468]	; (800158c <MX_GPIO_Init+0x1f4>)
 80013b8:	f043 0310 	orr.w	r3, r3, #16
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b73      	ldr	r3, [pc, #460]	; (800158c <MX_GPIO_Init+0x1f4>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	623b      	str	r3, [r7, #32]
 80013c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
 80013ce:	4b6f      	ldr	r3, [pc, #444]	; (800158c <MX_GPIO_Init+0x1f4>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a6e      	ldr	r2, [pc, #440]	; (800158c <MX_GPIO_Init+0x1f4>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b6c      	ldr	r3, [pc, #432]	; (800158c <MX_GPIO_Init+0x1f4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
 80013ea:	4b68      	ldr	r3, [pc, #416]	; (800158c <MX_GPIO_Init+0x1f4>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a67      	ldr	r2, [pc, #412]	; (800158c <MX_GPIO_Init+0x1f4>)
 80013f0:	f043 0320 	orr.w	r3, r3, #32
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b65      	ldr	r3, [pc, #404]	; (800158c <MX_GPIO_Init+0x1f4>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0320 	and.w	r3, r3, #32
 80013fe:	61bb      	str	r3, [r7, #24]
 8001400:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	4b61      	ldr	r3, [pc, #388]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a60      	ldr	r2, [pc, #384]	; (800158c <MX_GPIO_Init+0x1f4>)
 800140c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b5e      	ldr	r3, [pc, #376]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b5a      	ldr	r3, [pc, #360]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a59      	ldr	r2, [pc, #356]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b57      	ldr	r3, [pc, #348]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b53      	ldr	r3, [pc, #332]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a52      	ldr	r2, [pc, #328]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b50      	ldr	r3, [pc, #320]	; (800158c <MX_GPIO_Init+0x1f4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	4b4c      	ldr	r3, [pc, #304]	; (800158c <MX_GPIO_Init+0x1f4>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a4b      	ldr	r2, [pc, #300]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001460:	f043 0308 	orr.w	r3, r3, #8
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b49      	ldr	r3, [pc, #292]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b45      	ldr	r3, [pc, #276]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a44      	ldr	r2, [pc, #272]	; (800158c <MX_GPIO_Init+0x1f4>)
 800147c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b42      	ldr	r3, [pc, #264]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2170      	movs	r1, #112	; 0x70
 8001492:	483f      	ldr	r0, [pc, #252]	; (8001590 <MX_GPIO_Init+0x1f8>)
 8001494:	f002 ffb2 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800149e:	483d      	ldr	r0, [pc, #244]	; (8001594 <MX_GPIO_Init+0x1fc>)
 80014a0:	f002 ffac 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2140      	movs	r1, #64	; 0x40
 80014a8:	483b      	ldr	r0, [pc, #236]	; (8001598 <MX_GPIO_Init+0x200>)
 80014aa:	f002 ffa7 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b4:	4839      	ldr	r0, [pc, #228]	; (800159c <MX_GPIO_Init+0x204>)
 80014b6:	f002 ffa1 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2108      	movs	r1, #8
 80014be:	4838      	ldr	r0, [pc, #224]	; (80015a0 <MX_GPIO_Init+0x208>)
 80014c0:	f002 ff9c 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80014c4:	2370      	movs	r3, #112	; 0x70
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d8:	4619      	mov	r1, r3
 80014da:	482d      	ldr	r0, [pc, #180]	; (8001590 <MX_GPIO_Init+0x1f8>)
 80014dc:	f002 fdf2 	bl	80040c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80014e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	4619      	mov	r1, r3
 80014f8:	4826      	ldr	r0, [pc, #152]	; (8001594 <MX_GPIO_Init+0x1fc>)
 80014fa:	f002 fde3 	bl	80040c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80014fe:	23c0      	movs	r3, #192	; 0xc0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001502:	2300      	movs	r3, #0
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150e:	4619      	mov	r1, r3
 8001510:	4822      	ldr	r0, [pc, #136]	; (800159c <MX_GPIO_Init+0x204>)
 8001512:	f002 fdd7 	bl	80040c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001516:	2330      	movs	r3, #48	; 0x30
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	481a      	ldr	r0, [pc, #104]	; (8001594 <MX_GPIO_Init+0x1fc>)
 800152a:	f002 fdcb 	bl	80040c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800152e:	2340      	movs	r3, #64	; 0x40
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001542:	4619      	mov	r1, r3
 8001544:	4814      	ldr	r0, [pc, #80]	; (8001598 <MX_GPIO_Init+0x200>)
 8001546:	f002 fdbd 	bl	80040c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800154a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	2301      	movs	r3, #1
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001560:	4619      	mov	r1, r3
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <MX_GPIO_Init+0x204>)
 8001564:	f002 fdae 	bl	80040c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001568:	2308      	movs	r3, #8
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156c:	2301      	movs	r3, #1
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157c:	4619      	mov	r1, r3
 800157e:	4808      	ldr	r0, [pc, #32]	; (80015a0 <MX_GPIO_Init+0x208>)
 8001580:	f002 fda0 	bl	80040c4 <HAL_GPIO_Init>

}
 8001584:	bf00      	nop
 8001586:	3738      	adds	r7, #56	; 0x38
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	40021000 	.word	0x40021000
 8001594:	40020800 	.word	0x40020800
 8001598:	40021800 	.word	0x40021800
 800159c:	40020000 	.word	0x40020000
 80015a0:	40020c00 	.word	0x40020c00

080015a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015aa:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015b0:	4a12      	ldr	r2, [pc, #72]	; (80015fc <MX_I2C1_Init+0x58>)
 80015b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015e2:	f002 ff3f 	bl	8004464 <HAL_I2C_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015ec:	f001 f892 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	2000017c 	.word	0x2000017c
 80015f8:	40005400 	.word	0x40005400
 80015fc:	000186a0 	.word	0x000186a0

08001600 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a19      	ldr	r2, [pc, #100]	; (8001684 <HAL_I2C_MspInit+0x84>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12b      	bne.n	800167a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_I2C_MspInit+0x88>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <HAL_I2C_MspInit+0x88>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_I2C_MspInit+0x88>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800163e:	23c0      	movs	r3, #192	; 0xc0
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001642:	2312      	movs	r3, #18
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800164e:	2304      	movs	r3, #4
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <HAL_I2C_MspInit+0x8c>)
 800165a:	f002 fd33 	bl	80040c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_I2C_MspInit+0x88>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_I2C_MspInit+0x88>)
 8001668:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_I2C_MspInit+0x88>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	; 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40005400 	.word	0x40005400
 8001688:	40023800 	.word	0x40023800
 800168c:	40020400 	.word	0x40020400

08001690 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <LCD_WR_REG+0x1c>)
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	8013      	strh	r3, [r2, #0]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	600ffffe 	.word	0x600ffffe

080016b0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <LCD_WR_DATA+0x1c>)
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	8053      	strh	r3, [r2, #2]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	600ffffe 	.word	0x600ffffe

080016d0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <LCD_RD_DATA+0x20>)
 80016d8:	885b      	ldrh	r3, [r3, #2]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	80fb      	strh	r3, [r7, #6]
	return ram;
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	b29b      	uxth	r3, r3
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	600ffffe 	.word	0x600ffffe

080016f4 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4604      	mov	r4, r0
 80016fc:	4608      	mov	r0, r1
 80016fe:	4611      	mov	r1, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4623      	mov	r3, r4
 8001704:	80fb      	strh	r3, [r7, #6]
 8001706:	4603      	mov	r3, r0
 8001708:	80bb      	strh	r3, [r7, #4]
 800170a:	460b      	mov	r3, r1
 800170c:	807b      	strh	r3, [r7, #2]
 800170e:	4613      	mov	r3, r2
 8001710:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001712:	202a      	movs	r0, #42	; 0x2a
 8001714:	f7ff ffbc 	bl	8001690 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	0a1b      	lsrs	r3, r3, #8
 800171c:	b29b      	uxth	r3, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ffc6 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	b29b      	uxth	r3, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ffc0 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001730:	887b      	ldrh	r3, [r7, #2]
 8001732:	0a1b      	lsrs	r3, r3, #8
 8001734:	b29b      	uxth	r3, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ffba 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 800173c:	887b      	ldrh	r3, [r7, #2]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	b29b      	uxth	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ffb4 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001748:	202b      	movs	r0, #43	; 0x2b
 800174a:	f7ff ffa1 	bl	8001690 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800174e:	88bb      	ldrh	r3, [r7, #4]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	b29b      	uxth	r3, r3
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ffab 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800175a:	88bb      	ldrh	r3, [r7, #4]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	b29b      	uxth	r3, r3
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ffa5 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001766:	883b      	ldrh	r3, [r7, #0]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	b29b      	uxth	r3, r3
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff9f 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001772:	883b      	ldrh	r3, [r7, #0]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	b29b      	uxth	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff99 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 800177e:	202c      	movs	r0, #44	; 0x2c
 8001780:	f7ff ff86 	bl	8001690 <LCD_WR_REG>
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bd90      	pop	{r4, r7, pc}

0800178c <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <lcd_Clear+0x60>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	3b01      	subs	r3, #1
 800179c:	b29a      	uxth	r2, r3
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <lcd_Clear+0x60>)
 80017a0:	885b      	ldrh	r3, [r3, #2]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	2100      	movs	r1, #0
 80017a8:	2000      	movs	r0, #0
 80017aa:	f7ff ffa3 	bl	80016f4 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	81fb      	strh	r3, [r7, #14]
 80017b2:	e011      	b.n	80017d8 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	81bb      	strh	r3, [r7, #12]
 80017b8:	e006      	b.n	80017c8 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff77 	bl	80016b0 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80017c2:	89bb      	ldrh	r3, [r7, #12]
 80017c4:	3301      	adds	r3, #1
 80017c6:	81bb      	strh	r3, [r7, #12]
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <lcd_Clear+0x60>)
 80017ca:	885b      	ldrh	r3, [r3, #2]
 80017cc:	89ba      	ldrh	r2, [r7, #12]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d3f3      	bcc.n	80017ba <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80017d2:	89fb      	ldrh	r3, [r7, #14]
 80017d4:	3301      	adds	r3, #1
 80017d6:	81fb      	strh	r3, [r7, #14]
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <lcd_Clear+0x60>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	89fa      	ldrh	r2, [r7, #14]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d3e8      	bcc.n	80017b4 <lcd_Clear+0x28>
		}
	}
}
 80017e2:	bf00      	nop
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200001d0 	.word	0x200001d0

080017f0 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	80fb      	strh	r3, [r7, #6]
 80017fa:	460b      	mov	r3, r1
 80017fc:	80bb      	strh	r3, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001802:	88bb      	ldrh	r3, [r7, #4]
 8001804:	88fa      	ldrh	r2, [r7, #6]
 8001806:	88b9      	ldrh	r1, [r7, #4]
 8001808:	88f8      	ldrh	r0, [r7, #6]
 800180a:	f7ff ff73 	bl	80016f4 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800180e:	887b      	ldrh	r3, [r7, #2]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff4d 	bl	80016b0 <LCD_WR_DATA>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	4604      	mov	r4, r0
 8001828:	4608      	mov	r0, r1
 800182a:	4611      	mov	r1, r2
 800182c:	461a      	mov	r2, r3
 800182e:	4623      	mov	r3, r4
 8001830:	80fb      	strh	r3, [r7, #6]
 8001832:	4603      	mov	r3, r0
 8001834:	80bb      	strh	r3, [r7, #4]
 8001836:	460b      	mov	r3, r1
 8001838:	70fb      	strb	r3, [r7, #3]
 800183a:	4613      	mov	r3, r2
 800183c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 800183e:	2300      	movs	r3, #0
 8001840:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001846:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800184a:	085b      	lsrs	r3, r3, #1
 800184c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	08db      	lsrs	r3, r3, #3
 8001852:	b2db      	uxtb	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	bf14      	ite	ne
 8001862:	2301      	movne	r3, #1
 8001864:	2300      	moveq	r3, #0
 8001866:	b2db      	uxtb	r3, r3
 8001868:	4413      	add	r3, r2
 800186a:	b29a      	uxth	r2, r3
 800186c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001870:	b29b      	uxth	r3, r3
 8001872:	fb12 f303 	smulbb	r3, r2, r3
 8001876:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	3b20      	subs	r3, #32
 800187c:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	b29a      	uxth	r2, r3
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	4413      	add	r3, r2
 8001886:	b29b      	uxth	r3, r3
 8001888:	3b01      	subs	r3, #1
 800188a:	b29c      	uxth	r4, r3
 800188c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001890:	b29a      	uxth	r2, r3
 8001892:	88bb      	ldrh	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	b29b      	uxth	r3, r3
 8001898:	3b01      	subs	r3, #1
 800189a:	b29b      	uxth	r3, r3
 800189c:	88b9      	ldrh	r1, [r7, #4]
 800189e:	88f8      	ldrh	r0, [r7, #6]
 80018a0:	4622      	mov	r2, r4
 80018a2:	f7ff ff27 	bl	80016f4 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	827b      	strh	r3, [r7, #18]
 80018aa:	e07a      	b.n	80019a2 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80018ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018b0:	2b0c      	cmp	r3, #12
 80018b2:	d028      	beq.n	8001906 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 80018b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018b8:	2b10      	cmp	r3, #16
 80018ba:	d108      	bne.n	80018ce <lcd_ShowChar+0xae>
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	8a7b      	ldrh	r3, [r7, #18]
 80018c0:	493c      	ldr	r1, [pc, #240]	; (80019b4 <lcd_ShowChar+0x194>)
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	440a      	add	r2, r1
 80018c6:	4413      	add	r3, r2
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	75fb      	strb	r3, [r7, #23]
 80018cc:	e01b      	b.n	8001906 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 80018ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018d2:	2b18      	cmp	r3, #24
 80018d4:	d10b      	bne.n	80018ee <lcd_ShowChar+0xce>
 80018d6:	78fa      	ldrb	r2, [r7, #3]
 80018d8:	8a79      	ldrh	r1, [r7, #18]
 80018da:	4837      	ldr	r0, [pc, #220]	; (80019b8 <lcd_ShowChar+0x198>)
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	011b      	lsls	r3, r3, #4
 80018e4:	4403      	add	r3, r0
 80018e6:	440b      	add	r3, r1
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	75fb      	strb	r3, [r7, #23]
 80018ec:	e00b      	b.n	8001906 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 80018ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018f2:	2b20      	cmp	r3, #32
 80018f4:	d15a      	bne.n	80019ac <lcd_ShowChar+0x18c>
 80018f6:	78fa      	ldrb	r2, [r7, #3]
 80018f8:	8a7b      	ldrh	r3, [r7, #18]
 80018fa:	4930      	ldr	r1, [pc, #192]	; (80019bc <lcd_ShowChar+0x19c>)
 80018fc:	0192      	lsls	r2, r2, #6
 80018fe:	440a      	add	r2, r1
 8001900:	4413      	add	r3, r2
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001906:	2300      	movs	r3, #0
 8001908:	75bb      	strb	r3, [r7, #22]
 800190a:	e044      	b.n	8001996 <lcd_ShowChar+0x176>
		{
			if(!mode)
 800190c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001910:	2b00      	cmp	r3, #0
 8001912:	d120      	bne.n	8001956 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001914:	7dfa      	ldrb	r2, [r7, #23]
 8001916:	7dbb      	ldrb	r3, [r7, #22]
 8001918:	fa42 f303 	asr.w	r3, r2, r3
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d004      	beq.n	800192e <lcd_ShowChar+0x10e>
 8001924:	883b      	ldrh	r3, [r7, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fec2 	bl	80016b0 <LCD_WR_DATA>
 800192c:	e003      	b.n	8001936 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 800192e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff febd 	bl	80016b0 <LCD_WR_DATA>
				m++;
 8001936:	7d7b      	ldrb	r3, [r7, #21]
 8001938:	3301      	adds	r3, #1
 800193a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 800193c:	7d7b      	ldrb	r3, [r7, #21]
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	fbb3 f1f2 	udiv	r1, r3, r2
 8001944:	fb02 f201 	mul.w	r2, r2, r1
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d11f      	bne.n	8001990 <lcd_ShowChar+0x170>
				{
					m=0;
 8001950:	2300      	movs	r3, #0
 8001952:	757b      	strb	r3, [r7, #21]
					break;
 8001954:	e022      	b.n	800199c <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001956:	7dfa      	ldrb	r2, [r7, #23]
 8001958:	7dbb      	ldrb	r3, [r7, #22]
 800195a:	fa42 f303 	asr.w	r3, r2, r3
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d005      	beq.n	8001972 <lcd_ShowChar+0x152>
 8001966:	883a      	ldrh	r2, [r7, #0]
 8001968:	88b9      	ldrh	r1, [r7, #4]
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff3f 	bl	80017f0 <lcd_DrawPoint>
				x++;
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	3301      	adds	r3, #1
 8001976:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001978:	88fa      	ldrh	r2, [r7, #6]
 800197a:	8a3b      	ldrh	r3, [r7, #16]
 800197c:	1ad2      	subs	r2, r2, r3
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	429a      	cmp	r2, r3
 8001982:	d105      	bne.n	8001990 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001984:	8a3b      	ldrh	r3, [r7, #16]
 8001986:	80fb      	strh	r3, [r7, #6]
					y++;
 8001988:	88bb      	ldrh	r3, [r7, #4]
 800198a:	3301      	adds	r3, #1
 800198c:	80bb      	strh	r3, [r7, #4]
					break;
 800198e:	e005      	b.n	800199c <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001990:	7dbb      	ldrb	r3, [r7, #22]
 8001992:	3301      	adds	r3, #1
 8001994:	75bb      	strb	r3, [r7, #22]
 8001996:	7dbb      	ldrb	r3, [r7, #22]
 8001998:	2b07      	cmp	r3, #7
 800199a:	d9b7      	bls.n	800190c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 800199c:	8a7b      	ldrh	r3, [r7, #18]
 800199e:	3301      	adds	r3, #1
 80019a0:	827b      	strh	r3, [r7, #18]
 80019a2:	8a7a      	ldrh	r2, [r7, #18]
 80019a4:	89bb      	ldrh	r3, [r7, #12]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d380      	bcc.n	80018ac <lcd_ShowChar+0x8c>
 80019aa:	e000      	b.n	80019ae <lcd_ShowChar+0x18e>
		else return;
 80019ac:	bf00      	nop
				}
			}
		}
	}
}
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd90      	pop	{r4, r7, pc}
 80019b4:	08007b4c 	.word	0x08007b4c
 80019b8:	0800813c 	.word	0x0800813c
 80019bc:	0800930c 	.word	0x0800930c

080019c0 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	460a      	mov	r2, r1
 80019ca:	71fb      	strb	r3, [r7, #7]
 80019cc:	4613      	mov	r3, r2
 80019ce:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 80019d0:	2301      	movs	r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 80019d4:	e004      	b.n	80019e0 <mypow+0x20>
 80019d6:	79fa      	ldrb	r2, [r7, #7]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	fb02 f303 	mul.w	r3, r2, r3
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	79bb      	ldrb	r3, [r7, #6]
 80019e2:	1e5a      	subs	r2, r3, #1
 80019e4:	71ba      	strb	r2, [r7, #6]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f5      	bne.n	80019d6 <mypow+0x16>
	return result;
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af04      	add	r7, sp, #16
 80019fe:	4604      	mov	r4, r0
 8001a00:	4608      	mov	r0, r1
 8001a02:	4611      	mov	r1, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4623      	mov	r3, r4
 8001a08:	80fb      	strh	r3, [r7, #6]
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80bb      	strh	r3, [r7, #4]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	807b      	strh	r3, [r7, #2]
 8001a12:	4613      	mov	r3, r2
 8001a14:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001a1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a1e:	085b      	lsrs	r3, r3, #1
 8001a20:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]
 8001a26:	e059      	b.n	8001adc <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001a28:	887c      	ldrh	r4, [r7, #2]
 8001a2a:	787a      	ldrb	r2, [r7, #1]
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	4619      	mov	r1, r3
 8001a38:	200a      	movs	r0, #10
 8001a3a:	f7ff ffc1 	bl	80019c0 <mypow>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	fbb4 f1f3 	udiv	r1, r4, r3
 8001a44:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <lcd_ShowIntNum+0xf8>)
 8001a46:	fba3 2301 	umull	r2, r3, r3, r1
 8001a4a:	08da      	lsrs	r2, r3, #3
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	1aca      	subs	r2, r1, r3
 8001a56:	4613      	mov	r3, r2
 8001a58:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001a5a:	7bbb      	ldrb	r3, [r7, #14]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d121      	bne.n	8001aa4 <lcd_ShowIntNum+0xac>
 8001a60:	7bfa      	ldrb	r2, [r7, #15]
 8001a62:	787b      	ldrb	r3, [r7, #1]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	429a      	cmp	r2, r3
 8001a68:	da1c      	bge.n	8001aa4 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001a6a:	7b3b      	ldrb	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d117      	bne.n	8001aa0 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	7b7b      	ldrb	r3, [r7, #13]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	fb12 f303 	smulbb	r3, r2, r3
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	4413      	add	r3, r2
 8001a82:	b298      	uxth	r0, r3
 8001a84:	8c3a      	ldrh	r2, [r7, #32]
 8001a86:	88b9      	ldrh	r1, [r7, #4]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9302      	str	r3, [sp, #8]
 8001a8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a90:	9301      	str	r3, [sp, #4]
 8001a92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	4613      	mov	r3, r2
 8001a98:	2220      	movs	r2, #32
 8001a9a:	f7ff fec1 	bl	8001820 <lcd_ShowChar>
				continue;
 8001a9e:	e01a      	b.n	8001ad6 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	7b7b      	ldrb	r3, [r7, #13]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	fb12 f303 	smulbb	r3, r2, r3
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	b298      	uxth	r0, r3
 8001ab8:	7b3b      	ldrb	r3, [r7, #12]
 8001aba:	3330      	adds	r3, #48	; 0x30
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	8c3c      	ldrh	r4, [r7, #32]
 8001ac0:	88b9      	ldrh	r1, [r7, #4]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	9302      	str	r3, [sp, #8]
 8001ac6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	4623      	mov	r3, r4
 8001ad2:	f7ff fea5 	bl	8001820 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
 8001adc:	7bfa      	ldrb	r2, [r7, #15]
 8001ade:	787b      	ldrb	r3, [r7, #1]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d3a1      	bcc.n	8001a28 <lcd_ShowIntNum+0x30>
	}
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd90      	pop	{r4, r7, pc}
 8001aee:	bf00      	nop
 8001af0:	cccccccd 	.word	0xcccccccd

08001af4 <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b08b      	sub	sp, #44	; 0x2c
 8001af8:	af04      	add	r7, sp, #16
 8001afa:	4604      	mov	r4, r0
 8001afc:	4608      	mov	r0, r1
 8001afe:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b02:	4611      	mov	r1, r2
 8001b04:	461a      	mov	r2, r3
 8001b06:	4623      	mov	r3, r4
 8001b08:	81fb      	strh	r3, [r7, #14]
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	81bb      	strh	r3, [r7, #12]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	71fb      	strb	r3, [r7, #7]
 8001b12:	4613      	mov	r3, r2
 8001b14:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001b16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b1a:	085b      	lsrs	r3, r3, #1
 8001b1c:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001b1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b22:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001bfc <lcd_ShowFloatNum+0x108>
 8001b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b2e:	ee17 3a90 	vmov	r3, s15
 8001b32:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	75fb      	strb	r3, [r7, #23]
 8001b38:	e057      	b.n	8001bea <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001b3a:	8abc      	ldrh	r4, [r7, #20]
 8001b3c:	79fa      	ldrb	r2, [r7, #7]
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	4619      	mov	r1, r3
 8001b4a:	200a      	movs	r0, #10
 8001b4c:	f7ff ff38 	bl	80019c0 <mypow>
 8001b50:	4603      	mov	r3, r0
 8001b52:	fbb4 f1f3 	udiv	r1, r4, r3
 8001b56:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <lcd_ShowFloatNum+0x10c>)
 8001b58:	fba3 2301 	umull	r2, r3, r3, r1
 8001b5c:	08da      	lsrs	r2, r3, #3
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	1aca      	subs	r2, r1, r3
 8001b68:	4613      	mov	r3, r2
 8001b6a:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001b6c:	7dfa      	ldrb	r2, [r7, #23]
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	3b02      	subs	r3, #2
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d11d      	bne.n	8001bb2 <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	3b02      	subs	r3, #2
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	7dbb      	ldrb	r3, [r7, #22]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	fb12 f303 	smulbb	r3, r2, r3
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	89fb      	ldrh	r3, [r7, #14]
 8001b88:	4413      	add	r3, r2
 8001b8a:	b298      	uxth	r0, r3
 8001b8c:	88ba      	ldrh	r2, [r7, #4]
 8001b8e:	89b9      	ldrh	r1, [r7, #12]
 8001b90:	2300      	movs	r3, #0
 8001b92:	9302      	str	r3, [sp, #8]
 8001b94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	222e      	movs	r2, #46	; 0x2e
 8001ba2:	f7ff fe3d 	bl	8001820 <lcd_ShowChar>
			t++;
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	7dbb      	ldrb	r3, [r7, #22]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	fb12 f303 	smulbb	r3, r2, r3
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	89fb      	ldrh	r3, [r7, #14]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	b298      	uxth	r0, r3
 8001bc6:	7cfb      	ldrb	r3, [r7, #19]
 8001bc8:	3330      	adds	r3, #48	; 0x30
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	88bc      	ldrh	r4, [r7, #4]
 8001bce:	89b9      	ldrh	r1, [r7, #12]
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	9302      	str	r3, [sp, #8]
 8001bd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	4623      	mov	r3, r4
 8001be0:	f7ff fe1e 	bl	8001820 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	3301      	adds	r3, #1
 8001be8:	75fb      	strb	r3, [r7, #23]
 8001bea:	7dfa      	ldrb	r2, [r7, #23]
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d3a3      	bcc.n	8001b3a <lcd_ShowFloatNum+0x46>
	}
}
 8001bf2:	bf00      	nop
 8001bf4:	bf00      	nop
 8001bf6:	371c      	adds	r7, #28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd90      	pop	{r4, r7, pc}
 8001bfc:	42c80000 	.word	0x42c80000
 8001c00:	cccccccd 	.word	0xcccccccd

08001c04 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d007      	beq.n	8001c2e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <lcd_SetDir+0x44>)
 8001c20:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c24:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <lcd_SetDir+0x44>)
 8001c28:	22f0      	movs	r2, #240	; 0xf0
 8001c2a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001c2c:	e006      	b.n	8001c3c <lcd_SetDir+0x38>
		lcddev.width=240;
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <lcd_SetDir+0x44>)
 8001c30:	22f0      	movs	r2, #240	; 0xf0
 8001c32:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <lcd_SetDir+0x44>)
 8001c36:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c3a:	805a      	strh	r2, [r3, #2]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	200001d0 	.word	0x200001d0

08001c4c <lcd_init>:


void lcd_init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001c50:	2200      	movs	r2, #0
 8001c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c56:	48aa      	ldr	r0, [pc, #680]	; (8001f00 <lcd_init+0x2b4>)
 8001c58:	f002 fbd0 	bl	80043fc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c60:	f001 f978 	bl	8002f54 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001c64:	2201      	movs	r2, #1
 8001c66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c6a:	48a5      	ldr	r0, [pc, #660]	; (8001f00 <lcd_init+0x2b4>)
 8001c6c:	f002 fbc6 	bl	80043fc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c74:	f001 f96e 	bl	8002f54 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f7ff ffc3 	bl	8001c04 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001c7e:	20d3      	movs	r0, #211	; 0xd3
 8001c80:	f7ff fd06 	bl	8001690 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001c84:	f7ff fd24 	bl	80016d0 <LCD_RD_DATA>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4b9d      	ldr	r3, [pc, #628]	; (8001f04 <lcd_init+0x2b8>)
 8001c8e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001c90:	f7ff fd1e 	bl	80016d0 <LCD_RD_DATA>
 8001c94:	4603      	mov	r3, r0
 8001c96:	461a      	mov	r2, r3
 8001c98:	4b9a      	ldr	r3, [pc, #616]	; (8001f04 <lcd_init+0x2b8>)
 8001c9a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001c9c:	f7ff fd18 	bl	80016d0 <LCD_RD_DATA>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b97      	ldr	r3, [pc, #604]	; (8001f04 <lcd_init+0x2b8>)
 8001ca6:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001ca8:	4b96      	ldr	r3, [pc, #600]	; (8001f04 <lcd_init+0x2b8>)
 8001caa:	889b      	ldrh	r3, [r3, #4]
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	4b94      	ldr	r3, [pc, #592]	; (8001f04 <lcd_init+0x2b8>)
 8001cb2:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001cb4:	f7ff fd0c 	bl	80016d0 <LCD_RD_DATA>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b91      	ldr	r3, [pc, #580]	; (8001f04 <lcd_init+0x2b8>)
 8001cbe:	889b      	ldrh	r3, [r3, #4]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	4b8f      	ldr	r3, [pc, #572]	; (8001f04 <lcd_init+0x2b8>)
 8001cc6:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001cc8:	20cf      	movs	r0, #207	; 0xcf
 8001cca:	f7ff fce1 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f7ff fcee 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001cd4:	20c1      	movs	r0, #193	; 0xc1
 8001cd6:	f7ff fceb 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001cda:	2030      	movs	r0, #48	; 0x30
 8001cdc:	f7ff fce8 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001ce0:	20ed      	movs	r0, #237	; 0xed
 8001ce2:	f7ff fcd5 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001ce6:	2064      	movs	r0, #100	; 0x64
 8001ce8:	f7ff fce2 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f7ff fcdf 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001cf2:	2012      	movs	r0, #18
 8001cf4:	f7ff fcdc 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001cf8:	2081      	movs	r0, #129	; 0x81
 8001cfa:	f7ff fcd9 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001cfe:	20e8      	movs	r0, #232	; 0xe8
 8001d00:	f7ff fcc6 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001d04:	2085      	movs	r0, #133	; 0x85
 8001d06:	f7ff fcd3 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001d0a:	2010      	movs	r0, #16
 8001d0c:	f7ff fcd0 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001d10:	207a      	movs	r0, #122	; 0x7a
 8001d12:	f7ff fccd 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001d16:	20cb      	movs	r0, #203	; 0xcb
 8001d18:	f7ff fcba 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001d1c:	2039      	movs	r0, #57	; 0x39
 8001d1e:	f7ff fcc7 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001d22:	202c      	movs	r0, #44	; 0x2c
 8001d24:	f7ff fcc4 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7ff fcc1 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001d2e:	2034      	movs	r0, #52	; 0x34
 8001d30:	f7ff fcbe 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001d34:	2002      	movs	r0, #2
 8001d36:	f7ff fcbb 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001d3a:	20f7      	movs	r0, #247	; 0xf7
 8001d3c:	f7ff fca8 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001d40:	2020      	movs	r0, #32
 8001d42:	f7ff fcb5 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001d46:	20ea      	movs	r0, #234	; 0xea
 8001d48:	f7ff fca2 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f7ff fcaf 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d52:	2000      	movs	r0, #0
 8001d54:	f7ff fcac 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001d58:	20c0      	movs	r0, #192	; 0xc0
 8001d5a:	f7ff fc99 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001d5e:	201b      	movs	r0, #27
 8001d60:	f7ff fca6 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001d64:	20c1      	movs	r0, #193	; 0xc1
 8001d66:	f7ff fc93 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f7ff fca0 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001d70:	20c5      	movs	r0, #197	; 0xc5
 8001d72:	f7ff fc8d 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001d76:	2030      	movs	r0, #48	; 0x30
 8001d78:	f7ff fc9a 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001d7c:	2030      	movs	r0, #48	; 0x30
 8001d7e:	f7ff fc97 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001d82:	20c7      	movs	r0, #199	; 0xc7
 8001d84:	f7ff fc84 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001d88:	20b7      	movs	r0, #183	; 0xb7
 8001d8a:	f7ff fc91 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001d8e:	2036      	movs	r0, #54	; 0x36
 8001d90:	f7ff fc7e 	bl	8001690 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001d94:	2008      	movs	r0, #8
 8001d96:	f7ff fc8b 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001d9a:	203a      	movs	r0, #58	; 0x3a
 8001d9c:	f7ff fc78 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001da0:	2055      	movs	r0, #85	; 0x55
 8001da2:	f7ff fc85 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001da6:	20b1      	movs	r0, #177	; 0xb1
 8001da8:	f7ff fc72 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001dac:	2000      	movs	r0, #0
 8001dae:	f7ff fc7f 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001db2:	201a      	movs	r0, #26
 8001db4:	f7ff fc7c 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001db8:	20b6      	movs	r0, #182	; 0xb6
 8001dba:	f7ff fc69 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001dbe:	200a      	movs	r0, #10
 8001dc0:	f7ff fc76 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001dc4:	20a2      	movs	r0, #162	; 0xa2
 8001dc6:	f7ff fc73 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001dca:	20f2      	movs	r0, #242	; 0xf2
 8001dcc:	f7ff fc60 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f7ff fc6d 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001dd6:	2026      	movs	r0, #38	; 0x26
 8001dd8:	f7ff fc5a 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f7ff fc67 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001de2:	20e0      	movs	r0, #224	; 0xe0
 8001de4:	f7ff fc54 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001de8:	200f      	movs	r0, #15
 8001dea:	f7ff fc61 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001dee:	202a      	movs	r0, #42	; 0x2a
 8001df0:	f7ff fc5e 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001df4:	2028      	movs	r0, #40	; 0x28
 8001df6:	f7ff fc5b 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001dfa:	2008      	movs	r0, #8
 8001dfc:	f7ff fc58 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001e00:	200e      	movs	r0, #14
 8001e02:	f7ff fc55 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e06:	2008      	movs	r0, #8
 8001e08:	f7ff fc52 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001e0c:	2054      	movs	r0, #84	; 0x54
 8001e0e:	f7ff fc4f 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001e12:	20a9      	movs	r0, #169	; 0xa9
 8001e14:	f7ff fc4c 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001e18:	2043      	movs	r0, #67	; 0x43
 8001e1a:	f7ff fc49 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001e1e:	200a      	movs	r0, #10
 8001e20:	f7ff fc46 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e24:	200f      	movs	r0, #15
 8001e26:	f7ff fc43 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f7ff fc40 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e30:	2000      	movs	r0, #0
 8001e32:	f7ff fc3d 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e36:	2000      	movs	r0, #0
 8001e38:	f7ff fc3a 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f7ff fc37 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001e42:	20e1      	movs	r0, #225	; 0xe1
 8001e44:	f7ff fc24 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f7ff fc31 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001e4e:	2015      	movs	r0, #21
 8001e50:	f7ff fc2e 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001e54:	2017      	movs	r0, #23
 8001e56:	f7ff fc2b 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001e5a:	2007      	movs	r0, #7
 8001e5c:	f7ff fc28 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001e60:	2011      	movs	r0, #17
 8001e62:	f7ff fc25 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001e66:	2006      	movs	r0, #6
 8001e68:	f7ff fc22 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001e6c:	202b      	movs	r0, #43	; 0x2b
 8001e6e:	f7ff fc1f 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001e72:	2056      	movs	r0, #86	; 0x56
 8001e74:	f7ff fc1c 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001e78:	203c      	movs	r0, #60	; 0x3c
 8001e7a:	f7ff fc19 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001e7e:	2005      	movs	r0, #5
 8001e80:	f7ff fc16 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001e84:	2010      	movs	r0, #16
 8001e86:	f7ff fc13 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e8a:	200f      	movs	r0, #15
 8001e8c:	f7ff fc10 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001e90:	203f      	movs	r0, #63	; 0x3f
 8001e92:	f7ff fc0d 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001e96:	203f      	movs	r0, #63	; 0x3f
 8001e98:	f7ff fc0a 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e9c:	200f      	movs	r0, #15
 8001e9e:	f7ff fc07 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001ea2:	202b      	movs	r0, #43	; 0x2b
 8001ea4:	f7ff fbf4 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7ff fc01 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f7ff fbfe 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f7ff fbfb 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001eba:	203f      	movs	r0, #63	; 0x3f
 8001ebc:	f7ff fbf8 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001ec0:	202a      	movs	r0, #42	; 0x2a
 8001ec2:	f7ff fbe5 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f7ff fbf2 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f7ff fbef 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f7ff fbec 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001ed8:	20ef      	movs	r0, #239	; 0xef
 8001eda:	f7ff fbe9 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001ede:	2011      	movs	r0, #17
 8001ee0:	f7ff fbd6 	bl	8001690 <LCD_WR_REG>
	HAL_Delay(120);
 8001ee4:	2078      	movs	r0, #120	; 0x78
 8001ee6:	f001 f835 	bl	8002f54 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001eea:	2029      	movs	r0, #41	; 0x29
 8001eec:	f7ff fbd0 	bl	8001690 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ef6:	4804      	ldr	r0, [pc, #16]	; (8001f08 <lcd_init+0x2bc>)
 8001ef8:	f002 fa80 	bl	80043fc <HAL_GPIO_WritePin>
}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40020800 	.word	0x40020800
 8001f04:	200001d0 	.word	0x200001d0
 8001f08:	40020000 	.word	0x40020000

08001f0c <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b08b      	sub	sp, #44	; 0x2c
 8001f10:	af04      	add	r7, sp, #16
 8001f12:	60ba      	str	r2, [r7, #8]
 8001f14:	461a      	mov	r2, r3
 8001f16:	4603      	mov	r3, r0
 8001f18:	81fb      	strh	r3, [r7, #14]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	81bb      	strh	r3, [r7, #12]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001f22:	89fb      	ldrh	r3, [r7, #14]
 8001f24:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001f2a:	e048      	b.n	8001fbe <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001f2c:	7dfb      	ldrb	r3, [r7, #23]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d145      	bne.n	8001fbe <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001f32:	89fa      	ldrh	r2, [r7, #14]
 8001f34:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <lcd_ShowStr+0xc4>)
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f3e:	085b      	lsrs	r3, r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	1acb      	subs	r3, r1, r3
 8001f44:	429a      	cmp	r2, r3
 8001f46:	dc3f      	bgt.n	8001fc8 <lcd_ShowStr+0xbc>
 8001f48:	89ba      	ldrh	r2, [r7, #12]
 8001f4a:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <lcd_ShowStr+0xc4>)
 8001f4c:	885b      	ldrh	r3, [r3, #2]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f54:	1acb      	subs	r3, r1, r3
 8001f56:	429a      	cmp	r2, r3
 8001f58:	dc36      	bgt.n	8001fc8 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b80      	cmp	r3, #128	; 0x80
 8001f60:	d902      	bls.n	8001f68 <lcd_ShowStr+0x5c>
 8001f62:	2301      	movs	r3, #1
 8001f64:	75fb      	strb	r3, [r7, #23]
 8001f66:	e02a      	b.n	8001fbe <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b0d      	cmp	r3, #13
 8001f6e:	d10b      	bne.n	8001f88 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001f70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	89bb      	ldrh	r3, [r7, #12]
 8001f78:	4413      	add	r3, r2
 8001f7a:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001f7c:	8abb      	ldrh	r3, [r7, #20]
 8001f7e:	81fb      	strh	r3, [r7, #14]
					str++;
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	3301      	adds	r3, #1
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	e017      	b.n	8001fb8 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	781a      	ldrb	r2, [r3, #0]
 8001f8c:	88fc      	ldrh	r4, [r7, #6]
 8001f8e:	89b9      	ldrh	r1, [r7, #12]
 8001f90:	89f8      	ldrh	r0, [r7, #14]
 8001f92:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f96:	9302      	str	r3, [sp, #8]
 8001f98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f9c:	9301      	str	r3, [sp, #4]
 8001f9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	4623      	mov	r3, r4
 8001fa4:	f7ff fc3c 	bl	8001820 <lcd_ShowChar>
					x+=sizey/2;
 8001fa8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fac:	085b      	lsrs	r3, r3, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	89fb      	ldrh	r3, [r7, #14]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1b2      	bne.n	8001f2c <lcd_ShowStr+0x20>
 8001fc6:	e000      	b.n	8001fca <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001fc8:	bf00      	nop
			}
		}
	}
}
 8001fca:	371c      	adds	r7, #28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd90      	pop	{r4, r7, pc}
 8001fd0:	200001d0 	.word	0x200001d0

08001fd4 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2140      	movs	r1, #64	; 0x40
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <led7_init+0x14>)
 8001fde:	f002 fa0d 	bl	80043fc <HAL_GPIO_WritePin>
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40021800 	.word	0x40021800

08001fec <led7_Scan>:

void led7_Scan(){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001ff0:	4b3f      	ldr	r3, [pc, #252]	; (80020f0 <led7_Scan+0x104>)
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	4b3d      	ldr	r3, [pc, #244]	; (80020f0 <led7_Scan+0x104>)
 8001ffa:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001ffc:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <led7_Scan+0x108>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a3d      	ldr	r2, [pc, #244]	; (80020f8 <led7_Scan+0x10c>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	b21a      	sxth	r2, r3
 8002008:	4b39      	ldr	r3, [pc, #228]	; (80020f0 <led7_Scan+0x104>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	b21b      	sxth	r3, r3
 800200e:	4313      	orrs	r3, r2
 8002010:	b21b      	sxth	r3, r3
 8002012:	b29a      	uxth	r2, r3
 8002014:	4b36      	ldr	r3, [pc, #216]	; (80020f0 <led7_Scan+0x104>)
 8002016:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002018:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <led7_Scan+0x108>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d847      	bhi.n	80020b0 <led7_Scan+0xc4>
 8002020:	a201      	add	r2, pc, #4	; (adr r2, 8002028 <led7_Scan+0x3c>)
 8002022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002026:	bf00      	nop
 8002028:	08002039 	.word	0x08002039
 800202c:	08002057 	.word	0x08002057
 8002030:	08002075 	.word	0x08002075
 8002034:	08002093 	.word	0x08002093
	case 0:
		spi_buffer |= 0x00b0;
 8002038:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <led7_Scan+0x104>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002040:	b29a      	uxth	r2, r3
 8002042:	4b2b      	ldr	r3, [pc, #172]	; (80020f0 <led7_Scan+0x104>)
 8002044:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8002046:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <led7_Scan+0x104>)
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800204e:	b29a      	uxth	r2, r3
 8002050:	4b27      	ldr	r3, [pc, #156]	; (80020f0 <led7_Scan+0x104>)
 8002052:	801a      	strh	r2, [r3, #0]
		break;
 8002054:	e02d      	b.n	80020b2 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002056:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <led7_Scan+0x104>)
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800205e:	b29a      	uxth	r2, r3
 8002060:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <led7_Scan+0x104>)
 8002062:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8002064:	4b22      	ldr	r3, [pc, #136]	; (80020f0 <led7_Scan+0x104>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	f023 0320 	bic.w	r3, r3, #32
 800206c:	b29a      	uxth	r2, r3
 800206e:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <led7_Scan+0x104>)
 8002070:	801a      	strh	r2, [r3, #0]
		break;
 8002072:	e01e      	b.n	80020b2 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002074:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <led7_Scan+0x104>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800207c:	b29a      	uxth	r2, r3
 800207e:	4b1c      	ldr	r3, [pc, #112]	; (80020f0 <led7_Scan+0x104>)
 8002080:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8002082:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <led7_Scan+0x104>)
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	f023 0310 	bic.w	r3, r3, #16
 800208a:	b29a      	uxth	r2, r3
 800208c:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <led7_Scan+0x104>)
 800208e:	801a      	strh	r2, [r3, #0]
		break;
 8002090:	e00f      	b.n	80020b2 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002092:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <led7_Scan+0x104>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800209a:	b29a      	uxth	r2, r3
 800209c:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <led7_Scan+0x104>)
 800209e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <led7_Scan+0x104>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <led7_Scan+0x104>)
 80020ac:	801a      	strh	r2, [r3, #0]
		break;
 80020ae:	e000      	b.n	80020b2 <led7_Scan+0xc6>
	default:
		break;
 80020b0:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <led7_Scan+0x108>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	3301      	adds	r3, #1
 80020b8:	425a      	negs	r2, r3
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	f002 0203 	and.w	r2, r2, #3
 80020c2:	bf58      	it	pl
 80020c4:	4253      	negpl	r3, r2
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <led7_Scan+0x108>)
 80020c8:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2140      	movs	r1, #64	; 0x40
 80020ce:	480b      	ldr	r0, [pc, #44]	; (80020fc <led7_Scan+0x110>)
 80020d0:	f002 f994 	bl	80043fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80020d4:	2301      	movs	r3, #1
 80020d6:	2202      	movs	r2, #2
 80020d8:	4905      	ldr	r1, [pc, #20]	; (80020f0 <led7_Scan+0x104>)
 80020da:	4809      	ldr	r0, [pc, #36]	; (8002100 <led7_Scan+0x114>)
 80020dc:	f003 fe6b 	bl	8005db6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80020e0:	2201      	movs	r2, #1
 80020e2:	2140      	movs	r1, #64	; 0x40
 80020e4:	4805      	ldr	r0, [pc, #20]	; (80020fc <led7_Scan+0x110>)
 80020e6:	f002 f989 	bl	80043fc <HAL_GPIO_WritePin>
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2000000e 	.word	0x2000000e
 80020f4:	20000040 	.word	0x20000040
 80020f8:	20000000 	.word	0x20000000
 80020fc:	40021800 	.word	0x40021800
 8002100:	20000218 	.word	0x20000218

08002104 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	4613      	mov	r3, r2
 8002110:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	db0e      	blt.n	8002136 <led7_SetDigit+0x32>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b09      	cmp	r3, #9
 800211c:	dc0b      	bgt.n	8002136 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 800211e:	4a09      	ldr	r2, [pc, #36]	; (8002144 <led7_SetDigit+0x40>)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4413      	add	r3, r2
 8002124:	781a      	ldrb	r2, [r3, #0]
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	b2d9      	uxtb	r1, r3
 800212c:	4a06      	ldr	r2, [pc, #24]	; (8002148 <led7_SetDigit+0x44>)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	4413      	add	r3, r2
 8002132:	460a      	mov	r2, r1
 8002134:	701a      	strb	r2, [r3, #0]
	}
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000004 	.word	0x20000004
 8002148:	20000000 	.word	0x20000000

0800214c <led7_SetColon>:

void led7_SetColon(uint8_t status){
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d107      	bne.n	800216c <led7_SetColon+0x20>
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <led7_SetColon+0x3c>)
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	f023 0308 	bic.w	r3, r3, #8
 8002164:	b29a      	uxth	r2, r3
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <led7_SetColon+0x3c>)
 8002168:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 800216a:	e006      	b.n	800217a <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <led7_SetColon+0x3c>)
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	f043 0308 	orr.w	r3, r3, #8
 8002174:	b29a      	uxth	r2, r3
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <led7_SetColon+0x3c>)
 8002178:	801a      	strh	r2, [r3, #0]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	2000000e 	.word	0x2000000e

0800218c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002190:	f000 fe6e 	bl	8002e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002194:	f000 f828 	bl	80021e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002198:	f7ff f8fe 	bl	8001398 <MX_GPIO_Init>
  MX_TIM2_Init();
 800219c:	f000 fcf0 	bl	8002b80 <MX_TIM2_Init>
  MX_SPI1_Init();
 80021a0:	f000 fbf8 	bl	8002994 <MX_SPI1_Init>
  MX_FSMC_Init();
 80021a4:	f7ff f828 	bl	80011f8 <MX_FSMC_Init>
  MX_I2C1_Init();
 80021a8:	f7ff f9fc 	bl	80015a4 <MX_I2C1_Init>
  MX_TIM13_Init();
 80021ac:	f000 fd34 	bl	8002c18 <MX_TIM13_Init>
  MX_DMA_Init();
 80021b0:	f7fe ff5c 	bl	800106c <MX_DMA_Init>
  MX_ADC1_Init();
 80021b4:	f7fe fda2 	bl	8000cfc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80021b8:	f000 f880 	bl	80022bc <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 80021bc:	2000      	movs	r0, #0
 80021be:	f7ff fae5 	bl	800178c <lcd_Clear>
  while (1)
  {
	  while(!flag_timer2);
 80021c2:	bf00      	nop
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <main+0x58>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0fb      	beq.n	80021c4 <main+0x38>
	  flag_timer2 = 0;
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <main+0x58>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 80021d2:	f7fe febd 	bl	8000f50 <button_Scan>
	  test_LedDebug();
 80021d6:	f000 f887 	bl	80022e8 <test_LedDebug>
	  test_Adc();
 80021da:	f000 f973 	bl	80024c4 <test_Adc>
	  test_Buzzer();
 80021de:	f000 fa7d 	bl	80026dc <test_Buzzer>
	  while(!flag_timer2);
 80021e2:	e7ee      	b.n	80021c2 <main+0x36>
 80021e4:	2000004e 	.word	0x2000004e

080021e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b094      	sub	sp, #80	; 0x50
 80021ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ee:	f107 0320 	add.w	r3, r7, #32
 80021f2:	2230      	movs	r2, #48	; 0x30
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f005 fc70 	bl	8007adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800220c:	2300      	movs	r3, #0
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	4b28      	ldr	r3, [pc, #160]	; (80022b4 <SystemClock_Config+0xcc>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	4a27      	ldr	r2, [pc, #156]	; (80022b4 <SystemClock_Config+0xcc>)
 8002216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221a:	6413      	str	r3, [r2, #64]	; 0x40
 800221c:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <SystemClock_Config+0xcc>)
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002228:	2300      	movs	r3, #0
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <SystemClock_Config+0xd0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a21      	ldr	r2, [pc, #132]	; (80022b8 <SystemClock_Config+0xd0>)
 8002232:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <SystemClock_Config+0xd0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002244:	2302      	movs	r3, #2
 8002246:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002248:	2301      	movs	r3, #1
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800224c:	2310      	movs	r3, #16
 800224e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002250:	2302      	movs	r3, #2
 8002252:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002254:	2300      	movs	r3, #0
 8002256:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002258:	2308      	movs	r3, #8
 800225a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800225c:	23a8      	movs	r3, #168	; 0xa8
 800225e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002260:	2302      	movs	r3, #2
 8002262:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002264:	2304      	movs	r3, #4
 8002266:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002268:	f107 0320 	add.w	r3, r7, #32
 800226c:	4618      	mov	r0, r3
 800226e:	f003 f8b9 	bl	80053e4 <HAL_RCC_OscConfig>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002278:	f000 fa4c 	bl	8002714 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800227c:	230f      	movs	r3, #15
 800227e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002280:	2302      	movs	r3, #2
 8002282:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002288:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800228c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800228e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002292:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	2105      	movs	r1, #5
 800229a:	4618      	mov	r0, r3
 800229c:	f003 fb1a 	bl	80058d4 <HAL_RCC_ClockConfig>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80022a6:	f000 fa35 	bl	8002714 <Error_Handler>
  }
}
 80022aa:	bf00      	nop
 80022ac:	3750      	adds	r7, #80	; 0x50
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40007000 	.word	0x40007000

080022bc <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
	timer_init();
 80022c0:	f000 fb18 	bl	80028f4 <timer_init>
	button_init();
 80022c4:	f7fe fe38 	bl	8000f38 <button_init>
	lcd_init();
 80022c8:	f7ff fcc0 	bl	8001c4c <lcd_init>
	sensor_init();
 80022cc:	f000 fa28 	bl	8002720 <sensor_init>
	buzzer_init();
 80022d0:	f7fe feaa 	bl	8001028 <buzzer_init>
	setTimer2(50);
 80022d4:	2032      	movs	r0, #50	; 0x32
 80022d6:	f000 fb17 	bl	8002908 <setTimer2>
	led7_init();
 80022da:	f7ff fe7b 	bl	8001fd4 <led7_init>
	ds3231_init();
 80022de:	f7fe fee5 	bl	80010ac <ds3231_init>
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 80022ec:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <test_LedDebug+0x3c>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <test_LedDebug+0x40>)
 80022f4:	fb83 1302 	smull	r1, r3, r3, r2
 80022f8:	10d9      	asrs	r1, r3, #3
 80022fa:	17d3      	asrs	r3, r2, #31
 80022fc:	1ac9      	subs	r1, r1, r3
 80022fe:	460b      	mov	r3, r1
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	1ad1      	subs	r1, r2, r3
 8002308:	b2ca      	uxtb	r2, r1
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <test_LedDebug+0x3c>)
 800230c:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <test_LedDebug+0x3c>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d103      	bne.n	800231e <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8002316:	2110      	movs	r1, #16
 8002318:	4804      	ldr	r0, [pc, #16]	; (800232c <test_LedDebug+0x44>)
 800231a:	f002 f888 	bl	800442e <HAL_GPIO_TogglePin>
	}
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000044 	.word	0x20000044
 8002328:	66666667 	.word	0x66666667
 800232c:	40021000 	.word	0x40021000

08002330 <isButtonUp>:

uint8_t isButtonUp()
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
    if (button_count[3] == 1)
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <isButtonUp+0x1c>)
 8002336:	88db      	ldrh	r3, [r3, #6]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <isButtonUp+0x10>
        return 1;
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <isButtonUp+0x12>
    else
        return 0;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	200000fc 	.word	0x200000fc

08002350 <isButtonDown>:

uint8_t isButtonDown()
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
    if (button_count[7] == 1)
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <isButtonDown+0x1c>)
 8002356:	89db      	ldrh	r3, [r3, #14]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <isButtonDown+0x10>
        return 1;
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <isButtonDown+0x12>
    else
        return 0;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	200000fc 	.word	0x200000fc

08002370 <isButtonRight>:

uint8_t isButtonRight()
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
    if (button_count[11] == 1)
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <isButtonRight+0x1c>)
 8002376:	8adb      	ldrh	r3, [r3, #22]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <isButtonRight+0x10>
        return 1;
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <isButtonRight+0x12>
    else
        return 0;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	200000fc 	.word	0x200000fc

08002390 <get_PowerConsumption>:

uint8_t count_adc = 0;
uint8_t alarm_state = 0;  // 0: No alarm, 1: Alarm active
uint32_t last_buzzer_toggle_time = 0;  // To track the last time buzzer was toggled

float get_PowerConsumption() {
 8002390:	b580      	push	{r7, lr}
 8002392:	ed2d 8b02 	vpush	{d8}
 8002396:	af00      	add	r7, sp, #0
	return sensor_GetVoltage() * sensor_GetCurrent() * 1000;
 8002398:	f000 f9f6 	bl	8002788 <sensor_GetVoltage>
 800239c:	eeb0 8a40 	vmov.f32	s16, s0
 80023a0:	f000 fa2e 	bl	8002800 <sensor_GetCurrent>
 80023a4:	eef0 7a40 	vmov.f32	s15, s0
 80023a8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80023ac:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80023c0 <get_PowerConsumption+0x30>
 80023b0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80023b4:	eeb0 0a67 	vmov.f32	s0, s15
 80023b8:	46bd      	mov	sp, r7
 80023ba:	ecbd 8b02 	vpop	{d8}
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	447a0000 	.word	0x447a0000
 80023c4:	00000000 	.word	0x00000000

080023c8 <get_Humidity>:

float get_Humidity() {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
	return ((float)sensor_GetPotentiometer() / 4095.0) * 100;
 80023cc:	f000 f9d0 	bl	8002770 <sensor_GetPotentiometer>
 80023d0:	4603      	mov	r3, r0
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023da:	ee17 0a90 	vmov	r0, s15
 80023de:	f7fe f857 	bl	8000490 <__aeabi_f2d>
 80023e2:	a30e      	add	r3, pc, #56	; (adr r3, 800241c <get_Humidity+0x54>)
 80023e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e8:	f7fe f9d4 	bl	8000794 <__aeabi_ddiv>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <get_Humidity+0x50>)
 80023fa:	f7fe f8a1 	bl	8000540 <__aeabi_dmul>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	f7fe faad 	bl	8000964 <__aeabi_d2f>
 800240a:	4603      	mov	r3, r0
 800240c:	ee07 3a90 	vmov	s15, r3
}
 8002410:	eeb0 0a67 	vmov.f32	s0, s15
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40590000 	.word	0x40590000
 800241c:	00000000 	.word	0x00000000
 8002420:	40affe00 	.word	0x40affe00

08002424 <display_time>:

void display_time() {
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
    // Read the current time from DS3231
    ds3231_ReadTime();
 800242a:	f7fe fe81 	bl	8001130 <ds3231_ReadTime>

    // Extract hours and minutes
    uint8_t hours = ds3231_hours - 6;
 800242e:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <display_time+0x94>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	3b06      	subs	r3, #6
 8002434:	71fb      	strb	r3, [r7, #7]
    uint8_t minutes = ds3231_min;
 8002436:	4b21      	ldr	r3, [pc, #132]	; (80024bc <display_time+0x98>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	71bb      	strb	r3, [r7, #6]

    // Set the digits on the 7-segment display
    led7_SetDigit(hours / 10, 0, 0);  // Display the tens place of hours
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	4a20      	ldr	r2, [pc, #128]	; (80024c0 <display_time+0x9c>)
 8002440:	fba2 2303 	umull	r2, r3, r2, r3
 8002444:	08db      	lsrs	r3, r3, #3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2200      	movs	r2, #0
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fe59 	bl	8002104 <led7_SetDigit>
    led7_SetDigit(hours % 10, 1, 0);  // Display the ones place of hours
 8002452:	79fa      	ldrb	r2, [r7, #7]
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <display_time+0x9c>)
 8002456:	fba3 1302 	umull	r1, r3, r3, r2
 800245a:	08d9      	lsrs	r1, r3, #3
 800245c:	460b      	mov	r3, r1
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2200      	movs	r2, #0
 800246a:	2101      	movs	r1, #1
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fe49 	bl	8002104 <led7_SetDigit>
    led7_SetDigit(minutes / 10, 2, 0); // Display the tens place of minutes
 8002472:	79bb      	ldrb	r3, [r7, #6]
 8002474:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <display_time+0x9c>)
 8002476:	fba2 2303 	umull	r2, r3, r2, r3
 800247a:	08db      	lsrs	r3, r3, #3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2200      	movs	r2, #0
 8002480:	2102      	movs	r1, #2
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fe3e 	bl	8002104 <led7_SetDigit>
    led7_SetDigit(minutes % 10, 3, 0); // Display the ones place of minutes
 8002488:	79ba      	ldrb	r2, [r7, #6]
 800248a:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <display_time+0x9c>)
 800248c:	fba3 1302 	umull	r1, r3, r3, r2
 8002490:	08d9      	lsrs	r1, r3, #3
 8002492:	460b      	mov	r3, r1
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2200      	movs	r2, #0
 80024a0:	2103      	movs	r1, #3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fe2e 	bl	8002104 <led7_SetDigit>

    // Set the colon (:) between hours and minutes
    led7_SetColon(1); // Turn on colon
 80024a8:	2001      	movs	r0, #1
 80024aa:	f7ff fe4f 	bl	800214c <led7_SetColon>
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000121 	.word	0x20000121
 80024bc:	2000011e 	.word	0x2000011e
 80024c0:	cccccccd 	.word	0xcccccccd

080024c4 <test_Adc>:

void test_Adc() {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1) % 20;
 80024ca:	4b78      	ldr	r3, [pc, #480]	; (80026ac <test_Adc+0x1e8>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	4b77      	ldr	r3, [pc, #476]	; (80026b0 <test_Adc+0x1ec>)
 80024d2:	fb83 1302 	smull	r1, r3, r3, r2
 80024d6:	10d9      	asrs	r1, r3, #3
 80024d8:	17d3      	asrs	r3, r2, #31
 80024da:	1ac9      	subs	r1, r1, r3
 80024dc:	460b      	mov	r3, r1
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	1ad1      	subs	r1, r2, r3
 80024e6:	b2ca      	uxtb	r2, r1
 80024e8:	4b70      	ldr	r3, [pc, #448]	; (80026ac <test_Adc+0x1e8>)
 80024ea:	701a      	strb	r2, [r3, #0]
	if(count_adc == 0){
 80024ec:	4b6f      	ldr	r3, [pc, #444]	; (80026ac <test_Adc+0x1e8>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f040 80d4 	bne.w	800269e <test_Adc+0x1da>
		sensor_Read();
 80024f6:	f000 f921 	bl	800273c <sensor_Read>
		lcd_ShowStr(10, 100, "Power consumption:", RED, BLACK, 16, 0);
 80024fa:	2300      	movs	r3, #0
 80024fc:	9302      	str	r3, [sp, #8]
 80024fe:	2310      	movs	r3, #16
 8002500:	9301      	str	r3, [sp, #4]
 8002502:	2300      	movs	r3, #0
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800250a:	4a6a      	ldr	r2, [pc, #424]	; (80026b4 <test_Adc+0x1f0>)
 800250c:	2164      	movs	r1, #100	; 0x64
 800250e:	200a      	movs	r0, #10
 8002510:	f7ff fcfc 	bl	8001f0c <lcd_ShowStr>
		lcd_ShowIntNum(160, 100, get_PowerConsumption(), 4, RED, BLACK, 16);
 8002514:	f7ff ff3c 	bl	8002390 <get_PowerConsumption>
 8002518:	eef0 7a40 	vmov.f32	s15, s0
 800251c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002520:	ee17 3a90 	vmov	r3, s15
 8002524:	b29a      	uxth	r2, r3
 8002526:	2310      	movs	r3, #16
 8002528:	9302      	str	r3, [sp, #8]
 800252a:	2300      	movs	r3, #0
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2304      	movs	r3, #4
 8002536:	2164      	movs	r1, #100	; 0x64
 8002538:	20a0      	movs	r0, #160	; 0xa0
 800253a:	f7ff fa5d 	bl	80019f8 <lcd_ShowIntNum>
		lcd_ShowStr(10, 130, "Light:", RED, BLACK, 16, 0);
 800253e:	2300      	movs	r3, #0
 8002540:	9302      	str	r3, [sp, #8]
 8002542:	2310      	movs	r3, #16
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	2300      	movs	r3, #0
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800254e:	4a5a      	ldr	r2, [pc, #360]	; (80026b8 <test_Adc+0x1f4>)
 8002550:	2182      	movs	r1, #130	; 0x82
 8002552:	200a      	movs	r0, #10
 8002554:	f7ff fcda 	bl	8001f0c <lcd_ShowStr>
		if (sensor_GetLight() >= 1750) {
 8002558:	f000 f8fe 	bl	8002758 <sensor_GetLight>
 800255c:	4603      	mov	r3, r0
 800255e:	461a      	mov	r2, r3
 8002560:	f240 63d5 	movw	r3, #1749	; 0x6d5
 8002564:	429a      	cmp	r2, r3
 8002566:	d90d      	bls.n	8002584 <test_Adc+0xc0>
			lcd_ShowStr(160, 130, "Strong", RED, BLACK, 16, 0);
 8002568:	2300      	movs	r3, #0
 800256a:	9302      	str	r3, [sp, #8]
 800256c:	2310      	movs	r3, #16
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	2300      	movs	r3, #0
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002578:	4a50      	ldr	r2, [pc, #320]	; (80026bc <test_Adc+0x1f8>)
 800257a:	2182      	movs	r1, #130	; 0x82
 800257c:	20a0      	movs	r0, #160	; 0xa0
 800257e:	f7ff fcc5 	bl	8001f0c <lcd_ShowStr>
 8002582:	e00c      	b.n	800259e <test_Adc+0xda>
		} else {
			lcd_ShowStr(160, 130, "Weak  ", RED, BLACK, 16, 0);
 8002584:	2300      	movs	r3, #0
 8002586:	9302      	str	r3, [sp, #8]
 8002588:	2310      	movs	r3, #16
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	2300      	movs	r3, #0
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002594:	4a4a      	ldr	r2, [pc, #296]	; (80026c0 <test_Adc+0x1fc>)
 8002596:	2182      	movs	r1, #130	; 0x82
 8002598:	20a0      	movs	r0, #160	; 0xa0
 800259a:	f7ff fcb7 	bl	8001f0c <lcd_ShowStr>
		}
		lcd_ShowStr(10, 160, "Temperature:", RED, BLACK, 16, 0);
 800259e:	2300      	movs	r3, #0
 80025a0:	9302      	str	r3, [sp, #8]
 80025a2:	2310      	movs	r3, #16
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	2300      	movs	r3, #0
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025ae:	4a45      	ldr	r2, [pc, #276]	; (80026c4 <test_Adc+0x200>)
 80025b0:	21a0      	movs	r1, #160	; 0xa0
 80025b2:	200a      	movs	r0, #10
 80025b4:	f7ff fcaa 	bl	8001f0c <lcd_ShowStr>
		lcd_ShowFloatNum(160, 160, sensor_GetTemperature(), 4, RED, BLACK, 16);
 80025b8:	f000 f97e 	bl	80028b8 <sensor_GetTemperature>
 80025bc:	eef0 7a40 	vmov.f32	s15, s0
 80025c0:	2310      	movs	r3, #16
 80025c2:	9301      	str	r3, [sp, #4]
 80025c4:	2300      	movs	r3, #0
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025cc:	2204      	movs	r2, #4
 80025ce:	eeb0 0a67 	vmov.f32	s0, s15
 80025d2:	21a0      	movs	r1, #160	; 0xa0
 80025d4:	20a0      	movs	r0, #160	; 0xa0
 80025d6:	f7ff fa8d 	bl	8001af4 <lcd_ShowFloatNum>
		lcd_ShowStr(10, 190, "Humidity:", RED, BLACK, 16, 0);
 80025da:	2300      	movs	r3, #0
 80025dc:	9302      	str	r3, [sp, #8]
 80025de:	2310      	movs	r3, #16
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	2300      	movs	r3, #0
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025ea:	4a37      	ldr	r2, [pc, #220]	; (80026c8 <test_Adc+0x204>)
 80025ec:	21be      	movs	r1, #190	; 0xbe
 80025ee:	200a      	movs	r0, #10
 80025f0:	f7ff fc8c 	bl	8001f0c <lcd_ShowStr>
		lcd_ShowFloatNum(160, 190, get_Humidity(), 4, RED, BLACK, 16);
 80025f4:	f7ff fee8 	bl	80023c8 <get_Humidity>
 80025f8:	eef0 7a40 	vmov.f32	s15, s0
 80025fc:	2310      	movs	r3, #16
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	2300      	movs	r3, #0
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002608:	2204      	movs	r2, #4
 800260a:	eeb0 0a67 	vmov.f32	s0, s15
 800260e:	21be      	movs	r1, #190	; 0xbe
 8002610:	20a0      	movs	r0, #160	; 0xa0
 8002612:	f7ff fa6f 	bl	8001af4 <lcd_ShowFloatNum>

		// Check condition to alarm if humidity is larger than 70%
		if (get_Humidity() > 70) {
 8002616:	f7ff fed7 	bl	80023c8 <get_Humidity>
 800261a:	eef0 7a40 	vmov.f32	s15, s0
 800261e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80026cc <test_Adc+0x208>
 8002622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262a:	dd0c      	ble.n	8002646 <test_Adc+0x182>
			if (alarm_state == 0) {
 800262c:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <test_Adc+0x20c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10e      	bne.n	8002652 <test_Adc+0x18e>
				alarm_state = 1;
 8002634:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <test_Adc+0x20c>)
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
				last_buzzer_toggle_time = HAL_GetTick(); // Store the current time for buzzer toggle
 800263a:	f000 fc7f 	bl	8002f3c <HAL_GetTick>
 800263e:	4603      	mov	r3, r0
 8002640:	4a24      	ldr	r2, [pc, #144]	; (80026d4 <test_Adc+0x210>)
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	e005      	b.n	8002652 <test_Adc+0x18e>
			}
		} else {
			alarm_state = 0;
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <test_Adc+0x20c>)
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
			buzzer_SetVolume(0);  // Ensure the buzzer is off if no alarm
 800264c:	2000      	movs	r0, #0
 800264e:	f7fe fcf5 	bl	800103c <buzzer_SetVolume>
		}

		// If in alarm state, toggle the buzzer every second
		if (alarm_state == 1) {
 8002652:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <test_Adc+0x20c>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d121      	bne.n	800269e <test_Adc+0x1da>
			uint32_t current_time = HAL_GetTick();
 800265a:	f000 fc6f 	bl	8002f3c <HAL_GetTick>
 800265e:	6078      	str	r0, [r7, #4]
		    if (current_time - last_buzzer_toggle_time >= 1000) {  // Check if 1 second has passed
 8002660:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <test_Adc+0x210>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800266c:	d317      	bcc.n	800269e <test_Adc+0x1da>
		    	last_buzzer_toggle_time = current_time;  // Update the last toggle time
 800266e:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <test_Adc+0x210>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6013      	str	r3, [r2, #0]
		        static uint8_t buzzer_on = 0;  // Track the buzzer state (on/off)
		        if (buzzer_on) {
 8002674:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <test_Adc+0x214>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <test_Adc+0x1c0>
		        	buzzer_SetVolume(0);  // Turn off buzzer
 800267c:	2000      	movs	r0, #0
 800267e:	f7fe fcdd 	bl	800103c <buzzer_SetVolume>
 8002682:	e002      	b.n	800268a <test_Adc+0x1c6>
		        } else {
		        	buzzer_SetVolume(25);  // Turn on buzzer (25% volume)
 8002684:	2019      	movs	r0, #25
 8002686:	f7fe fcd9 	bl	800103c <buzzer_SetVolume>
		        }
		            buzzer_on = !buzzer_on;  // Toggle buzzer state
 800268a:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <test_Adc+0x214>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	bf0c      	ite	eq
 8002692:	2301      	moveq	r3, #1
 8002694:	2300      	movne	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <test_Adc+0x214>)
 800269c:	701a      	strb	r2, [r3, #0]
		    }
		}
	}
	display_time();
 800269e:	f7ff fec1 	bl	8002424 <display_time>
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000045 	.word	0x20000045
 80026b0:	66666667 	.word	0x66666667
 80026b4:	08007b04 	.word	0x08007b04
 80026b8:	08007b18 	.word	0x08007b18
 80026bc:	08007b20 	.word	0x08007b20
 80026c0:	08007b28 	.word	0x08007b28
 80026c4:	08007b30 	.word	0x08007b30
 80026c8:	08007b40 	.word	0x08007b40
 80026cc:	428c0000 	.word	0x428c0000
 80026d0:	20000046 	.word	0x20000046
 80026d4:	20000048 	.word	0x20000048
 80026d8:	2000004c 	.word	0x2000004c

080026dc <test_Buzzer>:

void test_Buzzer(){
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
	if(isButtonUp()){
 80026e0:	f7ff fe26 	bl	8002330 <isButtonUp>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <test_Buzzer+0x14>
		buzzer_SetVolume(50);
 80026ea:	2032      	movs	r0, #50	; 0x32
 80026ec:	f7fe fca6 	bl	800103c <buzzer_SetVolume>
	}

	if(isButtonDown()){
 80026f0:	f7ff fe2e 	bl	8002350 <isButtonDown>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <test_Buzzer+0x24>
		buzzer_SetVolume(0);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f7fe fc9e 	bl	800103c <buzzer_SetVolume>
	}

	if(isButtonRight()){
 8002700:	f7ff fe36 	bl	8002370 <isButtonRight>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <test_Buzzer+0x34>
		buzzer_SetVolume(25);
 800270a:	2019      	movs	r0, #25
 800270c:	f7fe fc96 	bl	800103c <buzzer_SetVolume>
	}
}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}

08002714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002718:	b672      	cpsid	i
}
 800271a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800271c:	e7fe      	b.n	800271c <Error_Handler+0x8>
	...

08002720 <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8002724:	2205      	movs	r2, #5
 8002726:	4903      	ldr	r1, [pc, #12]	; (8002734 <sensor_init+0x14>)
 8002728:	4803      	ldr	r0, [pc, #12]	; (8002738 <sensor_init+0x18>)
 800272a:	f000 fc7b 	bl	8003024 <HAL_ADC_Start_DMA>
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	2000020c 	.word	0x2000020c
 8002738:	20000054 	.word	0x20000054

0800273c <sensor_Read>:

void sensor_Read(){
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8002740:	2205      	movs	r2, #5
 8002742:	4903      	ldr	r1, [pc, #12]	; (8002750 <sensor_Read+0x14>)
 8002744:	4803      	ldr	r0, [pc, #12]	; (8002754 <sensor_Read+0x18>)
 8002746:	f000 fc6d 	bl	8003024 <HAL_ADC_Start_DMA>
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	2000020c 	.word	0x2000020c
 8002754:	20000054 	.word	0x20000054

08002758 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
	return adc_receive[2];
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <sensor_GetLight+0x14>)
 800275e:	889b      	ldrh	r3, [r3, #4]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	2000020c 	.word	0x2000020c

08002770 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <sensor_GetPotentiometer+0x14>)
 8002776:	88db      	ldrh	r3, [r3, #6]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	2000020c 	.word	0x2000020c

08002788 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 800278c:	4b1a      	ldr	r3, [pc, #104]	; (80027f8 <sensor_GetVoltage+0x70>)
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	ee07 3a90 	vmov	s15, r3
 8002794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002798:	ee17 0a90 	vmov	r0, s15
 800279c:	f7fd fe78 	bl	8000490 <__aeabi_f2d>
 80027a0:	a311      	add	r3, pc, #68	; (adr r3, 80027e8 <sensor_GetVoltage+0x60>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f7fd fecb 	bl	8000540 <__aeabi_dmul>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <sensor_GetVoltage+0x74>)
 80027b8:	f7fd fec2 	bl	8000540 <__aeabi_dmul>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4610      	mov	r0, r2
 80027c2:	4619      	mov	r1, r3
 80027c4:	a30a      	add	r3, pc, #40	; (adr r3, 80027f0 <sensor_GetVoltage+0x68>)
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	f7fd ffe3 	bl	8000794 <__aeabi_ddiv>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4610      	mov	r0, r2
 80027d4:	4619      	mov	r1, r3
 80027d6:	f7fe f8c5 	bl	8000964 <__aeabi_d2f>
 80027da:	4603      	mov	r3, r0
 80027dc:	ee07 3a90 	vmov	s15, r3
}
 80027e0:	eeb0 0a67 	vmov.f32	s0, s15
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	66666666 	.word	0x66666666
 80027ec:	400a6666 	.word	0x400a6666
 80027f0:	cccccccd 	.word	0xcccccccd
 80027f4:	40b908ac 	.word	0x40b908ac
 80027f8:	2000020c 	.word	0x2000020c
 80027fc:	40280000 	.word	0x40280000

08002800 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 8002804:	4b28      	ldr	r3, [pc, #160]	; (80028a8 <sensor_GetCurrent+0xa8>)
 8002806:	885b      	ldrh	r3, [r3, #2]
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002810:	ee17 0a90 	vmov	r0, s15
 8002814:	f7fd fe3c 	bl	8000490 <__aeabi_f2d>
 8002818:	a31f      	add	r3, pc, #124	; (adr r3, 8002898 <sensor_GetCurrent+0x98>)
 800281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281e:	f7fd fe8f 	bl	8000540 <__aeabi_dmul>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <sensor_GetCurrent+0xac>)
 8002830:	f7fd fe86 	bl	8000540 <__aeabi_dmul>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4610      	mov	r0, r2
 800283a:	4619      	mov	r1, r3
 800283c:	a318      	add	r3, pc, #96	; (adr r3, 80028a0 <sensor_GetCurrent+0xa0>)
 800283e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002842:	f7fd ffa7 	bl	8000794 <__aeabi_ddiv>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4610      	mov	r0, r2
 800284c:	4619      	mov	r1, r3
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <sensor_GetCurrent+0xb0>)
 8002854:	f7fd fcbc 	bl	80001d0 <__aeabi_dsub>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <sensor_GetCurrent+0xb4>)
 8002866:	f7fd fe6b 	bl	8000540 <__aeabi_dmul>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <sensor_GetCurrent+0xb0>)
 8002878:	f7fd ff8c 	bl	8000794 <__aeabi_ddiv>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4610      	mov	r0, r2
 8002882:	4619      	mov	r1, r3
 8002884:	f7fe f86e 	bl	8000964 <__aeabi_d2f>
 8002888:	4603      	mov	r3, r0
 800288a:	ee07 3a90 	vmov	s15, r3
}
 800288e:	eeb0 0a67 	vmov.f32	s0, s15
 8002892:	bd80      	pop	{r7, pc}
 8002894:	f3af 8000 	nop.w
 8002898:	66666666 	.word	0x66666666
 800289c:	400a6666 	.word	0x400a6666
 80028a0:	147ae148 	.word	0x147ae148
 80028a4:	40a4b2ee 	.word	0x40a4b2ee
 80028a8:	2000020c 	.word	0x2000020c
 80028ac:	408f4000 	.word	0x408f4000
 80028b0:	40040000 	.word	0x40040000
 80028b4:	40140000 	.word	0x40140000

080028b8 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 80028bc:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <sensor_GetTemperature+0x30>)
 80028be:	891b      	ldrh	r3, [r3, #8]
 80028c0:	ee07 3a90 	vmov	s15, r3
 80028c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80028ec <sensor_GetTemperature+0x34>
 80028cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80028f0 <sensor_GetTemperature+0x38>
 80028d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80028d8:	eef0 7a66 	vmov.f32	s15, s13
}
 80028dc:	eeb0 0a67 	vmov.f32	s0, s15
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	2000020c 	.word	0x2000020c
 80028ec:	43a50000 	.word	0x43a50000
 80028f0:	457ff000 	.word	0x457ff000

080028f4 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <timer_init+0x10>)
 80028fa:	f004 f80f 	bl	800691c <HAL_TIM_Base_Start_IT>
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	200002b8 	.word	0x200002b8

08002908 <setTimer2>:

void setTimer2(uint16_t duration){
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002912:	4a08      	ldr	r2, [pc, #32]	; (8002934 <setTimer2+0x2c>)
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <setTimer2+0x2c>)
 800291a:	881a      	ldrh	r2, [r3, #0]
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <setTimer2+0x30>)
 800291e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <setTimer2+0x34>)
 8002922:	2200      	movs	r2, #0
 8002924:	801a      	strh	r2, [r3, #0]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000052 	.word	0x20000052
 8002938:	20000050 	.word	0x20000050
 800293c:	2000004e 	.word	0x2000004e

08002940 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002950:	d116      	bne.n	8002980 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002952:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d010      	beq.n	800297c <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002964:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002970:	2201      	movs	r2, #1
 8002972:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002976:	881a      	ldrh	r2, [r3, #0]
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800297a:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 800297c:	f7ff fb36 	bl	8001fec <led7_Scan>
	}
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000050 	.word	0x20000050
 800298c:	2000004e 	.word	0x2000004e
 8002990:	20000052 	.word	0x20000052

08002994 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002998:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <MX_SPI1_Init+0x64>)
 800299a:	4a18      	ldr	r2, [pc, #96]	; (80029fc <MX_SPI1_Init+0x68>)
 800299c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029a6:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029ac:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029b2:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029b8:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029be:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029d8:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029da:	2200      	movs	r2, #0
 80029dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029e0:	220a      	movs	r2, #10
 80029e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029e4:	4804      	ldr	r0, [pc, #16]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029e6:	f003 f95d 	bl	8005ca4 <HAL_SPI_Init>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80029f0:	f7ff fe90 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029f4:	bf00      	nop
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20000218 	.word	0x20000218
 80029fc:	40013000 	.word	0x40013000

08002a00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a19      	ldr	r2, [pc, #100]	; (8002a84 <HAL_SPI_MspInit+0x84>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d12b      	bne.n	8002a7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <HAL_SPI_MspInit+0x88>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <HAL_SPI_MspInit+0x88>)
 8002a2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a30:	6453      	str	r3, [r2, #68]	; 0x44
 8002a32:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <HAL_SPI_MspInit+0x88>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <HAL_SPI_MspInit+0x88>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a10      	ldr	r2, [pc, #64]	; (8002a88 <HAL_SPI_MspInit+0x88>)
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <HAL_SPI_MspInit+0x88>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002a5a:	2338      	movs	r3, #56	; 0x38
 8002a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a66:	2303      	movs	r3, #3
 8002a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a6a:	2305      	movs	r3, #5
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6e:	f107 0314 	add.w	r3, r7, #20
 8002a72:	4619      	mov	r1, r3
 8002a74:	4805      	ldr	r0, [pc, #20]	; (8002a8c <HAL_SPI_MspInit+0x8c>)
 8002a76:	f001 fb25 	bl	80040c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	3728      	adds	r7, #40	; 0x28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40013000 	.word	0x40013000
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40020400 	.word	0x40020400

08002a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	4b10      	ldr	r3, [pc, #64]	; (8002adc <HAL_MspInit+0x4c>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	4a0f      	ldr	r2, [pc, #60]	; (8002adc <HAL_MspInit+0x4c>)
 8002aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <HAL_MspInit+0x4c>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aae:	607b      	str	r3, [r7, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_MspInit+0x4c>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a08      	ldr	r2, [pc, #32]	; (8002adc <HAL_MspInit+0x4c>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_MspInit+0x4c>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800

08002ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ae4:	e7fe      	b.n	8002ae4 <NMI_Handler+0x4>

08002ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aea:	e7fe      	b.n	8002aea <HardFault_Handler+0x4>

08002aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002af0:	e7fe      	b.n	8002af0 <MemManage_Handler+0x4>

08002af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002af2:	b480      	push	{r7}
 8002af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002af6:	e7fe      	b.n	8002af6 <BusFault_Handler+0x4>

08002af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002afc:	e7fe      	b.n	8002afc <UsageFault_Handler+0x4>

08002afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002afe:	b480      	push	{r7}
 8002b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b2c:	f000 f9f2 	bl	8002f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b38:	4802      	ldr	r0, [pc, #8]	; (8002b44 <TIM2_IRQHandler+0x10>)
 8002b3a:	f004 f881 	bl	8006c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	200002b8 	.word	0x200002b8

08002b48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b4c:	4802      	ldr	r0, [pc, #8]	; (8002b58 <DMA2_Stream0_IRQHandler+0x10>)
 8002b4e:	f001 f84f 	bl	8003bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	2000009c 	.word	0x2000009c

08002b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <SystemInit+0x20>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	4a05      	ldr	r2, [pc, #20]	; (8002b7c <SystemInit+0x20>)
 8002b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b86:	f107 0308 	add.w	r3, r7, #8
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b94:	463b      	mov	r3, r7
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <MX_TIM2_Init+0x94>)
 8002b9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ba2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <MX_TIM2_Init+0x94>)
 8002ba6:	f240 3247 	movw	r2, #839	; 0x347
 8002baa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <MX_TIM2_Init+0x94>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002bb2:	4b18      	ldr	r3, [pc, #96]	; (8002c14 <MX_TIM2_Init+0x94>)
 8002bb4:	2263      	movs	r2, #99	; 0x63
 8002bb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bb8:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <MX_TIM2_Init+0x94>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <MX_TIM2_Init+0x94>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bc4:	4813      	ldr	r0, [pc, #76]	; (8002c14 <MX_TIM2_Init+0x94>)
 8002bc6:	f003 fe59 	bl	800687c <HAL_TIM_Base_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002bd0:	f7ff fda0 	bl	8002714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bda:	f107 0308 	add.w	r3, r7, #8
 8002bde:	4619      	mov	r1, r3
 8002be0:	480c      	ldr	r0, [pc, #48]	; (8002c14 <MX_TIM2_Init+0x94>)
 8002be2:	f004 f9f7 	bl	8006fd4 <HAL_TIM_ConfigClockSource>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002bec:	f7ff fd92 	bl	8002714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bf8:	463b      	mov	r3, r7
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4805      	ldr	r0, [pc, #20]	; (8002c14 <MX_TIM2_Init+0x94>)
 8002bfe:	f004 fde9 	bl	80077d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002c08:	f7ff fd84 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c0c:	bf00      	nop
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	200002b8 	.word	0x200002b8

08002c18 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
 8002c2c:	615a      	str	r2, [r3, #20]
 8002c2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002c30:	4b1e      	ldr	r3, [pc, #120]	; (8002cac <MX_TIM13_Init+0x94>)
 8002c32:	4a1f      	ldr	r2, [pc, #124]	; (8002cb0 <MX_TIM13_Init+0x98>)
 8002c34:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002c36:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <MX_TIM13_Init+0x94>)
 8002c38:	f240 3247 	movw	r2, #839	; 0x347
 8002c3c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <MX_TIM13_Init+0x94>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002c44:	4b19      	ldr	r3, [pc, #100]	; (8002cac <MX_TIM13_Init+0x94>)
 8002c46:	2263      	movs	r2, #99	; 0x63
 8002c48:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c4a:	4b18      	ldr	r3, [pc, #96]	; (8002cac <MX_TIM13_Init+0x94>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c50:	4b16      	ldr	r3, [pc, #88]	; (8002cac <MX_TIM13_Init+0x94>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002c56:	4815      	ldr	r0, [pc, #84]	; (8002cac <MX_TIM13_Init+0x94>)
 8002c58:	f003 fe10 	bl	800687c <HAL_TIM_Base_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002c62:	f7ff fd57 	bl	8002714 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002c66:	4811      	ldr	r0, [pc, #68]	; (8002cac <MX_TIM13_Init+0x94>)
 8002c68:	f003 fec8 	bl	80069fc <HAL_TIM_PWM_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002c72:	f7ff fd4f 	bl	8002714 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c76:	2360      	movs	r3, #96	; 0x60
 8002c78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c86:	1d3b      	adds	r3, r7, #4
 8002c88:	2200      	movs	r2, #0
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4807      	ldr	r0, [pc, #28]	; (8002cac <MX_TIM13_Init+0x94>)
 8002c8e:	f004 f8df 	bl	8006e50 <HAL_TIM_PWM_ConfigChannel>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002c98:	f7ff fd3c 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002c9c:	4803      	ldr	r0, [pc, #12]	; (8002cac <MX_TIM13_Init+0x94>)
 8002c9e:	f000 f845 	bl	8002d2c <HAL_TIM_MspPostInit>

}
 8002ca2:	bf00      	nop
 8002ca4:	3720      	adds	r7, #32
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000270 	.word	0x20000270
 8002cb0:	40001c00 	.word	0x40001c00

08002cb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc4:	d116      	bne.n	8002cf4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <HAL_TIM_Base_MspInit+0x70>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a15      	ldr	r2, [pc, #84]	; (8002d24 <HAL_TIM_Base_MspInit+0x70>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <HAL_TIM_Base_MspInit+0x70>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	201c      	movs	r0, #28
 8002ce8:	f000 fe45 	bl	8003976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002cec:	201c      	movs	r0, #28
 8002cee:	f000 fe5e 	bl	80039ae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002cf2:	e012      	b.n	8002d1a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0b      	ldr	r2, [pc, #44]	; (8002d28 <HAL_TIM_Base_MspInit+0x74>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d10d      	bne.n	8002d1a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <HAL_TIM_Base_MspInit+0x70>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	4a07      	ldr	r2, [pc, #28]	; (8002d24 <HAL_TIM_Base_MspInit+0x70>)
 8002d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_TIM_Base_MspInit+0x70>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40001c00 	.word	0x40001c00

08002d2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	f107 030c 	add.w	r3, r7, #12
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a12      	ldr	r2, [pc, #72]	; (8002d94 <HAL_TIM_MspPostInit+0x68>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d11e      	bne.n	8002d8c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <HAL_TIM_MspPostInit+0x6c>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a10      	ldr	r2, [pc, #64]	; (8002d98 <HAL_TIM_MspPostInit+0x6c>)
 8002d58:	f043 0320 	orr.w	r3, r3, #32
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <HAL_TIM_MspPostInit+0x6c>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d70:	2302      	movs	r3, #2
 8002d72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002d7c:	2309      	movs	r3, #9
 8002d7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d80:	f107 030c 	add.w	r3, r7, #12
 8002d84:	4619      	mov	r1, r3
 8002d86:	4805      	ldr	r0, [pc, #20]	; (8002d9c <HAL_TIM_MspPostInit+0x70>)
 8002d88:	f001 f99c 	bl	80040c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002d8c:	bf00      	nop
 8002d8e:	3720      	adds	r7, #32
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40001c00 	.word	0x40001c00
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40021400 	.word	0x40021400

08002da0 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	461a      	mov	r2, r3
 8002db2:	0092      	lsls	r2, r2, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	b2db      	uxtb	r3, r3
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	4a0d      	ldr	r2, [pc, #52]	; (8002e18 <DEC2BCD+0x44>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	08db      	lsrs	r3, r3, #3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	b258      	sxtb	r0, r3
 8002dee:	79fa      	ldrb	r2, [r7, #7]
 8002df0:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <DEC2BCD+0x44>)
 8002df2:	fba3 1302 	umull	r1, r3, r3, r2
 8002df6:	08d9      	lsrs	r1, r3, #3
 8002df8:	460b      	mov	r3, r1
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	b25b      	sxtb	r3, r3
 8002e06:	4303      	orrs	r3, r0
 8002e08:	b25b      	sxtb	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	cccccccd 	.word	0xcccccccd

08002e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e20:	480d      	ldr	r0, [pc, #52]	; (8002e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e22:	490e      	ldr	r1, [pc, #56]	; (8002e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e24:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e28:	e002      	b.n	8002e30 <LoopCopyDataInit>

08002e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e2e:	3304      	adds	r3, #4

08002e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e34:	d3f9      	bcc.n	8002e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e36:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e38:	4c0b      	ldr	r4, [pc, #44]	; (8002e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e3c:	e001      	b.n	8002e42 <LoopFillZerobss>

08002e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e40:	3204      	adds	r2, #4

08002e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e44:	d3fb      	bcc.n	8002e3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e46:	f7ff fe89 	bl	8002b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e4a:	f004 fe23 	bl	8007a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e4e:	f7ff f99d 	bl	800218c <main>
  bx  lr    
 8002e52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e5c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002e60:	0800aafc 	.word	0x0800aafc
  ldr r2, =_sbss
 8002e64:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002e68:	20000304 	.word	0x20000304

08002e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e6c:	e7fe      	b.n	8002e6c <ADC_IRQHandler>
	...

08002e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e74:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <HAL_Init+0x40>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a0d      	ldr	r2, [pc, #52]	; (8002eb0 <HAL_Init+0x40>)
 8002e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <HAL_Init+0x40>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <HAL_Init+0x40>)
 8002e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e8c:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <HAL_Init+0x40>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a07      	ldr	r2, [pc, #28]	; (8002eb0 <HAL_Init+0x40>)
 8002e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e98:	2003      	movs	r0, #3
 8002e9a:	f000 fd61 	bl	8003960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e9e:	200f      	movs	r0, #15
 8002ea0:	f000 f808 	bl	8002eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ea4:	f7ff fdf4 	bl	8002a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023c00 	.word	0x40023c00

08002eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ebc:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <HAL_InitTick+0x54>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <HAL_InitTick+0x58>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fd79 	bl	80039ca <HAL_SYSTICK_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e00e      	b.n	8002f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b0f      	cmp	r3, #15
 8002ee6:	d80a      	bhi.n	8002efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ee8:	2200      	movs	r2, #0
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef0:	f000 fd41 	bl	8003976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ef4:	4a06      	ldr	r2, [pc, #24]	; (8002f10 <HAL_InitTick+0x5c>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e000      	b.n	8002f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20000010 	.word	0x20000010
 8002f0c:	20000018 	.word	0x20000018
 8002f10:	20000014 	.word	0x20000014

08002f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f18:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_IncTick+0x20>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_IncTick+0x24>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4413      	add	r3, r2
 8002f24:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <HAL_IncTick+0x24>)
 8002f26:	6013      	str	r3, [r2, #0]
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000018 	.word	0x20000018
 8002f38:	20000300 	.word	0x20000300

08002f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <HAL_GetTick+0x14>)
 8002f42:	681b      	ldr	r3, [r3, #0]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	20000300 	.word	0x20000300

08002f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f5c:	f7ff ffee 	bl	8002f3c <HAL_GetTick>
 8002f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d005      	beq.n	8002f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <HAL_Delay+0x44>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4413      	add	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f7a:	bf00      	nop
 8002f7c:	f7ff ffde 	bl	8002f3c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d8f7      	bhi.n	8002f7c <HAL_Delay+0x28>
  {
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000018 	.word	0x20000018

08002f9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e033      	b.n	800301a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fd ff28 	bl	8000e10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d118      	bne.n	800300c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fe2:	f023 0302 	bic.w	r3, r3, #2
 8002fe6:	f043 0202 	orr.w	r2, r3, #2
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fa68 	bl	80034c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	f043 0201 	orr.w	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
 800300a:	e001      	b.n	8003010 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_ADC_Start_DMA+0x1e>
 800303e:	2302      	movs	r3, #2
 8003040:	e0e9      	b.n	8003216 <HAL_ADC_Start_DMA+0x1f2>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	d018      	beq.n	800308a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003068:	4b6d      	ldr	r3, [pc, #436]	; (8003220 <HAL_ADC_Start_DMA+0x1fc>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a6d      	ldr	r2, [pc, #436]	; (8003224 <HAL_ADC_Start_DMA+0x200>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	0c9a      	lsrs	r2, r3, #18
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800307c:	e002      	b.n	8003084 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	3b01      	subs	r3, #1
 8003082:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f9      	bne.n	800307e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003098:	d107      	bne.n	80030aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	f040 80a1 	bne.w	80031fc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030c2:	f023 0301 	bic.w	r3, r3, #1
 80030c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f8:	d106      	bne.n	8003108 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	f023 0206 	bic.w	r2, r3, #6
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	645a      	str	r2, [r3, #68]	; 0x44
 8003106:	e002      	b.n	800310e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003116:	4b44      	ldr	r3, [pc, #272]	; (8003228 <HAL_ADC_Start_DMA+0x204>)
 8003118:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	4a43      	ldr	r2, [pc, #268]	; (800322c <HAL_ADC_Start_DMA+0x208>)
 8003120:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	4a42      	ldr	r2, [pc, #264]	; (8003230 <HAL_ADC_Start_DMA+0x20c>)
 8003128:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	4a41      	ldr	r2, [pc, #260]	; (8003234 <HAL_ADC_Start_DMA+0x210>)
 8003130:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800313a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800314a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	334c      	adds	r3, #76	; 0x4c
 8003166:	4619      	mov	r1, r3
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f000 fce8 	bl	8003b40 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	2b00      	cmp	r3, #0
 800317a:	d12a      	bne.n	80031d2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a2d      	ldr	r2, [pc, #180]	; (8003238 <HAL_ADC_Start_DMA+0x214>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d015      	beq.n	80031b2 <HAL_ADC_Start_DMA+0x18e>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a2c      	ldr	r2, [pc, #176]	; (800323c <HAL_ADC_Start_DMA+0x218>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d105      	bne.n	800319c <HAL_ADC_Start_DMA+0x178>
 8003190:	4b25      	ldr	r3, [pc, #148]	; (8003228 <HAL_ADC_Start_DMA+0x204>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a27      	ldr	r2, [pc, #156]	; (8003240 <HAL_ADC_Start_DMA+0x21c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d136      	bne.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
 80031a6:	4b20      	ldr	r3, [pc, #128]	; (8003228 <HAL_ADC_Start_DMA+0x204>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d130      	bne.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d129      	bne.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	e020      	b.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a18      	ldr	r2, [pc, #96]	; (8003238 <HAL_ADC_Start_DMA+0x214>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d11b      	bne.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d114      	bne.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031f8:	609a      	str	r2, [r3, #8]
 80031fa:	e00b      	b.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	f043 0210 	orr.w	r2, r3, #16
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320c:	f043 0201 	orr.w	r2, r3, #1
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000010 	.word	0x20000010
 8003224:	431bde83 	.word	0x431bde83
 8003228:	40012300 	.word	0x40012300
 800322c:	080036bd 	.word	0x080036bd
 8003230:	08003777 	.word	0x08003777
 8003234:	08003793 	.word	0x08003793
 8003238:	40012000 	.word	0x40012000
 800323c:	40012100 	.word	0x40012100
 8003240:	40012200 	.word	0x40012200

08003244 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_ADC_ConfigChannel+0x1c>
 8003298:	2302      	movs	r3, #2
 800329a:	e105      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x228>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b09      	cmp	r3, #9
 80032aa:	d925      	bls.n	80032f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68d9      	ldr	r1, [r3, #12]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	3b1e      	subs	r3, #30
 80032c2:	2207      	movs	r2, #7
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43da      	mvns	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	400a      	ands	r2, r1
 80032d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68d9      	ldr	r1, [r3, #12]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	4618      	mov	r0, r3
 80032e4:	4603      	mov	r3, r0
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4403      	add	r3, r0
 80032ea:	3b1e      	subs	r3, #30
 80032ec:	409a      	lsls	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	e022      	b.n	800333e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6919      	ldr	r1, [r3, #16]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	4613      	mov	r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4413      	add	r3, r2
 800330c:	2207      	movs	r2, #7
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43da      	mvns	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	400a      	ands	r2, r1
 800331a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6919      	ldr	r1, [r3, #16]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	4618      	mov	r0, r3
 800332e:	4603      	mov	r3, r0
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4403      	add	r3, r0
 8003334:	409a      	lsls	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b06      	cmp	r3, #6
 8003344:	d824      	bhi.n	8003390 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	3b05      	subs	r3, #5
 8003358:	221f      	movs	r2, #31
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43da      	mvns	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	400a      	ands	r2, r1
 8003366:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	b29b      	uxth	r3, r3
 8003374:	4618      	mov	r0, r3
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	3b05      	subs	r3, #5
 8003382:	fa00 f203 	lsl.w	r2, r0, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	635a      	str	r2, [r3, #52]	; 0x34
 800338e:	e04c      	b.n	800342a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b0c      	cmp	r3, #12
 8003396:	d824      	bhi.n	80033e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	3b23      	subs	r3, #35	; 0x23
 80033aa:	221f      	movs	r2, #31
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43da      	mvns	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	400a      	ands	r2, r1
 80033b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	4618      	mov	r0, r3
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	3b23      	subs	r3, #35	; 0x23
 80033d4:	fa00 f203 	lsl.w	r2, r0, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
 80033e0:	e023      	b.n	800342a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	3b41      	subs	r3, #65	; 0x41
 80033f4:	221f      	movs	r2, #31
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43da      	mvns	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	400a      	ands	r2, r1
 8003402:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	b29b      	uxth	r3, r3
 8003410:	4618      	mov	r0, r3
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	3b41      	subs	r3, #65	; 0x41
 800341e:	fa00 f203 	lsl.w	r2, r0, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800342a:	4b22      	ldr	r3, [pc, #136]	; (80034b4 <HAL_ADC_ConfigChannel+0x234>)
 800342c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a21      	ldr	r2, [pc, #132]	; (80034b8 <HAL_ADC_ConfigChannel+0x238>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d109      	bne.n	800344c <HAL_ADC_ConfigChannel+0x1cc>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b12      	cmp	r3, #18
 800343e:	d105      	bne.n	800344c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a19      	ldr	r2, [pc, #100]	; (80034b8 <HAL_ADC_ConfigChannel+0x238>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d123      	bne.n	800349e <HAL_ADC_ConfigChannel+0x21e>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b10      	cmp	r3, #16
 800345c:	d003      	beq.n	8003466 <HAL_ADC_ConfigChannel+0x1e6>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b11      	cmp	r3, #17
 8003464:	d11b      	bne.n	800349e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b10      	cmp	r3, #16
 8003478:	d111      	bne.n	800349e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800347a:	4b10      	ldr	r3, [pc, #64]	; (80034bc <HAL_ADC_ConfigChannel+0x23c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a10      	ldr	r2, [pc, #64]	; (80034c0 <HAL_ADC_ConfigChannel+0x240>)
 8003480:	fba2 2303 	umull	r2, r3, r2, r3
 8003484:	0c9a      	lsrs	r2, r3, #18
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003490:	e002      	b.n	8003498 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	3b01      	subs	r3, #1
 8003496:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f9      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	40012300 	.word	0x40012300
 80034b8:	40012000 	.word	0x40012000
 80034bc:	20000010 	.word	0x20000010
 80034c0:	431bde83 	.word	0x431bde83

080034c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034cc:	4b79      	ldr	r3, [pc, #484]	; (80036b4 <ADC_Init+0x1f0>)
 80034ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	431a      	orrs	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6859      	ldr	r1, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	021a      	lsls	r2, r3, #8
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800351c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6859      	ldr	r1, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800353e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6899      	ldr	r1, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	4a58      	ldr	r2, [pc, #352]	; (80036b8 <ADC_Init+0x1f4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d022      	beq.n	80035a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800356a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6899      	ldr	r1, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800358c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6899      	ldr	r1, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	e00f      	b.n	80035c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0202 	bic.w	r2, r2, #2
 80035d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6899      	ldr	r1, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	7e1b      	ldrb	r3, [r3, #24]
 80035dc:	005a      	lsls	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d01b      	beq.n	8003628 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800360e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6859      	ldr	r1, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	3b01      	subs	r3, #1
 800361c:	035a      	lsls	r2, r3, #13
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	e007      	b.n	8003638 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003636:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003646:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	3b01      	subs	r3, #1
 8003654:	051a      	lsls	r2, r3, #20
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800366c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6899      	ldr	r1, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800367a:	025a      	lsls	r2, r3, #9
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003692:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6899      	ldr	r1, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	029a      	lsls	r2, r3, #10
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	609a      	str	r2, [r3, #8]
}
 80036a8:	bf00      	nop
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	40012300 	.word	0x40012300
 80036b8:	0f000001 	.word	0x0f000001

080036bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d13c      	bne.n	8003750 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d12b      	bne.n	8003748 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d127      	bne.n	8003748 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003702:	2b00      	cmp	r3, #0
 8003704:	d006      	beq.n	8003714 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003710:	2b00      	cmp	r3, #0
 8003712:	d119      	bne.n	8003748 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0220 	bic.w	r2, r2, #32
 8003722:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d105      	bne.n	8003748 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	f043 0201 	orr.w	r2, r3, #1
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f7ff fd7b 	bl	8003244 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800374e:	e00e      	b.n	800376e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	f003 0310 	and.w	r3, r3, #16
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f7ff fd85 	bl	800326c <HAL_ADC_ErrorCallback>
}
 8003762:	e004      	b.n	800376e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f7ff fd67 	bl	8003258 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800378a:	bf00      	nop
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2240      	movs	r2, #64	; 0x40
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	f043 0204 	orr.w	r2, r3, #4
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f7ff fd5a 	bl	800326c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037dc:	4013      	ands	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f2:	4a04      	ldr	r2, [pc, #16]	; (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	60d3      	str	r3, [r2, #12]
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <__NVIC_GetPriorityGrouping+0x18>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	f003 0307 	and.w	r3, r3, #7
}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	2b00      	cmp	r3, #0
 8003834:	db0b      	blt.n	800384e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	f003 021f 	and.w	r2, r3, #31
 800383c:	4907      	ldr	r1, [pc, #28]	; (800385c <__NVIC_EnableIRQ+0x38>)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2001      	movs	r0, #1
 8003846:	fa00 f202 	lsl.w	r2, r0, r2
 800384a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	e000e100 	.word	0xe000e100

08003860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	6039      	str	r1, [r7, #0]
 800386a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800386c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003870:	2b00      	cmp	r3, #0
 8003872:	db0a      	blt.n	800388a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	b2da      	uxtb	r2, r3
 8003878:	490c      	ldr	r1, [pc, #48]	; (80038ac <__NVIC_SetPriority+0x4c>)
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	0112      	lsls	r2, r2, #4
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	440b      	add	r3, r1
 8003884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003888:	e00a      	b.n	80038a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	b2da      	uxtb	r2, r3
 800388e:	4908      	ldr	r1, [pc, #32]	; (80038b0 <__NVIC_SetPriority+0x50>)
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	3b04      	subs	r3, #4
 8003898:	0112      	lsls	r2, r2, #4
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	440b      	add	r3, r1
 800389e:	761a      	strb	r2, [r3, #24]
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000e100 	.word	0xe000e100
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b089      	sub	sp, #36	; 0x24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f1c3 0307 	rsb	r3, r3, #7
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	bf28      	it	cs
 80038d2:	2304      	movcs	r3, #4
 80038d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3304      	adds	r3, #4
 80038da:	2b06      	cmp	r3, #6
 80038dc:	d902      	bls.n	80038e4 <NVIC_EncodePriority+0x30>
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	3b03      	subs	r3, #3
 80038e2:	e000      	b.n	80038e6 <NVIC_EncodePriority+0x32>
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43da      	mvns	r2, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	401a      	ands	r2, r3
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	fa01 f303 	lsl.w	r3, r1, r3
 8003906:	43d9      	mvns	r1, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800390c:	4313      	orrs	r3, r2
         );
}
 800390e:	4618      	mov	r0, r3
 8003910:	3724      	adds	r7, #36	; 0x24
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
	...

0800391c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3b01      	subs	r3, #1
 8003928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800392c:	d301      	bcc.n	8003932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800392e:	2301      	movs	r3, #1
 8003930:	e00f      	b.n	8003952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <SysTick_Config+0x40>)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3b01      	subs	r3, #1
 8003938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800393a:	210f      	movs	r1, #15
 800393c:	f04f 30ff 	mov.w	r0, #4294967295
 8003940:	f7ff ff8e 	bl	8003860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <SysTick_Config+0x40>)
 8003946:	2200      	movs	r2, #0
 8003948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800394a:	4b04      	ldr	r3, [pc, #16]	; (800395c <SysTick_Config+0x40>)
 800394c:	2207      	movs	r2, #7
 800394e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	e000e010 	.word	0xe000e010

08003960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff ff29 	bl	80037c0 <__NVIC_SetPriorityGrouping>
}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003976:	b580      	push	{r7, lr}
 8003978:	b086      	sub	sp, #24
 800397a:	af00      	add	r7, sp, #0
 800397c:	4603      	mov	r3, r0
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003988:	f7ff ff3e 	bl	8003808 <__NVIC_GetPriorityGrouping>
 800398c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	6978      	ldr	r0, [r7, #20]
 8003994:	f7ff ff8e 	bl	80038b4 <NVIC_EncodePriority>
 8003998:	4602      	mov	r2, r0
 800399a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800399e:	4611      	mov	r1, r2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff5d 	bl	8003860 <__NVIC_SetPriority>
}
 80039a6:	bf00      	nop
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	4603      	mov	r3, r0
 80039b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff ff31 	bl	8003824 <__NVIC_EnableIRQ>
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff ffa2 	bl	800391c <SysTick_Config>
 80039d8:	4603      	mov	r3, r0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039f0:	f7ff faa4 	bl	8002f3c <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e099      	b.n	8003b34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a20:	e00f      	b.n	8003a42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a22:	f7ff fa8b 	bl	8002f3c <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b05      	cmp	r3, #5
 8003a2e:	d908      	bls.n	8003a42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2203      	movs	r2, #3
 8003a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e078      	b.n	8003b34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e8      	bne.n	8003a22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4b38      	ldr	r3, [pc, #224]	; (8003b3c <HAL_DMA_Init+0x158>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d107      	bne.n	8003aac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f023 0307 	bic.w	r3, r3, #7
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d117      	bne.n	8003b06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00e      	beq.n	8003b06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fa6f 	bl	8003fcc <DMA_CheckFifoParam>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2240      	movs	r2, #64	; 0x40
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b02:	2301      	movs	r3, #1
 8003b04:	e016      	b.n	8003b34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fa26 	bl	8003f60 <DMA_CalcBaseAndBitshift>
 8003b14:	4603      	mov	r3, r0
 8003b16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1c:	223f      	movs	r2, #63	; 0x3f
 8003b1e:	409a      	lsls	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	f010803f 	.word	0xf010803f

08003b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_DMA_Start_IT+0x26>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e040      	b.n	8003be8 <HAL_DMA_Start_IT+0xa8>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d12f      	bne.n	8003bda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 f9b8 	bl	8003f04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b98:	223f      	movs	r2, #63	; 0x3f
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0216 	orr.w	r2, r2, #22
 8003bae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d007      	beq.n	8003bc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0208 	orr.w	r2, r2, #8
 8003bc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	e005      	b.n	8003be6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003be2:	2302      	movs	r3, #2
 8003be4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bfc:	4b92      	ldr	r3, [pc, #584]	; (8003e48 <HAL_DMA_IRQHandler+0x258>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a92      	ldr	r2, [pc, #584]	; (8003e4c <HAL_DMA_IRQHandler+0x25c>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	0a9b      	lsrs	r3, r3, #10
 8003c08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1a:	2208      	movs	r2, #8
 8003c1c:	409a      	lsls	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4013      	ands	r3, r2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d01a      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d013      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0204 	bic.w	r2, r2, #4
 8003c42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c48:	2208      	movs	r2, #8
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c54:	f043 0201 	orr.w	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	2201      	movs	r2, #1
 8003c62:	409a      	lsls	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4013      	ands	r3, r2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d012      	beq.n	8003c92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00b      	beq.n	8003c92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7e:	2201      	movs	r2, #1
 8003c80:	409a      	lsls	r2, r3
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8a:	f043 0202 	orr.w	r2, r3, #2
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c96:	2204      	movs	r2, #4
 8003c98:	409a      	lsls	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d012      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00b      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb4:	2204      	movs	r2, #4
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc0:	f043 0204 	orr.w	r2, r3, #4
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ccc:	2210      	movs	r2, #16
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d043      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d03c      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cea:	2210      	movs	r2, #16
 8003cec:	409a      	lsls	r2, r3
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d018      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d108      	bne.n	8003d20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d024      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	4798      	blx	r3
 8003d1e:	e01f      	b.n	8003d60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d01b      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4798      	blx	r3
 8003d30:	e016      	b.n	8003d60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d107      	bne.n	8003d50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0208 	bic.w	r2, r2, #8
 8003d4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d64:	2220      	movs	r2, #32
 8003d66:	409a      	lsls	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 808e 	beq.w	8003e8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8086 	beq.w	8003e8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d86:	2220      	movs	r2, #32
 8003d88:	409a      	lsls	r2, r3
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b05      	cmp	r3, #5
 8003d98:	d136      	bne.n	8003e08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0216 	bic.w	r2, r2, #22
 8003da8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003db8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d103      	bne.n	8003dca <HAL_DMA_IRQHandler+0x1da>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d007      	beq.n	8003dda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0208 	bic.w	r2, r2, #8
 8003dd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dde:	223f      	movs	r2, #63	; 0x3f
 8003de0:	409a      	lsls	r2, r3
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d07d      	beq.n	8003efa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	4798      	blx	r3
        }
        return;
 8003e06:	e078      	b.n	8003efa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d01c      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d108      	bne.n	8003e36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d030      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4798      	blx	r3
 8003e34:	e02b      	b.n	8003e8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d027      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	4798      	blx	r3
 8003e46:	e022      	b.n	8003e8e <HAL_DMA_IRQHandler+0x29e>
 8003e48:	20000010 	.word	0x20000010
 8003e4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10f      	bne.n	8003e7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0210 	bic.w	r2, r2, #16
 8003e6c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d032      	beq.n	8003efc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d022      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2205      	movs	r2, #5
 8003ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0201 	bic.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	60bb      	str	r3, [r7, #8]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d307      	bcc.n	8003ed6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1f2      	bne.n	8003eba <HAL_DMA_IRQHandler+0x2ca>
 8003ed4:	e000      	b.n	8003ed8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003ed6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	4798      	blx	r3
 8003ef8:	e000      	b.n	8003efc <HAL_DMA_IRQHandler+0x30c>
        return;
 8003efa:	bf00      	nop
    }
  }
}
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop

08003f04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b40      	cmp	r3, #64	; 0x40
 8003f30:	d108      	bne.n	8003f44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f42:	e007      	b.n	8003f54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	60da      	str	r2, [r3, #12]
}
 8003f54:	bf00      	nop
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	3b10      	subs	r3, #16
 8003f70:	4a14      	ldr	r2, [pc, #80]	; (8003fc4 <DMA_CalcBaseAndBitshift+0x64>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	091b      	lsrs	r3, r3, #4
 8003f78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f7a:	4a13      	ldr	r2, [pc, #76]	; (8003fc8 <DMA_CalcBaseAndBitshift+0x68>)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4413      	add	r3, r2
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2b03      	cmp	r3, #3
 8003f8c:	d909      	bls.n	8003fa2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f96:	f023 0303 	bic.w	r3, r3, #3
 8003f9a:	1d1a      	adds	r2, r3, #4
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	659a      	str	r2, [r3, #88]	; 0x58
 8003fa0:	e007      	b.n	8003fb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003faa:	f023 0303 	bic.w	r3, r3, #3
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	aaaaaaab 	.word	0xaaaaaaab
 8003fc8:	0800aae4 	.word	0x0800aae4

08003fcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d11f      	bne.n	8004026 <DMA_CheckFifoParam+0x5a>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d856      	bhi.n	800409a <DMA_CheckFifoParam+0xce>
 8003fec:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <DMA_CheckFifoParam+0x28>)
 8003fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff2:	bf00      	nop
 8003ff4:	08004005 	.word	0x08004005
 8003ff8:	08004017 	.word	0x08004017
 8003ffc:	08004005 	.word	0x08004005
 8004000:	0800409b 	.word	0x0800409b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d046      	beq.n	800409e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004014:	e043      	b.n	800409e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800401e:	d140      	bne.n	80040a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004024:	e03d      	b.n	80040a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800402e:	d121      	bne.n	8004074 <DMA_CheckFifoParam+0xa8>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b03      	cmp	r3, #3
 8004034:	d837      	bhi.n	80040a6 <DMA_CheckFifoParam+0xda>
 8004036:	a201      	add	r2, pc, #4	; (adr r2, 800403c <DMA_CheckFifoParam+0x70>)
 8004038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403c:	0800404d 	.word	0x0800404d
 8004040:	08004053 	.word	0x08004053
 8004044:	0800404d 	.word	0x0800404d
 8004048:	08004065 	.word	0x08004065
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
      break;
 8004050:	e030      	b.n	80040b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d025      	beq.n	80040aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004062:	e022      	b.n	80040aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800406c:	d11f      	bne.n	80040ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004072:	e01c      	b.n	80040ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d903      	bls.n	8004082 <DMA_CheckFifoParam+0xb6>
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b03      	cmp	r3, #3
 800407e:	d003      	beq.n	8004088 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004080:	e018      	b.n	80040b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	73fb      	strb	r3, [r7, #15]
      break;
 8004086:	e015      	b.n	80040b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00e      	beq.n	80040b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
      break;
 8004098:	e00b      	b.n	80040b2 <DMA_CheckFifoParam+0xe6>
      break;
 800409a:	bf00      	nop
 800409c:	e00a      	b.n	80040b4 <DMA_CheckFifoParam+0xe8>
      break;
 800409e:	bf00      	nop
 80040a0:	e008      	b.n	80040b4 <DMA_CheckFifoParam+0xe8>
      break;
 80040a2:	bf00      	nop
 80040a4:	e006      	b.n	80040b4 <DMA_CheckFifoParam+0xe8>
      break;
 80040a6:	bf00      	nop
 80040a8:	e004      	b.n	80040b4 <DMA_CheckFifoParam+0xe8>
      break;
 80040aa:	bf00      	nop
 80040ac:	e002      	b.n	80040b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80040ae:	bf00      	nop
 80040b0:	e000      	b.n	80040b4 <DMA_CheckFifoParam+0xe8>
      break;
 80040b2:	bf00      	nop
    }
  } 
  
  return status; 
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop

080040c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b089      	sub	sp, #36	; 0x24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040da:	2300      	movs	r3, #0
 80040dc:	61fb      	str	r3, [r7, #28]
 80040de:	e16b      	b.n	80043b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040e0:	2201      	movs	r2, #1
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	4013      	ands	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	f040 815a 	bne.w	80043b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	2b01      	cmp	r3, #1
 8004108:	d005      	beq.n	8004116 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004112:	2b02      	cmp	r3, #2
 8004114:	d130      	bne.n	8004178 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	2203      	movs	r2, #3
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4013      	ands	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4313      	orrs	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800414c:	2201      	movs	r2, #1
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	43db      	mvns	r3, r3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4013      	ands	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	f003 0201 	and.w	r2, r3, #1
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4313      	orrs	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	2b03      	cmp	r3, #3
 8004182:	d017      	beq.n	80041b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	2203      	movs	r2, #3
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4013      	ands	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f003 0303 	and.w	r3, r3, #3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d123      	bne.n	8004208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	08da      	lsrs	r2, r3, #3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3208      	adds	r2, #8
 80041c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	220f      	movs	r2, #15
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	08da      	lsrs	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3208      	adds	r2, #8
 8004202:	69b9      	ldr	r1, [r7, #24]
 8004204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	2203      	movs	r2, #3
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	43db      	mvns	r3, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4013      	ands	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f003 0203 	and.w	r2, r3, #3
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4313      	orrs	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 80b4 	beq.w	80043b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	4b60      	ldr	r3, [pc, #384]	; (80043d0 <HAL_GPIO_Init+0x30c>)
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	4a5f      	ldr	r2, [pc, #380]	; (80043d0 <HAL_GPIO_Init+0x30c>)
 8004254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004258:	6453      	str	r3, [r2, #68]	; 0x44
 800425a:	4b5d      	ldr	r3, [pc, #372]	; (80043d0 <HAL_GPIO_Init+0x30c>)
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004266:	4a5b      	ldr	r2, [pc, #364]	; (80043d4 <HAL_GPIO_Init+0x310>)
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	089b      	lsrs	r3, r3, #2
 800426c:	3302      	adds	r3, #2
 800426e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	220f      	movs	r2, #15
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43db      	mvns	r3, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4013      	ands	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a52      	ldr	r2, [pc, #328]	; (80043d8 <HAL_GPIO_Init+0x314>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d02b      	beq.n	80042ea <HAL_GPIO_Init+0x226>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a51      	ldr	r2, [pc, #324]	; (80043dc <HAL_GPIO_Init+0x318>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d025      	beq.n	80042e6 <HAL_GPIO_Init+0x222>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a50      	ldr	r2, [pc, #320]	; (80043e0 <HAL_GPIO_Init+0x31c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d01f      	beq.n	80042e2 <HAL_GPIO_Init+0x21e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a4f      	ldr	r2, [pc, #316]	; (80043e4 <HAL_GPIO_Init+0x320>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d019      	beq.n	80042de <HAL_GPIO_Init+0x21a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a4e      	ldr	r2, [pc, #312]	; (80043e8 <HAL_GPIO_Init+0x324>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <HAL_GPIO_Init+0x216>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a4d      	ldr	r2, [pc, #308]	; (80043ec <HAL_GPIO_Init+0x328>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00d      	beq.n	80042d6 <HAL_GPIO_Init+0x212>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a4c      	ldr	r2, [pc, #304]	; (80043f0 <HAL_GPIO_Init+0x32c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d007      	beq.n	80042d2 <HAL_GPIO_Init+0x20e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a4b      	ldr	r2, [pc, #300]	; (80043f4 <HAL_GPIO_Init+0x330>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d101      	bne.n	80042ce <HAL_GPIO_Init+0x20a>
 80042ca:	2307      	movs	r3, #7
 80042cc:	e00e      	b.n	80042ec <HAL_GPIO_Init+0x228>
 80042ce:	2308      	movs	r3, #8
 80042d0:	e00c      	b.n	80042ec <HAL_GPIO_Init+0x228>
 80042d2:	2306      	movs	r3, #6
 80042d4:	e00a      	b.n	80042ec <HAL_GPIO_Init+0x228>
 80042d6:	2305      	movs	r3, #5
 80042d8:	e008      	b.n	80042ec <HAL_GPIO_Init+0x228>
 80042da:	2304      	movs	r3, #4
 80042dc:	e006      	b.n	80042ec <HAL_GPIO_Init+0x228>
 80042de:	2303      	movs	r3, #3
 80042e0:	e004      	b.n	80042ec <HAL_GPIO_Init+0x228>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e002      	b.n	80042ec <HAL_GPIO_Init+0x228>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <HAL_GPIO_Init+0x228>
 80042ea:	2300      	movs	r3, #0
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	f002 0203 	and.w	r2, r2, #3
 80042f2:	0092      	lsls	r2, r2, #2
 80042f4:	4093      	lsls	r3, r2
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042fc:	4935      	ldr	r1, [pc, #212]	; (80043d4 <HAL_GPIO_Init+0x310>)
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	089b      	lsrs	r3, r3, #2
 8004302:	3302      	adds	r3, #2
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800430a:	4b3b      	ldr	r3, [pc, #236]	; (80043f8 <HAL_GPIO_Init+0x334>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	43db      	mvns	r3, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4013      	ands	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800432e:	4a32      	ldr	r2, [pc, #200]	; (80043f8 <HAL_GPIO_Init+0x334>)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004334:	4b30      	ldr	r3, [pc, #192]	; (80043f8 <HAL_GPIO_Init+0x334>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	43db      	mvns	r3, r3
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4013      	ands	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004358:	4a27      	ldr	r2, [pc, #156]	; (80043f8 <HAL_GPIO_Init+0x334>)
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800435e:	4b26      	ldr	r3, [pc, #152]	; (80043f8 <HAL_GPIO_Init+0x334>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	43db      	mvns	r3, r3
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4013      	ands	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004382:	4a1d      	ldr	r2, [pc, #116]	; (80043f8 <HAL_GPIO_Init+0x334>)
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004388:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <HAL_GPIO_Init+0x334>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	43db      	mvns	r3, r3
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	4013      	ands	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043ac:	4a12      	ldr	r2, [pc, #72]	; (80043f8 <HAL_GPIO_Init+0x334>)
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	3301      	adds	r3, #1
 80043b6:	61fb      	str	r3, [r7, #28]
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	2b0f      	cmp	r3, #15
 80043bc:	f67f ae90 	bls.w	80040e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043c0:	bf00      	nop
 80043c2:	bf00      	nop
 80043c4:	3724      	adds	r7, #36	; 0x24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40023800 	.word	0x40023800
 80043d4:	40013800 	.word	0x40013800
 80043d8:	40020000 	.word	0x40020000
 80043dc:	40020400 	.word	0x40020400
 80043e0:	40020800 	.word	0x40020800
 80043e4:	40020c00 	.word	0x40020c00
 80043e8:	40021000 	.word	0x40021000
 80043ec:	40021400 	.word	0x40021400
 80043f0:	40021800 	.word	0x40021800
 80043f4:	40021c00 	.word	0x40021c00
 80043f8:	40013c00 	.word	0x40013c00

080043fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	807b      	strh	r3, [r7, #2]
 8004408:	4613      	mov	r3, r2
 800440a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800440c:	787b      	ldrb	r3, [r7, #1]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004412:	887a      	ldrh	r2, [r7, #2]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004418:	e003      	b.n	8004422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800441a:	887b      	ldrh	r3, [r7, #2]
 800441c:	041a      	lsls	r2, r3, #16
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	619a      	str	r2, [r3, #24]
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800442e:	b480      	push	{r7}
 8004430:	b085      	sub	sp, #20
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	460b      	mov	r3, r1
 8004438:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004440:	887a      	ldrh	r2, [r7, #2]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4013      	ands	r3, r2
 8004446:	041a      	lsls	r2, r3, #16
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	43d9      	mvns	r1, r3
 800444c:	887b      	ldrh	r3, [r7, #2]
 800444e:	400b      	ands	r3, r1
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	619a      	str	r2, [r3, #24]
}
 8004456:	bf00      	nop
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
	...

08004464 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e12b      	b.n	80046ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fd f8b8 	bl	8001600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2224      	movs	r2, #36	; 0x24
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0201 	bic.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044c8:	f001 fbd8 	bl	8005c7c <HAL_RCC_GetPCLK1Freq>
 80044cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	4a81      	ldr	r2, [pc, #516]	; (80046d8 <HAL_I2C_Init+0x274>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d807      	bhi.n	80044e8 <HAL_I2C_Init+0x84>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4a80      	ldr	r2, [pc, #512]	; (80046dc <HAL_I2C_Init+0x278>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	bf94      	ite	ls
 80044e0:	2301      	movls	r3, #1
 80044e2:	2300      	movhi	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	e006      	b.n	80044f6 <HAL_I2C_Init+0x92>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4a7d      	ldr	r2, [pc, #500]	; (80046e0 <HAL_I2C_Init+0x27c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	bf94      	ite	ls
 80044f0:	2301      	movls	r3, #1
 80044f2:	2300      	movhi	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e0e7      	b.n	80046ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4a78      	ldr	r2, [pc, #480]	; (80046e4 <HAL_I2C_Init+0x280>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	0c9b      	lsrs	r3, r3, #18
 8004508:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	430a      	orrs	r2, r1
 800451c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	4a6a      	ldr	r2, [pc, #424]	; (80046d8 <HAL_I2C_Init+0x274>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d802      	bhi.n	8004538 <HAL_I2C_Init+0xd4>
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	3301      	adds	r3, #1
 8004536:	e009      	b.n	800454c <HAL_I2C_Init+0xe8>
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800453e:	fb02 f303 	mul.w	r3, r2, r3
 8004542:	4a69      	ldr	r2, [pc, #420]	; (80046e8 <HAL_I2C_Init+0x284>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	099b      	lsrs	r3, r3, #6
 800454a:	3301      	adds	r3, #1
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	430b      	orrs	r3, r1
 8004552:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800455e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	495c      	ldr	r1, [pc, #368]	; (80046d8 <HAL_I2C_Init+0x274>)
 8004568:	428b      	cmp	r3, r1
 800456a:	d819      	bhi.n	80045a0 <HAL_I2C_Init+0x13c>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	1e59      	subs	r1, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	fbb1 f3f3 	udiv	r3, r1, r3
 800457a:	1c59      	adds	r1, r3, #1
 800457c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004580:	400b      	ands	r3, r1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HAL_I2C_Init+0x138>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	1e59      	subs	r1, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	fbb1 f3f3 	udiv	r3, r1, r3
 8004594:	3301      	adds	r3, #1
 8004596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800459a:	e051      	b.n	8004640 <HAL_I2C_Init+0x1dc>
 800459c:	2304      	movs	r3, #4
 800459e:	e04f      	b.n	8004640 <HAL_I2C_Init+0x1dc>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d111      	bne.n	80045cc <HAL_I2C_Init+0x168>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	1e58      	subs	r0, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6859      	ldr	r1, [r3, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	440b      	add	r3, r1
 80045b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ba:	3301      	adds	r3, #1
 80045bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	bf0c      	ite	eq
 80045c4:	2301      	moveq	r3, #1
 80045c6:	2300      	movne	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	e012      	b.n	80045f2 <HAL_I2C_Init+0x18e>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	1e58      	subs	r0, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6859      	ldr	r1, [r3, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	0099      	lsls	r1, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	fbb0 f3f3 	udiv	r3, r0, r3
 80045e2:	3301      	adds	r3, #1
 80045e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bf0c      	ite	eq
 80045ec:	2301      	moveq	r3, #1
 80045ee:	2300      	movne	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_I2C_Init+0x196>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e022      	b.n	8004640 <HAL_I2C_Init+0x1dc>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10e      	bne.n	8004620 <HAL_I2C_Init+0x1bc>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1e58      	subs	r0, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6859      	ldr	r1, [r3, #4]
 800460a:	460b      	mov	r3, r1
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	440b      	add	r3, r1
 8004610:	fbb0 f3f3 	udiv	r3, r0, r3
 8004614:	3301      	adds	r3, #1
 8004616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800461a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461e:	e00f      	b.n	8004640 <HAL_I2C_Init+0x1dc>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	1e58      	subs	r0, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6859      	ldr	r1, [r3, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	0099      	lsls	r1, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	fbb0 f3f3 	udiv	r3, r0, r3
 8004636:	3301      	adds	r3, #1
 8004638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800463c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004640:	6879      	ldr	r1, [r7, #4]
 8004642:	6809      	ldr	r1, [r1, #0]
 8004644:	4313      	orrs	r3, r2
 8004646:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69da      	ldr	r2, [r3, #28]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800466e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6911      	ldr	r1, [r2, #16]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68d2      	ldr	r2, [r2, #12]
 800467a:	4311      	orrs	r1, r2
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	430b      	orrs	r3, r1
 8004682:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695a      	ldr	r2, [r3, #20]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	000186a0 	.word	0x000186a0
 80046dc:	001e847f 	.word	0x001e847f
 80046e0:	003d08ff 	.word	0x003d08ff
 80046e4:	431bde83 	.word	0x431bde83
 80046e8:	10624dd3 	.word	0x10624dd3

080046ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	4608      	mov	r0, r1
 80046f6:	4611      	mov	r1, r2
 80046f8:	461a      	mov	r2, r3
 80046fa:	4603      	mov	r3, r0
 80046fc:	817b      	strh	r3, [r7, #10]
 80046fe:	460b      	mov	r3, r1
 8004700:	813b      	strh	r3, [r7, #8]
 8004702:	4613      	mov	r3, r2
 8004704:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004706:	f7fe fc19 	bl	8002f3c <HAL_GetTick>
 800470a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b20      	cmp	r3, #32
 8004716:	f040 80d9 	bne.w	80048cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	2319      	movs	r3, #25
 8004720:	2201      	movs	r2, #1
 8004722:	496d      	ldr	r1, [pc, #436]	; (80048d8 <HAL_I2C_Mem_Write+0x1ec>)
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 fc7f 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004730:	2302      	movs	r3, #2
 8004732:	e0cc      	b.n	80048ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_I2C_Mem_Write+0x56>
 800473e:	2302      	movs	r3, #2
 8004740:	e0c5      	b.n	80048ce <HAL_I2C_Mem_Write+0x1e2>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b01      	cmp	r3, #1
 8004756:	d007      	beq.n	8004768 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004776:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2221      	movs	r2, #33	; 0x21
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2240      	movs	r2, #64	; 0x40
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a3a      	ldr	r2, [r7, #32]
 8004792:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004798:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4a4d      	ldr	r2, [pc, #308]	; (80048dc <HAL_I2C_Mem_Write+0x1f0>)
 80047a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047aa:	88f8      	ldrh	r0, [r7, #6]
 80047ac:	893a      	ldrh	r2, [r7, #8]
 80047ae:	8979      	ldrh	r1, [r7, #10]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	9301      	str	r3, [sp, #4]
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	4603      	mov	r3, r0
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 fab6 	bl	8004d2c <I2C_RequestMemoryWrite>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d052      	beq.n	800486c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e081      	b.n	80048ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 fd00 	bl	80051d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00d      	beq.n	80047f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d107      	bne.n	80047f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e06b      	b.n	80048ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	781a      	ldrb	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b04      	cmp	r3, #4
 8004832:	d11b      	bne.n	800486c <HAL_I2C_Mem_Write+0x180>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004838:	2b00      	cmp	r3, #0
 800483a:	d017      	beq.n	800486c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	781a      	ldrb	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1aa      	bne.n	80047ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 fcec 	bl	8005256 <I2C_WaitOnBTFFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00d      	beq.n	80048a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	2b04      	cmp	r3, #4
 800488a:	d107      	bne.n	800489c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800489a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e016      	b.n	80048ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	e000      	b.n	80048ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80048cc:	2302      	movs	r3, #2
  }
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	00100002 	.word	0x00100002
 80048dc:	ffff0000 	.word	0xffff0000

080048e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08c      	sub	sp, #48	; 0x30
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	4608      	mov	r0, r1
 80048ea:	4611      	mov	r1, r2
 80048ec:	461a      	mov	r2, r3
 80048ee:	4603      	mov	r3, r0
 80048f0:	817b      	strh	r3, [r7, #10]
 80048f2:	460b      	mov	r3, r1
 80048f4:	813b      	strh	r3, [r7, #8]
 80048f6:	4613      	mov	r3, r2
 80048f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048fa:	f7fe fb1f 	bl	8002f3c <HAL_GetTick>
 80048fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b20      	cmp	r3, #32
 800490a:	f040 8208 	bne.w	8004d1e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	2319      	movs	r3, #25
 8004914:	2201      	movs	r2, #1
 8004916:	497b      	ldr	r1, [pc, #492]	; (8004b04 <HAL_I2C_Mem_Read+0x224>)
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 fb85 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004924:	2302      	movs	r3, #2
 8004926:	e1fb      	b.n	8004d20 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_I2C_Mem_Read+0x56>
 8004932:	2302      	movs	r3, #2
 8004934:	e1f4      	b.n	8004d20 <HAL_I2C_Mem_Read+0x440>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b01      	cmp	r3, #1
 800494a:	d007      	beq.n	800495c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800496a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2222      	movs	r2, #34	; 0x22
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2240      	movs	r2, #64	; 0x40
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004986:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800498c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4a5b      	ldr	r2, [pc, #364]	; (8004b08 <HAL_I2C_Mem_Read+0x228>)
 800499c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800499e:	88f8      	ldrh	r0, [r7, #6]
 80049a0:	893a      	ldrh	r2, [r7, #8]
 80049a2:	8979      	ldrh	r1, [r7, #10]
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	4603      	mov	r3, r0
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 fa52 	bl	8004e58 <I2C_RequestMemoryRead>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e1b0      	b.n	8004d20 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d113      	bne.n	80049ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c6:	2300      	movs	r3, #0
 80049c8:	623b      	str	r3, [r7, #32]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	623b      	str	r3, [r7, #32]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	623b      	str	r3, [r7, #32]
 80049da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	e184      	b.n	8004cf8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d11b      	bne.n	8004a2e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	61fb      	str	r3, [r7, #28]
 8004a1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	e164      	b.n	8004cf8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d11b      	bne.n	8004a6e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a56:	2300      	movs	r3, #0
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	61bb      	str	r3, [r7, #24]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	e144      	b.n	8004cf8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	617b      	str	r3, [r7, #20]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004a84:	e138      	b.n	8004cf8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	f200 80f1 	bhi.w	8004c72 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d123      	bne.n	8004ae0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fc1b 	bl	80052d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e139      	b.n	8004d20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ade:	e10b      	b.n	8004cf8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d14e      	bne.n	8004b86 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	2200      	movs	r2, #0
 8004af0:	4906      	ldr	r1, [pc, #24]	; (8004b0c <HAL_I2C_Mem_Read+0x22c>)
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fa98 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d008      	beq.n	8004b10 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e10e      	b.n	8004d20 <HAL_I2C_Mem_Read+0x440>
 8004b02:	bf00      	nop
 8004b04:	00100002 	.word	0x00100002
 8004b08:	ffff0000 	.word	0xffff0000
 8004b0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691a      	ldr	r2, [r3, #16]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b84:	e0b8      	b.n	8004cf8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	4966      	ldr	r1, [pc, #408]	; (8004d28 <HAL_I2C_Mem_Read+0x448>)
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 fa49 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0bf      	b.n	8004d20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691a      	ldr	r2, [r3, #16]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	2200      	movs	r2, #0
 8004bea:	494f      	ldr	r1, [pc, #316]	; (8004d28 <HAL_I2C_Mem_Read+0x448>)
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 fa1b 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e091      	b.n	8004d20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691a      	ldr	r2, [r3, #16]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c70:	e042      	b.n	8004cf8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 fb2e 	bl	80052d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e04c      	b.n	8004d20 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d118      	bne.n	8004cf8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	b2d2      	uxtb	r2, r2
 8004cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f47f aec2 	bne.w	8004a86 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e000      	b.n	8004d20 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004d1e:	2302      	movs	r3, #2
  }
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3728      	adds	r7, #40	; 0x28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	00010004 	.word	0x00010004

08004d2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	4608      	mov	r0, r1
 8004d36:	4611      	mov	r1, r2
 8004d38:	461a      	mov	r2, r3
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	817b      	strh	r3, [r7, #10]
 8004d3e:	460b      	mov	r3, r1
 8004d40:	813b      	strh	r3, [r7, #8]
 8004d42:	4613      	mov	r3, r2
 8004d44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 f960 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00d      	beq.n	8004d8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d7c:	d103      	bne.n	8004d86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e05f      	b.n	8004e4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d8a:	897b      	ldrh	r3, [r7, #10]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	6a3a      	ldr	r2, [r7, #32]
 8004d9e:	492d      	ldr	r1, [pc, #180]	; (8004e54 <I2C_RequestMemoryWrite+0x128>)
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f998 	bl	80050d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e04c      	b.n	8004e4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc8:	6a39      	ldr	r1, [r7, #32]
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 fa02 	bl	80051d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00d      	beq.n	8004df2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d107      	bne.n	8004dee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e02b      	b.n	8004e4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004df2:	88fb      	ldrh	r3, [r7, #6]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d105      	bne.n	8004e04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004df8:	893b      	ldrh	r3, [r7, #8]
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	611a      	str	r2, [r3, #16]
 8004e02:	e021      	b.n	8004e48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e04:	893b      	ldrh	r3, [r7, #8]
 8004e06:	0a1b      	lsrs	r3, r3, #8
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e14:	6a39      	ldr	r1, [r7, #32]
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 f9dc 	bl	80051d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00d      	beq.n	8004e3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d107      	bne.n	8004e3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e005      	b.n	8004e4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e3e:	893b      	ldrh	r3, [r7, #8]
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	00010002 	.word	0x00010002

08004e58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	4608      	mov	r0, r1
 8004e62:	4611      	mov	r1, r2
 8004e64:	461a      	mov	r2, r3
 8004e66:	4603      	mov	r3, r0
 8004e68:	817b      	strh	r3, [r7, #10]
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	813b      	strh	r3, [r7, #8]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f8c2 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00d      	beq.n	8004ec6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eb8:	d103      	bne.n	8004ec2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e0aa      	b.n	800501c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ec6:	897b      	ldrh	r3, [r7, #10]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	461a      	mov	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ed4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	6a3a      	ldr	r2, [r7, #32]
 8004eda:	4952      	ldr	r1, [pc, #328]	; (8005024 <I2C_RequestMemoryRead+0x1cc>)
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 f8fa 	bl	80050d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e097      	b.n	800501c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f04:	6a39      	ldr	r1, [r7, #32]
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f964 	bl	80051d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00d      	beq.n	8004f2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d107      	bne.n	8004f2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e076      	b.n	800501c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f2e:	88fb      	ldrh	r3, [r7, #6]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d105      	bne.n	8004f40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f34:	893b      	ldrh	r3, [r7, #8]
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	611a      	str	r2, [r3, #16]
 8004f3e:	e021      	b.n	8004f84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f40:	893b      	ldrh	r3, [r7, #8]
 8004f42:	0a1b      	lsrs	r3, r3, #8
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f50:	6a39      	ldr	r1, [r7, #32]
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 f93e 	bl	80051d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00d      	beq.n	8004f7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d107      	bne.n	8004f76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e050      	b.n	800501c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f7a:	893b      	ldrh	r3, [r7, #8]
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f86:	6a39      	ldr	r1, [r7, #32]
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f923 	bl	80051d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00d      	beq.n	8004fb0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d107      	bne.n	8004fac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004faa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e035      	b.n	800501c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 f82b 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00d      	beq.n	8004ff4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe6:	d103      	bne.n	8004ff0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e013      	b.n	800501c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ff4:	897b      	ldrh	r3, [r7, #10]
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	f043 0301 	orr.w	r3, r3, #1
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	6a3a      	ldr	r2, [r7, #32]
 8005008:	4906      	ldr	r1, [pc, #24]	; (8005024 <I2C_RequestMemoryRead+0x1cc>)
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 f863 	bl	80050d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	00010002 	.word	0x00010002

08005028 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	603b      	str	r3, [r7, #0]
 8005034:	4613      	mov	r3, r2
 8005036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005038:	e025      	b.n	8005086 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005040:	d021      	beq.n	8005086 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005042:	f7fd ff7b 	bl	8002f3c <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d302      	bcc.n	8005058 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d116      	bne.n	8005086 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f043 0220 	orr.w	r2, r3, #32
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e023      	b.n	80050ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	0c1b      	lsrs	r3, r3, #16
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b01      	cmp	r3, #1
 800508e:	d10d      	bne.n	80050ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	43da      	mvns	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4013      	ands	r3, r2
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	bf0c      	ite	eq
 80050a2:	2301      	moveq	r3, #1
 80050a4:	2300      	movne	r3, #0
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	461a      	mov	r2, r3
 80050aa:	e00c      	b.n	80050c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	43da      	mvns	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4013      	ands	r3, r2
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bf0c      	ite	eq
 80050be:	2301      	moveq	r3, #1
 80050c0:	2300      	movne	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	461a      	mov	r2, r3
 80050c6:	79fb      	ldrb	r3, [r7, #7]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d0b6      	beq.n	800503a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	60f8      	str	r0, [r7, #12]
 80050de:	60b9      	str	r1, [r7, #8]
 80050e0:	607a      	str	r2, [r7, #4]
 80050e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050e4:	e051      	b.n	800518a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f4:	d123      	bne.n	800513e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005104:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800510e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	f043 0204 	orr.w	r2, r3, #4
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e046      	b.n	80051cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005144:	d021      	beq.n	800518a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005146:	f7fd fef9 	bl	8002f3c <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	429a      	cmp	r2, r3
 8005154:	d302      	bcc.n	800515c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d116      	bne.n	800518a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e020      	b.n	80051cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	0c1b      	lsrs	r3, r3, #16
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	d10c      	bne.n	80051ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	43da      	mvns	r2, r3
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4013      	ands	r3, r2
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	bf14      	ite	ne
 80051a6:	2301      	movne	r3, #1
 80051a8:	2300      	moveq	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	e00b      	b.n	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	43da      	mvns	r2, r3
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	4013      	ands	r3, r2
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	bf14      	ite	ne
 80051c0:	2301      	movne	r3, #1
 80051c2:	2300      	moveq	r3, #0
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d18d      	bne.n	80050e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051e0:	e02d      	b.n	800523e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 f8ce 	bl	8005384 <I2C_IsAcknowledgeFailed>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e02d      	b.n	800524e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f8:	d021      	beq.n	800523e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fa:	f7fd fe9f 	bl	8002f3c <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	429a      	cmp	r2, r3
 8005208:	d302      	bcc.n	8005210 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d116      	bne.n	800523e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2220      	movs	r2, #32
 800521a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f043 0220 	orr.w	r2, r3, #32
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e007      	b.n	800524e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005248:	2b80      	cmp	r3, #128	; 0x80
 800524a:	d1ca      	bne.n	80051e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005262:	e02d      	b.n	80052c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 f88d 	bl	8005384 <I2C_IsAcknowledgeFailed>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e02d      	b.n	80052d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527a:	d021      	beq.n	80052c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527c:	f7fd fe5e 	bl	8002f3c <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	429a      	cmp	r2, r3
 800528a:	d302      	bcc.n	8005292 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d116      	bne.n	80052c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2220      	movs	r2, #32
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ac:	f043 0220 	orr.w	r2, r3, #32
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e007      	b.n	80052d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d1ca      	bne.n	8005264 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052e4:	e042      	b.n	800536c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d119      	bne.n	8005328 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0210 	mvn.w	r2, #16
 80052fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e029      	b.n	800537c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005328:	f7fd fe08 	bl	8002f3c <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	429a      	cmp	r2, r3
 8005336:	d302      	bcc.n	800533e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d116      	bne.n	800536c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2220      	movs	r2, #32
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	f043 0220 	orr.w	r2, r3, #32
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e007      	b.n	800537c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005376:	2b40      	cmp	r3, #64	; 0x40
 8005378:	d1b5      	bne.n	80052e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800539a:	d11b      	bne.n	80053d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	f043 0204 	orr.w	r2, r3, #4
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e000      	b.n	80053d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
	...

080053e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e264      	b.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d075      	beq.n	80054ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005402:	4ba3      	ldr	r3, [pc, #652]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 030c 	and.w	r3, r3, #12
 800540a:	2b04      	cmp	r3, #4
 800540c:	d00c      	beq.n	8005428 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800540e:	4ba0      	ldr	r3, [pc, #640]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005416:	2b08      	cmp	r3, #8
 8005418:	d112      	bne.n	8005440 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800541a:	4b9d      	ldr	r3, [pc, #628]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005426:	d10b      	bne.n	8005440 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005428:	4b99      	ldr	r3, [pc, #612]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d05b      	beq.n	80054ec <HAL_RCC_OscConfig+0x108>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d157      	bne.n	80054ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e23f      	b.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005448:	d106      	bne.n	8005458 <HAL_RCC_OscConfig+0x74>
 800544a:	4b91      	ldr	r3, [pc, #580]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a90      	ldr	r2, [pc, #576]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	e01d      	b.n	8005494 <HAL_RCC_OscConfig+0xb0>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005460:	d10c      	bne.n	800547c <HAL_RCC_OscConfig+0x98>
 8005462:	4b8b      	ldr	r3, [pc, #556]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a8a      	ldr	r2, [pc, #552]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	4b88      	ldr	r3, [pc, #544]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a87      	ldr	r2, [pc, #540]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	e00b      	b.n	8005494 <HAL_RCC_OscConfig+0xb0>
 800547c:	4b84      	ldr	r3, [pc, #528]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a83      	ldr	r2, [pc, #524]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	4b81      	ldr	r3, [pc, #516]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a80      	ldr	r2, [pc, #512]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 800548e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d013      	beq.n	80054c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549c:	f7fd fd4e 	bl	8002f3c <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a4:	f7fd fd4a 	bl	8002f3c <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b64      	cmp	r3, #100	; 0x64
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e204      	b.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b6:	4b76      	ldr	r3, [pc, #472]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0f0      	beq.n	80054a4 <HAL_RCC_OscConfig+0xc0>
 80054c2:	e014      	b.n	80054ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c4:	f7fd fd3a 	bl	8002f3c <HAL_GetTick>
 80054c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054cc:	f7fd fd36 	bl	8002f3c <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b64      	cmp	r3, #100	; 0x64
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e1f0      	b.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054de:	4b6c      	ldr	r3, [pc, #432]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1f0      	bne.n	80054cc <HAL_RCC_OscConfig+0xe8>
 80054ea:	e000      	b.n	80054ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d063      	beq.n	80055c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054fa:	4b65      	ldr	r3, [pc, #404]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 030c 	and.w	r3, r3, #12
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00b      	beq.n	800551e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005506:	4b62      	ldr	r3, [pc, #392]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800550e:	2b08      	cmp	r3, #8
 8005510:	d11c      	bne.n	800554c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005512:	4b5f      	ldr	r3, [pc, #380]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d116      	bne.n	800554c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800551e:	4b5c      	ldr	r3, [pc, #368]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d005      	beq.n	8005536 <HAL_RCC_OscConfig+0x152>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d001      	beq.n	8005536 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e1c4      	b.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005536:	4b56      	ldr	r3, [pc, #344]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	4952      	ldr	r1, [pc, #328]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005546:	4313      	orrs	r3, r2
 8005548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800554a:	e03a      	b.n	80055c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d020      	beq.n	8005596 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005554:	4b4f      	ldr	r3, [pc, #316]	; (8005694 <HAL_RCC_OscConfig+0x2b0>)
 8005556:	2201      	movs	r2, #1
 8005558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555a:	f7fd fcef 	bl	8002f3c <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005562:	f7fd fceb 	bl	8002f3c <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e1a5      	b.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005574:	4b46      	ldr	r3, [pc, #280]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0f0      	beq.n	8005562 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005580:	4b43      	ldr	r3, [pc, #268]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	4940      	ldr	r1, [pc, #256]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005590:	4313      	orrs	r3, r2
 8005592:	600b      	str	r3, [r1, #0]
 8005594:	e015      	b.n	80055c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005596:	4b3f      	ldr	r3, [pc, #252]	; (8005694 <HAL_RCC_OscConfig+0x2b0>)
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559c:	f7fd fcce 	bl	8002f3c <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055a4:	f7fd fcca 	bl	8002f3c <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e184      	b.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055b6:	4b36      	ldr	r3, [pc, #216]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1f0      	bne.n	80055a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d030      	beq.n	8005630 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d016      	beq.n	8005604 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055d6:	4b30      	ldr	r3, [pc, #192]	; (8005698 <HAL_RCC_OscConfig+0x2b4>)
 80055d8:	2201      	movs	r2, #1
 80055da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055dc:	f7fd fcae 	bl	8002f3c <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055e4:	f7fd fcaa 	bl	8002f3c <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e164      	b.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055f6:	4b26      	ldr	r3, [pc, #152]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 80055f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0f0      	beq.n	80055e4 <HAL_RCC_OscConfig+0x200>
 8005602:	e015      	b.n	8005630 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005604:	4b24      	ldr	r3, [pc, #144]	; (8005698 <HAL_RCC_OscConfig+0x2b4>)
 8005606:	2200      	movs	r2, #0
 8005608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800560a:	f7fd fc97 	bl	8002f3c <HAL_GetTick>
 800560e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005610:	e008      	b.n	8005624 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005612:	f7fd fc93 	bl	8002f3c <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e14d      	b.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005624:	4b1a      	ldr	r3, [pc, #104]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1f0      	bne.n	8005612 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80a0 	beq.w	800577e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800563e:	2300      	movs	r3, #0
 8005640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005642:	4b13      	ldr	r3, [pc, #76]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10f      	bne.n	800566e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800564e:	2300      	movs	r3, #0
 8005650:	60bb      	str	r3, [r7, #8]
 8005652:	4b0f      	ldr	r3, [pc, #60]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	4a0e      	ldr	r2, [pc, #56]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800565c:	6413      	str	r3, [r2, #64]	; 0x40
 800565e:	4b0c      	ldr	r3, [pc, #48]	; (8005690 <HAL_RCC_OscConfig+0x2ac>)
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005666:	60bb      	str	r3, [r7, #8]
 8005668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800566a:	2301      	movs	r3, #1
 800566c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800566e:	4b0b      	ldr	r3, [pc, #44]	; (800569c <HAL_RCC_OscConfig+0x2b8>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005676:	2b00      	cmp	r3, #0
 8005678:	d121      	bne.n	80056be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800567a:	4b08      	ldr	r3, [pc, #32]	; (800569c <HAL_RCC_OscConfig+0x2b8>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a07      	ldr	r2, [pc, #28]	; (800569c <HAL_RCC_OscConfig+0x2b8>)
 8005680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005686:	f7fd fc59 	bl	8002f3c <HAL_GetTick>
 800568a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800568c:	e011      	b.n	80056b2 <HAL_RCC_OscConfig+0x2ce>
 800568e:	bf00      	nop
 8005690:	40023800 	.word	0x40023800
 8005694:	42470000 	.word	0x42470000
 8005698:	42470e80 	.word	0x42470e80
 800569c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a0:	f7fd fc4c 	bl	8002f3c <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e106      	b.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b2:	4b85      	ldr	r3, [pc, #532]	; (80058c8 <HAL_RCC_OscConfig+0x4e4>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0f0      	beq.n	80056a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d106      	bne.n	80056d4 <HAL_RCC_OscConfig+0x2f0>
 80056c6:	4b81      	ldr	r3, [pc, #516]	; (80058cc <HAL_RCC_OscConfig+0x4e8>)
 80056c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ca:	4a80      	ldr	r2, [pc, #512]	; (80058cc <HAL_RCC_OscConfig+0x4e8>)
 80056cc:	f043 0301 	orr.w	r3, r3, #1
 80056d0:	6713      	str	r3, [r2, #112]	; 0x70
 80056d2:	e01c      	b.n	800570e <HAL_RCC_OscConfig+0x32a>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	2b05      	cmp	r3, #5
 80056da:	d10c      	bne.n	80056f6 <HAL_RCC_OscConfig+0x312>
 80056dc:	4b7b      	ldr	r3, [pc, #492]	; (80058cc <HAL_RCC_OscConfig+0x4e8>)
 80056de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e0:	4a7a      	ldr	r2, [pc, #488]	; (80058cc <HAL_RCC_OscConfig+0x4e8>)
 80056e2:	f043 0304 	orr.w	r3, r3, #4
 80056e6:	6713      	str	r3, [r2, #112]	; 0x70
 80056e8:	4b78      	ldr	r3, [pc, #480]	; (80058cc <HAL_RCC_OscConfig+0x4e8>)
 80056ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ec:	4a77      	ldr	r2, [pc, #476]	; (80058cc <HAL_RCC_OscConfig+0x4e8>)
 80056ee:	f043 0301 	orr.w	r3, r3, #1
 80056f2:	6713      	str	r3, [r2, #112]	; 0x70
 80056f4:	e00b      	b.n	800570e <HAL_RCC_OscConfig+0x32a>
 80056f6:	4b75      	ldr	r3, [pc, #468]	; (80058cc <HAL_RCC_OscConfig+0x4e8>)
 80056f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fa:	4a74      	ldr	r2, [pc, #464]	; (80058cc <HAL_RCC_OscConfig+0x4e8>)
 80056fc:	f023 0301 	bic.w	r3, r3, #1
 8005700:	6713      	str	r3, [r2, #112]	; 0x70
 8005702:	4b72      	ldr	r3, [pc, #456]	; (80058cc <HAL_RCC_OscConfig+0x4e8>)
 8005704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005706:	4a71      	ldr	r2, [pc, #452]	; (80058cc <HAL_RCC_OscConfig+0x4e8>)
 8005708:	f023 0304 	bic.w	r3, r3, #4
 800570c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d015      	beq.n	8005742 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005716:	f7fd fc11 	bl	8002f3c <HAL_GetTick>
 800571a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800571c:	e00a      	b.n	8005734 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800571e:	f7fd fc0d 	bl	8002f3c <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	f241 3288 	movw	r2, #5000	; 0x1388
 800572c:	4293      	cmp	r3, r2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e0c5      	b.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005734:	4b65      	ldr	r3, [pc, #404]	; (80058cc <HAL_RCC_OscConfig+0x4e8>)
 8005736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0ee      	beq.n	800571e <HAL_RCC_OscConfig+0x33a>
 8005740:	e014      	b.n	800576c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005742:	f7fd fbfb 	bl	8002f3c <HAL_GetTick>
 8005746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005748:	e00a      	b.n	8005760 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800574a:	f7fd fbf7 	bl	8002f3c <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	f241 3288 	movw	r2, #5000	; 0x1388
 8005758:	4293      	cmp	r3, r2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e0af      	b.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005760:	4b5a      	ldr	r3, [pc, #360]	; (80058cc <HAL_RCC_OscConfig+0x4e8>)
 8005762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1ee      	bne.n	800574a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800576c:	7dfb      	ldrb	r3, [r7, #23]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d105      	bne.n	800577e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005772:	4b56      	ldr	r3, [pc, #344]	; (80058cc <HAL_RCC_OscConfig+0x4e8>)
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	4a55      	ldr	r2, [pc, #340]	; (80058cc <HAL_RCC_OscConfig+0x4e8>)
 8005778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800577c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 809b 	beq.w	80058be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005788:	4b50      	ldr	r3, [pc, #320]	; (80058cc <HAL_RCC_OscConfig+0x4e8>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f003 030c 	and.w	r3, r3, #12
 8005790:	2b08      	cmp	r3, #8
 8005792:	d05c      	beq.n	800584e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	2b02      	cmp	r3, #2
 800579a:	d141      	bne.n	8005820 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800579c:	4b4c      	ldr	r3, [pc, #304]	; (80058d0 <HAL_RCC_OscConfig+0x4ec>)
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a2:	f7fd fbcb 	bl	8002f3c <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057aa:	f7fd fbc7 	bl	8002f3c <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e081      	b.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057bc:	4b43      	ldr	r3, [pc, #268]	; (80058cc <HAL_RCC_OscConfig+0x4e8>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1f0      	bne.n	80057aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69da      	ldr	r2, [r3, #28]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	019b      	lsls	r3, r3, #6
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057de:	085b      	lsrs	r3, r3, #1
 80057e0:	3b01      	subs	r3, #1
 80057e2:	041b      	lsls	r3, r3, #16
 80057e4:	431a      	orrs	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	061b      	lsls	r3, r3, #24
 80057ec:	4937      	ldr	r1, [pc, #220]	; (80058cc <HAL_RCC_OscConfig+0x4e8>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057f2:	4b37      	ldr	r3, [pc, #220]	; (80058d0 <HAL_RCC_OscConfig+0x4ec>)
 80057f4:	2201      	movs	r2, #1
 80057f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f8:	f7fd fba0 	bl	8002f3c <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005800:	f7fd fb9c 	bl	8002f3c <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e056      	b.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005812:	4b2e      	ldr	r3, [pc, #184]	; (80058cc <HAL_RCC_OscConfig+0x4e8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0f0      	beq.n	8005800 <HAL_RCC_OscConfig+0x41c>
 800581e:	e04e      	b.n	80058be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005820:	4b2b      	ldr	r3, [pc, #172]	; (80058d0 <HAL_RCC_OscConfig+0x4ec>)
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005826:	f7fd fb89 	bl	8002f3c <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800582e:	f7fd fb85 	bl	8002f3c <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e03f      	b.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005840:	4b22      	ldr	r3, [pc, #136]	; (80058cc <HAL_RCC_OscConfig+0x4e8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f0      	bne.n	800582e <HAL_RCC_OscConfig+0x44a>
 800584c:	e037      	b.n	80058be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d101      	bne.n	800585a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e032      	b.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800585a:	4b1c      	ldr	r3, [pc, #112]	; (80058cc <HAL_RCC_OscConfig+0x4e8>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d028      	beq.n	80058ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005872:	429a      	cmp	r2, r3
 8005874:	d121      	bne.n	80058ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005880:	429a      	cmp	r2, r3
 8005882:	d11a      	bne.n	80058ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800588a:	4013      	ands	r3, r2
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005890:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005892:	4293      	cmp	r3, r2
 8005894:	d111      	bne.n	80058ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a0:	085b      	lsrs	r3, r3, #1
 80058a2:	3b01      	subs	r3, #1
 80058a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d107      	bne.n	80058ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d001      	beq.n	80058be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40007000 	.word	0x40007000
 80058cc:	40023800 	.word	0x40023800
 80058d0:	42470060 	.word	0x42470060

080058d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e0cc      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058e8:	4b68      	ldr	r3, [pc, #416]	; (8005a8c <HAL_RCC_ClockConfig+0x1b8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d90c      	bls.n	8005910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f6:	4b65      	ldr	r3, [pc, #404]	; (8005a8c <HAL_RCC_ClockConfig+0x1b8>)
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058fe:	4b63      	ldr	r3, [pc, #396]	; (8005a8c <HAL_RCC_ClockConfig+0x1b8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0307 	and.w	r3, r3, #7
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	429a      	cmp	r2, r3
 800590a:	d001      	beq.n	8005910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e0b8      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d020      	beq.n	800595e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005928:	4b59      	ldr	r3, [pc, #356]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	4a58      	ldr	r2, [pc, #352]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 800592e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0308 	and.w	r3, r3, #8
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005940:	4b53      	ldr	r3, [pc, #332]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	4a52      	ldr	r2, [pc, #328]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800594a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800594c:	4b50      	ldr	r3, [pc, #320]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	494d      	ldr	r1, [pc, #308]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 800595a:	4313      	orrs	r3, r2
 800595c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d044      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d107      	bne.n	8005982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005972:	4b47      	ldr	r3, [pc, #284]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d119      	bne.n	80059b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e07f      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2b02      	cmp	r3, #2
 8005988:	d003      	beq.n	8005992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800598e:	2b03      	cmp	r3, #3
 8005990:	d107      	bne.n	80059a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005992:	4b3f      	ldr	r3, [pc, #252]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d109      	bne.n	80059b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e06f      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a2:	4b3b      	ldr	r3, [pc, #236]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e067      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059b2:	4b37      	ldr	r3, [pc, #220]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f023 0203 	bic.w	r2, r3, #3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	4934      	ldr	r1, [pc, #208]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059c4:	f7fd faba 	bl	8002f3c <HAL_GetTick>
 80059c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ca:	e00a      	b.n	80059e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059cc:	f7fd fab6 	bl	8002f3c <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059da:	4293      	cmp	r3, r2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e04f      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e2:	4b2b      	ldr	r3, [pc, #172]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 020c 	and.w	r2, r3, #12
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d1eb      	bne.n	80059cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059f4:	4b25      	ldr	r3, [pc, #148]	; (8005a8c <HAL_RCC_ClockConfig+0x1b8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d20c      	bcs.n	8005a1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a02:	4b22      	ldr	r3, [pc, #136]	; (8005a8c <HAL_RCC_ClockConfig+0x1b8>)
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0a:	4b20      	ldr	r3, [pc, #128]	; (8005a8c <HAL_RCC_ClockConfig+0x1b8>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d001      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e032      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d008      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a28:	4b19      	ldr	r3, [pc, #100]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	4916      	ldr	r1, [pc, #88]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a46:	4b12      	ldr	r3, [pc, #72]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	490e      	ldr	r1, [pc, #56]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a5a:	f000 f821 	bl	8005aa0 <HAL_RCC_GetSysClockFreq>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	4b0b      	ldr	r3, [pc, #44]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	490a      	ldr	r1, [pc, #40]	; (8005a94 <HAL_RCC_ClockConfig+0x1c0>)
 8005a6c:	5ccb      	ldrb	r3, [r1, r3]
 8005a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a72:	4a09      	ldr	r2, [pc, #36]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 8005a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a76:	4b09      	ldr	r3, [pc, #36]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fd fa1a 	bl	8002eb4 <HAL_InitTick>

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40023c00 	.word	0x40023c00
 8005a90:	40023800 	.word	0x40023800
 8005a94:	0800aacc 	.word	0x0800aacc
 8005a98:	20000010 	.word	0x20000010
 8005a9c:	20000014 	.word	0x20000014

08005aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aa0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	607b      	str	r3, [r7, #4]
 8005aac:	2300      	movs	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ab8:	4b67      	ldr	r3, [pc, #412]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f003 030c 	and.w	r3, r3, #12
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d00d      	beq.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	f200 80bd 	bhi.w	8005c44 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x34>
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d003      	beq.n	8005ada <HAL_RCC_GetSysClockFreq+0x3a>
 8005ad2:	e0b7      	b.n	8005c44 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ad4:	4b61      	ldr	r3, [pc, #388]	; (8005c5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005ad6:	60bb      	str	r3, [r7, #8]
       break;
 8005ad8:	e0b7      	b.n	8005c4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ada:	4b61      	ldr	r3, [pc, #388]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005adc:	60bb      	str	r3, [r7, #8]
      break;
 8005ade:	e0b4      	b.n	8005c4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ae0:	4b5d      	ldr	r3, [pc, #372]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ae8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005aea:	4b5b      	ldr	r3, [pc, #364]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d04d      	beq.n	8005b92 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005af6:	4b58      	ldr	r3, [pc, #352]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	099b      	lsrs	r3, r3, #6
 8005afc:	461a      	mov	r2, r3
 8005afe:	f04f 0300 	mov.w	r3, #0
 8005b02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b06:	f04f 0100 	mov.w	r1, #0
 8005b0a:	ea02 0800 	and.w	r8, r2, r0
 8005b0e:	ea03 0901 	and.w	r9, r3, r1
 8005b12:	4640      	mov	r0, r8
 8005b14:	4649      	mov	r1, r9
 8005b16:	f04f 0200 	mov.w	r2, #0
 8005b1a:	f04f 0300 	mov.w	r3, #0
 8005b1e:	014b      	lsls	r3, r1, #5
 8005b20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b24:	0142      	lsls	r2, r0, #5
 8005b26:	4610      	mov	r0, r2
 8005b28:	4619      	mov	r1, r3
 8005b2a:	ebb0 0008 	subs.w	r0, r0, r8
 8005b2e:	eb61 0109 	sbc.w	r1, r1, r9
 8005b32:	f04f 0200 	mov.w	r2, #0
 8005b36:	f04f 0300 	mov.w	r3, #0
 8005b3a:	018b      	lsls	r3, r1, #6
 8005b3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b40:	0182      	lsls	r2, r0, #6
 8005b42:	1a12      	subs	r2, r2, r0
 8005b44:	eb63 0301 	sbc.w	r3, r3, r1
 8005b48:	f04f 0000 	mov.w	r0, #0
 8005b4c:	f04f 0100 	mov.w	r1, #0
 8005b50:	00d9      	lsls	r1, r3, #3
 8005b52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b56:	00d0      	lsls	r0, r2, #3
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	eb12 0208 	adds.w	r2, r2, r8
 8005b60:	eb43 0309 	adc.w	r3, r3, r9
 8005b64:	f04f 0000 	mov.w	r0, #0
 8005b68:	f04f 0100 	mov.w	r1, #0
 8005b6c:	0259      	lsls	r1, r3, #9
 8005b6e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005b72:	0250      	lsls	r0, r2, #9
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4610      	mov	r0, r2
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	f7fa ff3e 	bl	8000a04 <__aeabi_uldivmod>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	e04a      	b.n	8005c28 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b92:	4b31      	ldr	r3, [pc, #196]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	099b      	lsrs	r3, r3, #6
 8005b98:	461a      	mov	r2, r3
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ba2:	f04f 0100 	mov.w	r1, #0
 8005ba6:	ea02 0400 	and.w	r4, r2, r0
 8005baa:	ea03 0501 	and.w	r5, r3, r1
 8005bae:	4620      	mov	r0, r4
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	f04f 0300 	mov.w	r3, #0
 8005bba:	014b      	lsls	r3, r1, #5
 8005bbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005bc0:	0142      	lsls	r2, r0, #5
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	1b00      	subs	r0, r0, r4
 8005bc8:	eb61 0105 	sbc.w	r1, r1, r5
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	018b      	lsls	r3, r1, #6
 8005bd6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005bda:	0182      	lsls	r2, r0, #6
 8005bdc:	1a12      	subs	r2, r2, r0
 8005bde:	eb63 0301 	sbc.w	r3, r3, r1
 8005be2:	f04f 0000 	mov.w	r0, #0
 8005be6:	f04f 0100 	mov.w	r1, #0
 8005bea:	00d9      	lsls	r1, r3, #3
 8005bec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bf0:	00d0      	lsls	r0, r2, #3
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	1912      	adds	r2, r2, r4
 8005bf8:	eb45 0303 	adc.w	r3, r5, r3
 8005bfc:	f04f 0000 	mov.w	r0, #0
 8005c00:	f04f 0100 	mov.w	r1, #0
 8005c04:	0299      	lsls	r1, r3, #10
 8005c06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005c0a:	0290      	lsls	r0, r2, #10
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4610      	mov	r0, r2
 8005c12:	4619      	mov	r1, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	461a      	mov	r2, r3
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	f7fa fef2 	bl	8000a04 <__aeabi_uldivmod>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	4613      	mov	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c28:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	0c1b      	lsrs	r3, r3, #16
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	3301      	adds	r3, #1
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c40:	60bb      	str	r3, [r7, #8]
      break;
 8005c42:	e002      	b.n	8005c4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c44:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c46:	60bb      	str	r3, [r7, #8]
      break;
 8005c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005c56:	bf00      	nop
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	00f42400 	.word	0x00f42400
 8005c60:	007a1200 	.word	0x007a1200

08005c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c68:	4b03      	ldr	r3, [pc, #12]	; (8005c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	20000010 	.word	0x20000010

08005c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c80:	f7ff fff0 	bl	8005c64 <HAL_RCC_GetHCLKFreq>
 8005c84:	4602      	mov	r2, r0
 8005c86:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	0a9b      	lsrs	r3, r3, #10
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	4903      	ldr	r1, [pc, #12]	; (8005ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c92:	5ccb      	ldrb	r3, [r1, r3]
 8005c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	40023800 	.word	0x40023800
 8005ca0:	0800aadc 	.word	0x0800aadc

08005ca4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e07b      	b.n	8005dae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d108      	bne.n	8005cd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cc6:	d009      	beq.n	8005cdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	61da      	str	r2, [r3, #28]
 8005cce:	e005      	b.n	8005cdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d106      	bne.n	8005cfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fc fe82 	bl	8002a00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d60:	ea42 0103 	orr.w	r1, r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d68:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	0c1b      	lsrs	r3, r3, #16
 8005d7a:	f003 0104 	and.w	r1, r3, #4
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	f003 0210 	and.w	r2, r3, #16
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69da      	ldr	r2, [r3, #28]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b088      	sub	sp, #32
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	603b      	str	r3, [r7, #0]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_SPI_Transmit+0x22>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e126      	b.n	8006026 <HAL_SPI_Transmit+0x270>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005de0:	f7fd f8ac 	bl	8002f3c <HAL_GetTick>
 8005de4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005de6:	88fb      	ldrh	r3, [r7, #6]
 8005de8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d002      	beq.n	8005dfc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005df6:	2302      	movs	r3, #2
 8005df8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dfa:	e10b      	b.n	8006014 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_SPI_Transmit+0x52>
 8005e02:	88fb      	ldrh	r3, [r7, #6]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d102      	bne.n	8005e0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e0c:	e102      	b.n	8006014 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2203      	movs	r2, #3
 8005e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	88fa      	ldrh	r2, [r7, #6]
 8005e26:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	88fa      	ldrh	r2, [r7, #6]
 8005e2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e54:	d10f      	bne.n	8005e76 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e80:	2b40      	cmp	r3, #64	; 0x40
 8005e82:	d007      	beq.n	8005e94 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e9c:	d14b      	bne.n	8005f36 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_SPI_Transmit+0xf6>
 8005ea6:	8afb      	ldrh	r3, [r7, #22]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d13e      	bne.n	8005f2a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb0:	881a      	ldrh	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebc:	1c9a      	adds	r2, r3, #2
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ed0:	e02b      	b.n	8005f2a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d112      	bne.n	8005f06 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee4:	881a      	ldrh	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef0:	1c9a      	adds	r2, r3, #2
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f04:	e011      	b.n	8005f2a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f06:	f7fd f819 	bl	8002f3c <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d803      	bhi.n	8005f1e <HAL_SPI_Transmit+0x168>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1c:	d102      	bne.n	8005f24 <HAL_SPI_Transmit+0x16e>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d102      	bne.n	8005f2a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f28:	e074      	b.n	8006014 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1ce      	bne.n	8005ed2 <HAL_SPI_Transmit+0x11c>
 8005f34:	e04c      	b.n	8005fd0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <HAL_SPI_Transmit+0x18e>
 8005f3e:	8afb      	ldrh	r3, [r7, #22]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d140      	bne.n	8005fc6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	330c      	adds	r3, #12
 8005f4e:	7812      	ldrb	r2, [r2, #0]
 8005f50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f6a:	e02c      	b.n	8005fc6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d113      	bne.n	8005fa2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	330c      	adds	r3, #12
 8005f84:	7812      	ldrb	r2, [r2, #0]
 8005f86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fa0:	e011      	b.n	8005fc6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fa2:	f7fc ffcb 	bl	8002f3c <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d803      	bhi.n	8005fba <HAL_SPI_Transmit+0x204>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb8:	d102      	bne.n	8005fc0 <HAL_SPI_Transmit+0x20a>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d102      	bne.n	8005fc6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fc4:	e026      	b.n	8006014 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1cd      	bne.n	8005f6c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 fbcb 	bl	8006770 <SPI_EndRxTxTransaction>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10a      	bne.n	8006004 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fee:	2300      	movs	r3, #0
 8005ff0:	613b      	str	r3, [r7, #16]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	613b      	str	r3, [r7, #16]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	613b      	str	r3, [r7, #16]
 8006002:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e000      	b.n	8006014 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006012:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006024:	7ffb      	ldrb	r3, [r7, #31]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3720      	adds	r7, #32
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b088      	sub	sp, #32
 8006032:	af02      	add	r7, sp, #8
 8006034:	60f8      	str	r0, [r7, #12]
 8006036:	60b9      	str	r1, [r7, #8]
 8006038:	603b      	str	r3, [r7, #0]
 800603a:	4613      	mov	r3, r2
 800603c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800604a:	d112      	bne.n	8006072 <HAL_SPI_Receive+0x44>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10e      	bne.n	8006072 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2204      	movs	r2, #4
 8006058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800605c:	88fa      	ldrh	r2, [r7, #6]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	4613      	mov	r3, r2
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	68b9      	ldr	r1, [r7, #8]
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f8f1 	bl	8006250 <HAL_SPI_TransmitReceive>
 800606e:	4603      	mov	r3, r0
 8006070:	e0ea      	b.n	8006248 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_SPI_Receive+0x52>
 800607c:	2302      	movs	r3, #2
 800607e:	e0e3      	b.n	8006248 <HAL_SPI_Receive+0x21a>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006088:	f7fc ff58 	bl	8002f3c <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b01      	cmp	r3, #1
 8006098:	d002      	beq.n	80060a0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800609a:	2302      	movs	r3, #2
 800609c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800609e:	e0ca      	b.n	8006236 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <HAL_SPI_Receive+0x7e>
 80060a6:	88fb      	ldrh	r3, [r7, #6]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d102      	bne.n	80060b2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060b0:	e0c1      	b.n	8006236 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2204      	movs	r2, #4
 80060b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	88fa      	ldrh	r2, [r7, #6]
 80060ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	88fa      	ldrh	r2, [r7, #6]
 80060d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f8:	d10f      	bne.n	800611a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006108:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006118:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006124:	2b40      	cmp	r3, #64	; 0x40
 8006126:	d007      	beq.n	8006138 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006136:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d162      	bne.n	8006206 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006140:	e02e      	b.n	80061a0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b01      	cmp	r3, #1
 800614e:	d115      	bne.n	800617c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f103 020c 	add.w	r2, r3, #12
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	7812      	ldrb	r2, [r2, #0]
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	87da      	strh	r2, [r3, #62]	; 0x3e
 800617a:	e011      	b.n	80061a0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800617c:	f7fc fede 	bl	8002f3c <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d803      	bhi.n	8006194 <HAL_SPI_Receive+0x166>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006192:	d102      	bne.n	800619a <HAL_SPI_Receive+0x16c>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d102      	bne.n	80061a0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800619e:	e04a      	b.n	8006236 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1cb      	bne.n	8006142 <HAL_SPI_Receive+0x114>
 80061aa:	e031      	b.n	8006210 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d113      	bne.n	80061e2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c4:	b292      	uxth	r2, r2
 80061c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	1c9a      	adds	r2, r3, #2
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061e0:	e011      	b.n	8006206 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061e2:	f7fc feab 	bl	8002f3c <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d803      	bhi.n	80061fa <HAL_SPI_Receive+0x1cc>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f8:	d102      	bne.n	8006200 <HAL_SPI_Receive+0x1d2>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006204:	e017      	b.n	8006236 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1cd      	bne.n	80061ac <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 fa45 	bl	80066a4 <SPI_EndRxTransaction>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2220      	movs	r2, #32
 8006224:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	75fb      	strb	r3, [r7, #23]
 8006232:	e000      	b.n	8006236 <HAL_SPI_Receive+0x208>
  }

error :
 8006234:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006246:	7dfb      	ldrb	r3, [r7, #23]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08c      	sub	sp, #48	; 0x30
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800625e:	2301      	movs	r3, #1
 8006260:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800626e:	2b01      	cmp	r3, #1
 8006270:	d101      	bne.n	8006276 <HAL_SPI_TransmitReceive+0x26>
 8006272:	2302      	movs	r3, #2
 8006274:	e18a      	b.n	800658c <HAL_SPI_TransmitReceive+0x33c>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800627e:	f7fc fe5d 	bl	8002f3c <HAL_GetTick>
 8006282:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800628a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006294:	887b      	ldrh	r3, [r7, #2]
 8006296:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006298:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800629c:	2b01      	cmp	r3, #1
 800629e:	d00f      	beq.n	80062c0 <HAL_SPI_TransmitReceive+0x70>
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062a6:	d107      	bne.n	80062b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d103      	bne.n	80062b8 <HAL_SPI_TransmitReceive+0x68>
 80062b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	d003      	beq.n	80062c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80062b8:	2302      	movs	r3, #2
 80062ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062be:	e15b      	b.n	8006578 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d005      	beq.n	80062d2 <HAL_SPI_TransmitReceive+0x82>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <HAL_SPI_TransmitReceive+0x82>
 80062cc:	887b      	ldrh	r3, [r7, #2]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d103      	bne.n	80062da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062d8:	e14e      	b.n	8006578 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d003      	beq.n	80062ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2205      	movs	r2, #5
 80062ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	887a      	ldrh	r2, [r7, #2]
 80062fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	887a      	ldrh	r2, [r7, #2]
 8006304:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	887a      	ldrh	r2, [r7, #2]
 8006310:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	887a      	ldrh	r2, [r7, #2]
 8006316:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632e:	2b40      	cmp	r3, #64	; 0x40
 8006330:	d007      	beq.n	8006342 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006340:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800634a:	d178      	bne.n	800643e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <HAL_SPI_TransmitReceive+0x10a>
 8006354:	8b7b      	ldrh	r3, [r7, #26]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d166      	bne.n	8006428 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635e:	881a      	ldrh	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	1c9a      	adds	r2, r3, #2
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006374:	b29b      	uxth	r3, r3
 8006376:	3b01      	subs	r3, #1
 8006378:	b29a      	uxth	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800637e:	e053      	b.n	8006428 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b02      	cmp	r3, #2
 800638c:	d11b      	bne.n	80063c6 <HAL_SPI_TransmitReceive+0x176>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006392:	b29b      	uxth	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d016      	beq.n	80063c6 <HAL_SPI_TransmitReceive+0x176>
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	2b01      	cmp	r3, #1
 800639c:	d113      	bne.n	80063c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a2:	881a      	ldrh	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ae:	1c9a      	adds	r2, r3, #2
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	3b01      	subs	r3, #1
 80063bc:	b29a      	uxth	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d119      	bne.n	8006408 <HAL_SPI_TransmitReceive+0x1b8>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d014      	beq.n	8006408 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e8:	b292      	uxth	r2, r2
 80063ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	1c9a      	adds	r2, r3, #2
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29a      	uxth	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006404:	2301      	movs	r3, #1
 8006406:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006408:	f7fc fd98 	bl	8002f3c <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006414:	429a      	cmp	r2, r3
 8006416:	d807      	bhi.n	8006428 <HAL_SPI_TransmitReceive+0x1d8>
 8006418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641e:	d003      	beq.n	8006428 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006426:	e0a7      	b.n	8006578 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800642c:	b29b      	uxth	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1a6      	bne.n	8006380 <HAL_SPI_TransmitReceive+0x130>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006436:	b29b      	uxth	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1a1      	bne.n	8006380 <HAL_SPI_TransmitReceive+0x130>
 800643c:	e07c      	b.n	8006538 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <HAL_SPI_TransmitReceive+0x1fc>
 8006446:	8b7b      	ldrh	r3, [r7, #26]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d16b      	bne.n	8006524 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	330c      	adds	r3, #12
 8006456:	7812      	ldrb	r2, [r2, #0]
 8006458:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006468:	b29b      	uxth	r3, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	b29a      	uxth	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006472:	e057      	b.n	8006524 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b02      	cmp	r3, #2
 8006480:	d11c      	bne.n	80064bc <HAL_SPI_TransmitReceive+0x26c>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006486:	b29b      	uxth	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d017      	beq.n	80064bc <HAL_SPI_TransmitReceive+0x26c>
 800648c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648e:	2b01      	cmp	r3, #1
 8006490:	d114      	bne.n	80064bc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	330c      	adds	r3, #12
 800649c:	7812      	ldrb	r2, [r2, #0]
 800649e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	3b01      	subs	r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d119      	bne.n	80064fe <HAL_SPI_TransmitReceive+0x2ae>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d014      	beq.n	80064fe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	3b01      	subs	r3, #1
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064fa:	2301      	movs	r3, #1
 80064fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064fe:	f7fc fd1d 	bl	8002f3c <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800650a:	429a      	cmp	r2, r3
 800650c:	d803      	bhi.n	8006516 <HAL_SPI_TransmitReceive+0x2c6>
 800650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006514:	d102      	bne.n	800651c <HAL_SPI_TransmitReceive+0x2cc>
 8006516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006518:	2b00      	cmp	r3, #0
 800651a:	d103      	bne.n	8006524 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006522:	e029      	b.n	8006578 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1a2      	bne.n	8006474 <HAL_SPI_TransmitReceive+0x224>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006532:	b29b      	uxth	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d19d      	bne.n	8006474 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800653a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f917 	bl	8006770 <SPI_EndRxTxTransaction>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d006      	beq.n	8006556 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2220      	movs	r2, #32
 8006552:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006554:	e010      	b.n	8006578 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10b      	bne.n	8006576 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800655e:	2300      	movs	r3, #0
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	617b      	str	r3, [r7, #20]
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	e000      	b.n	8006578 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006576:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006588:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800658c:	4618      	mov	r0, r3
 800658e:	3730      	adds	r7, #48	; 0x30
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	603b      	str	r3, [r7, #0]
 80065a0:	4613      	mov	r3, r2
 80065a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065a4:	f7fc fcca 	bl	8002f3c <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	1a9b      	subs	r3, r3, r2
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	4413      	add	r3, r2
 80065b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065b4:	f7fc fcc2 	bl	8002f3c <HAL_GetTick>
 80065b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065ba:	4b39      	ldr	r3, [pc, #228]	; (80066a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	015b      	lsls	r3, r3, #5
 80065c0:	0d1b      	lsrs	r3, r3, #20
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	fb02 f303 	mul.w	r3, r2, r3
 80065c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065ca:	e054      	b.n	8006676 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d2:	d050      	beq.n	8006676 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065d4:	f7fc fcb2 	bl	8002f3c <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d902      	bls.n	80065ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d13d      	bne.n	8006666 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006602:	d111      	bne.n	8006628 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800660c:	d004      	beq.n	8006618 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006616:	d107      	bne.n	8006628 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006626:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006630:	d10f      	bne.n	8006652 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006650:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e017      	b.n	8006696 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	3b01      	subs	r3, #1
 8006674:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	4013      	ands	r3, r2
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	429a      	cmp	r2, r3
 8006684:	bf0c      	ite	eq
 8006686:	2301      	moveq	r3, #1
 8006688:	2300      	movne	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	461a      	mov	r2, r3
 800668e:	79fb      	ldrb	r3, [r7, #7]
 8006690:	429a      	cmp	r2, r3
 8006692:	d19b      	bne.n	80065cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3720      	adds	r7, #32
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20000010 	.word	0x20000010

080066a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af02      	add	r7, sp, #8
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066b8:	d111      	bne.n	80066de <SPI_EndRxTransaction+0x3a>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c2:	d004      	beq.n	80066ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066cc:	d107      	bne.n	80066de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066dc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066e6:	d12a      	bne.n	800673e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f0:	d012      	beq.n	8006718 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2200      	movs	r2, #0
 80066fa:	2180      	movs	r1, #128	; 0x80
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f7ff ff49 	bl	8006594 <SPI_WaitFlagStateUntilTimeout>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d02d      	beq.n	8006764 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670c:	f043 0220 	orr.w	r2, r3, #32
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e026      	b.n	8006766 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2200      	movs	r2, #0
 8006720:	2101      	movs	r1, #1
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f7ff ff36 	bl	8006594 <SPI_WaitFlagStateUntilTimeout>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d01a      	beq.n	8006764 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006732:	f043 0220 	orr.w	r2, r3, #32
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e013      	b.n	8006766 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2200      	movs	r2, #0
 8006746:	2101      	movs	r1, #1
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f7ff ff23 	bl	8006594 <SPI_WaitFlagStateUntilTimeout>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d007      	beq.n	8006764 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006758:	f043 0220 	orr.w	r2, r3, #32
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e000      	b.n	8006766 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af02      	add	r7, sp, #8
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800677c:	4b1b      	ldr	r3, [pc, #108]	; (80067ec <SPI_EndRxTxTransaction+0x7c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a1b      	ldr	r2, [pc, #108]	; (80067f0 <SPI_EndRxTxTransaction+0x80>)
 8006782:	fba2 2303 	umull	r2, r3, r2, r3
 8006786:	0d5b      	lsrs	r3, r3, #21
 8006788:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800678c:	fb02 f303 	mul.w	r3, r2, r3
 8006790:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800679a:	d112      	bne.n	80067c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2200      	movs	r2, #0
 80067a4:	2180      	movs	r1, #128	; 0x80
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f7ff fef4 	bl	8006594 <SPI_WaitFlagStateUntilTimeout>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d016      	beq.n	80067e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b6:	f043 0220 	orr.w	r2, r3, #32
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e00f      	b.n	80067e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00a      	beq.n	80067de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d8:	2b80      	cmp	r3, #128	; 0x80
 80067da:	d0f2      	beq.n	80067c2 <SPI_EndRxTxTransaction+0x52>
 80067dc:	e000      	b.n	80067e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80067de:	bf00      	nop
  }

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20000010 	.word	0x20000010
 80067f0:	165e9f81 	.word	0x165e9f81

080067f4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e034      	b.n	8006874 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d106      	bne.n	8006824 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f7fa fdb0 	bl	8001384 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	3308      	adds	r3, #8
 800682c:	4619      	mov	r1, r3
 800682e:	4610      	mov	r0, r2
 8006830:	f001 f860 	bl	80078f4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6818      	ldr	r0, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	461a      	mov	r2, r3
 800683e:	68b9      	ldr	r1, [r7, #8]
 8006840:	f001 f8aa 	bl	8007998 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6858      	ldr	r0, [r3, #4]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	f001 f8df 	bl	8007a14 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	6892      	ldr	r2, [r2, #8]
 800685e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	6892      	ldr	r2, [r2, #8]
 800686a:	f041 0101 	orr.w	r1, r1, #1
 800686e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e041      	b.n	8006912 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d106      	bne.n	80068a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fc fa06 	bl	8002cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3304      	adds	r3, #4
 80068b8:	4619      	mov	r1, r3
 80068ba:	4610      	mov	r0, r2
 80068bc:	f000 fc7a 	bl	80071b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b01      	cmp	r3, #1
 800692e:	d001      	beq.n	8006934 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e04e      	b.n	80069d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f042 0201 	orr.w	r2, r2, #1
 800694a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a23      	ldr	r2, [pc, #140]	; (80069e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d022      	beq.n	800699c <HAL_TIM_Base_Start_IT+0x80>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695e:	d01d      	beq.n	800699c <HAL_TIM_Base_Start_IT+0x80>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a1f      	ldr	r2, [pc, #124]	; (80069e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d018      	beq.n	800699c <HAL_TIM_Base_Start_IT+0x80>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a1e      	ldr	r2, [pc, #120]	; (80069e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d013      	beq.n	800699c <HAL_TIM_Base_Start_IT+0x80>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a1c      	ldr	r2, [pc, #112]	; (80069ec <HAL_TIM_Base_Start_IT+0xd0>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d00e      	beq.n	800699c <HAL_TIM_Base_Start_IT+0x80>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a1b      	ldr	r2, [pc, #108]	; (80069f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d009      	beq.n	800699c <HAL_TIM_Base_Start_IT+0x80>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a19      	ldr	r2, [pc, #100]	; (80069f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d004      	beq.n	800699c <HAL_TIM_Base_Start_IT+0x80>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a18      	ldr	r2, [pc, #96]	; (80069f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d111      	bne.n	80069c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f003 0307 	and.w	r3, r3, #7
 80069a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2b06      	cmp	r3, #6
 80069ac:	d010      	beq.n	80069d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f042 0201 	orr.w	r2, r2, #1
 80069bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069be:	e007      	b.n	80069d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f042 0201 	orr.w	r2, r2, #1
 80069ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40010000 	.word	0x40010000
 80069e4:	40000400 	.word	0x40000400
 80069e8:	40000800 	.word	0x40000800
 80069ec:	40000c00 	.word	0x40000c00
 80069f0:	40010400 	.word	0x40010400
 80069f4:	40014000 	.word	0x40014000
 80069f8:	40001800 	.word	0x40001800

080069fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e041      	b.n	8006a92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d106      	bne.n	8006a28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f839 	bl	8006a9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3304      	adds	r3, #4
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	f000 fbba 	bl	80071b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006aa2:	bf00      	nop
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
	...

08006ab0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d109      	bne.n	8006ad4 <HAL_TIM_PWM_Start+0x24>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	bf14      	ite	ne
 8006acc:	2301      	movne	r3, #1
 8006ace:	2300      	moveq	r3, #0
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	e022      	b.n	8006b1a <HAL_TIM_PWM_Start+0x6a>
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	d109      	bne.n	8006aee <HAL_TIM_PWM_Start+0x3e>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	bf14      	ite	ne
 8006ae6:	2301      	movne	r3, #1
 8006ae8:	2300      	moveq	r3, #0
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	e015      	b.n	8006b1a <HAL_TIM_PWM_Start+0x6a>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d109      	bne.n	8006b08 <HAL_TIM_PWM_Start+0x58>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	bf14      	ite	ne
 8006b00:	2301      	movne	r3, #1
 8006b02:	2300      	moveq	r3, #0
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	e008      	b.n	8006b1a <HAL_TIM_PWM_Start+0x6a>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	bf14      	ite	ne
 8006b14:	2301      	movne	r3, #1
 8006b16:	2300      	moveq	r3, #0
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e07c      	b.n	8006c1c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d104      	bne.n	8006b32 <HAL_TIM_PWM_Start+0x82>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b30:	e013      	b.n	8006b5a <HAL_TIM_PWM_Start+0xaa>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d104      	bne.n	8006b42 <HAL_TIM_PWM_Start+0x92>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b40:	e00b      	b.n	8006b5a <HAL_TIM_PWM_Start+0xaa>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b08      	cmp	r3, #8
 8006b46:	d104      	bne.n	8006b52 <HAL_TIM_PWM_Start+0xa2>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b50:	e003      	b.n	8006b5a <HAL_TIM_PWM_Start+0xaa>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2202      	movs	r2, #2
 8006b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fe10 	bl	8007788 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a2d      	ldr	r2, [pc, #180]	; (8006c24 <HAL_TIM_PWM_Start+0x174>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d004      	beq.n	8006b7c <HAL_TIM_PWM_Start+0xcc>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a2c      	ldr	r2, [pc, #176]	; (8006c28 <HAL_TIM_PWM_Start+0x178>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d101      	bne.n	8006b80 <HAL_TIM_PWM_Start+0xd0>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e000      	b.n	8006b82 <HAL_TIM_PWM_Start+0xd2>
 8006b80:	2300      	movs	r3, #0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d007      	beq.n	8006b96 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a22      	ldr	r2, [pc, #136]	; (8006c24 <HAL_TIM_PWM_Start+0x174>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d022      	beq.n	8006be6 <HAL_TIM_PWM_Start+0x136>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba8:	d01d      	beq.n	8006be6 <HAL_TIM_PWM_Start+0x136>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a1f      	ldr	r2, [pc, #124]	; (8006c2c <HAL_TIM_PWM_Start+0x17c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d018      	beq.n	8006be6 <HAL_TIM_PWM_Start+0x136>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a1d      	ldr	r2, [pc, #116]	; (8006c30 <HAL_TIM_PWM_Start+0x180>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d013      	beq.n	8006be6 <HAL_TIM_PWM_Start+0x136>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a1c      	ldr	r2, [pc, #112]	; (8006c34 <HAL_TIM_PWM_Start+0x184>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00e      	beq.n	8006be6 <HAL_TIM_PWM_Start+0x136>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a16      	ldr	r2, [pc, #88]	; (8006c28 <HAL_TIM_PWM_Start+0x178>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d009      	beq.n	8006be6 <HAL_TIM_PWM_Start+0x136>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a18      	ldr	r2, [pc, #96]	; (8006c38 <HAL_TIM_PWM_Start+0x188>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d004      	beq.n	8006be6 <HAL_TIM_PWM_Start+0x136>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a16      	ldr	r2, [pc, #88]	; (8006c3c <HAL_TIM_PWM_Start+0x18c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d111      	bne.n	8006c0a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f003 0307 	and.w	r3, r3, #7
 8006bf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b06      	cmp	r3, #6
 8006bf6:	d010      	beq.n	8006c1a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f042 0201 	orr.w	r2, r2, #1
 8006c06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c08:	e007      	b.n	8006c1a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f042 0201 	orr.w	r2, r2, #1
 8006c18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	40010000 	.word	0x40010000
 8006c28:	40010400 	.word	0x40010400
 8006c2c:	40000400 	.word	0x40000400
 8006c30:	40000800 	.word	0x40000800
 8006c34:	40000c00 	.word	0x40000c00
 8006c38:	40014000 	.word	0x40014000
 8006c3c:	40001800 	.word	0x40001800

08006c40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f003 0302 	and.w	r3, r3, #2
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d122      	bne.n	8006c9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d11b      	bne.n	8006c9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f06f 0202 	mvn.w	r2, #2
 8006c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	f003 0303 	and.w	r3, r3, #3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fa77 	bl	8007176 <HAL_TIM_IC_CaptureCallback>
 8006c88:	e005      	b.n	8006c96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fa69 	bl	8007162 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fa7a 	bl	800718a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f003 0304 	and.w	r3, r3, #4
 8006ca6:	2b04      	cmp	r3, #4
 8006ca8:	d122      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b04      	cmp	r3, #4
 8006cb6:	d11b      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f06f 0204 	mvn.w	r2, #4
 8006cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fa4d 	bl	8007176 <HAL_TIM_IC_CaptureCallback>
 8006cdc:	e005      	b.n	8006cea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fa3f 	bl	8007162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fa50 	bl	800718a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f003 0308 	and.w	r3, r3, #8
 8006cfa:	2b08      	cmp	r3, #8
 8006cfc:	d122      	bne.n	8006d44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f003 0308 	and.w	r3, r3, #8
 8006d08:	2b08      	cmp	r3, #8
 8006d0a:	d11b      	bne.n	8006d44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f06f 0208 	mvn.w	r2, #8
 8006d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2204      	movs	r2, #4
 8006d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	f003 0303 	and.w	r3, r3, #3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fa23 	bl	8007176 <HAL_TIM_IC_CaptureCallback>
 8006d30:	e005      	b.n	8006d3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fa15 	bl	8007162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fa26 	bl	800718a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0310 	and.w	r3, r3, #16
 8006d4e:	2b10      	cmp	r3, #16
 8006d50:	d122      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f003 0310 	and.w	r3, r3, #16
 8006d5c:	2b10      	cmp	r3, #16
 8006d5e:	d11b      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f06f 0210 	mvn.w	r2, #16
 8006d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2208      	movs	r2, #8
 8006d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f9f9 	bl	8007176 <HAL_TIM_IC_CaptureCallback>
 8006d84:	e005      	b.n	8006d92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f9eb 	bl	8007162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f9fc 	bl	800718a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d10e      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d107      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f06f 0201 	mvn.w	r2, #1
 8006dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7fb fdbe 	bl	8002940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dce:	2b80      	cmp	r3, #128	; 0x80
 8006dd0:	d10e      	bne.n	8006df0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ddc:	2b80      	cmp	r3, #128	; 0x80
 8006dde:	d107      	bne.n	8006df0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fd78 	bl	80078e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfa:	2b40      	cmp	r3, #64	; 0x40
 8006dfc:	d10e      	bne.n	8006e1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e08:	2b40      	cmp	r3, #64	; 0x40
 8006e0a:	d107      	bne.n	8006e1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f9c1 	bl	800719e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	f003 0320 	and.w	r3, r3, #32
 8006e26:	2b20      	cmp	r3, #32
 8006e28:	d10e      	bne.n	8006e48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	f003 0320 	and.w	r3, r3, #32
 8006e34:	2b20      	cmp	r3, #32
 8006e36:	d107      	bne.n	8006e48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f06f 0220 	mvn.w	r2, #32
 8006e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fd42 	bl	80078cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e48:	bf00      	nop
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d101      	bne.n	8006e6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e0ae      	b.n	8006fcc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b0c      	cmp	r3, #12
 8006e7a:	f200 809f 	bhi.w	8006fbc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e7e:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e84:	08006eb9 	.word	0x08006eb9
 8006e88:	08006fbd 	.word	0x08006fbd
 8006e8c:	08006fbd 	.word	0x08006fbd
 8006e90:	08006fbd 	.word	0x08006fbd
 8006e94:	08006ef9 	.word	0x08006ef9
 8006e98:	08006fbd 	.word	0x08006fbd
 8006e9c:	08006fbd 	.word	0x08006fbd
 8006ea0:	08006fbd 	.word	0x08006fbd
 8006ea4:	08006f3b 	.word	0x08006f3b
 8006ea8:	08006fbd 	.word	0x08006fbd
 8006eac:	08006fbd 	.word	0x08006fbd
 8006eb0:	08006fbd 	.word	0x08006fbd
 8006eb4:	08006f7b 	.word	0x08006f7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68b9      	ldr	r1, [r7, #8]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fa18 	bl	80072f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	699a      	ldr	r2, [r3, #24]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0208 	orr.w	r2, r2, #8
 8006ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699a      	ldr	r2, [r3, #24]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 0204 	bic.w	r2, r2, #4
 8006ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6999      	ldr	r1, [r3, #24]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	691a      	ldr	r2, [r3, #16]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	619a      	str	r2, [r3, #24]
      break;
 8006ef6:	e064      	b.n	8006fc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68b9      	ldr	r1, [r7, #8]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fa68 	bl	80073d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	699a      	ldr	r2, [r3, #24]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	699a      	ldr	r2, [r3, #24]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6999      	ldr	r1, [r3, #24]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	021a      	lsls	r2, r3, #8
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	619a      	str	r2, [r3, #24]
      break;
 8006f38:	e043      	b.n	8006fc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 fabd 	bl	80074c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69da      	ldr	r2, [r3, #28]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0208 	orr.w	r2, r2, #8
 8006f54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	69da      	ldr	r2, [r3, #28]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0204 	bic.w	r2, r2, #4
 8006f64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69d9      	ldr	r1, [r3, #28]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	691a      	ldr	r2, [r3, #16]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	61da      	str	r2, [r3, #28]
      break;
 8006f78:	e023      	b.n	8006fc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68b9      	ldr	r1, [r7, #8]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fb11 	bl	80075a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69da      	ldr	r2, [r3, #28]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	69da      	ldr	r2, [r3, #28]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69d9      	ldr	r1, [r3, #28]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	021a      	lsls	r2, r3, #8
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	61da      	str	r2, [r3, #28]
      break;
 8006fba:	e002      	b.n	8006fc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3718      	adds	r7, #24
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d101      	bne.n	8006ff0 <HAL_TIM_ConfigClockSource+0x1c>
 8006fec:	2302      	movs	r3, #2
 8006fee:	e0b4      	b.n	800715a <HAL_TIM_ConfigClockSource+0x186>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800700e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007016:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007028:	d03e      	beq.n	80070a8 <HAL_TIM_ConfigClockSource+0xd4>
 800702a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800702e:	f200 8087 	bhi.w	8007140 <HAL_TIM_ConfigClockSource+0x16c>
 8007032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007036:	f000 8086 	beq.w	8007146 <HAL_TIM_ConfigClockSource+0x172>
 800703a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800703e:	d87f      	bhi.n	8007140 <HAL_TIM_ConfigClockSource+0x16c>
 8007040:	2b70      	cmp	r3, #112	; 0x70
 8007042:	d01a      	beq.n	800707a <HAL_TIM_ConfigClockSource+0xa6>
 8007044:	2b70      	cmp	r3, #112	; 0x70
 8007046:	d87b      	bhi.n	8007140 <HAL_TIM_ConfigClockSource+0x16c>
 8007048:	2b60      	cmp	r3, #96	; 0x60
 800704a:	d050      	beq.n	80070ee <HAL_TIM_ConfigClockSource+0x11a>
 800704c:	2b60      	cmp	r3, #96	; 0x60
 800704e:	d877      	bhi.n	8007140 <HAL_TIM_ConfigClockSource+0x16c>
 8007050:	2b50      	cmp	r3, #80	; 0x50
 8007052:	d03c      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0xfa>
 8007054:	2b50      	cmp	r3, #80	; 0x50
 8007056:	d873      	bhi.n	8007140 <HAL_TIM_ConfigClockSource+0x16c>
 8007058:	2b40      	cmp	r3, #64	; 0x40
 800705a:	d058      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x13a>
 800705c:	2b40      	cmp	r3, #64	; 0x40
 800705e:	d86f      	bhi.n	8007140 <HAL_TIM_ConfigClockSource+0x16c>
 8007060:	2b30      	cmp	r3, #48	; 0x30
 8007062:	d064      	beq.n	800712e <HAL_TIM_ConfigClockSource+0x15a>
 8007064:	2b30      	cmp	r3, #48	; 0x30
 8007066:	d86b      	bhi.n	8007140 <HAL_TIM_ConfigClockSource+0x16c>
 8007068:	2b20      	cmp	r3, #32
 800706a:	d060      	beq.n	800712e <HAL_TIM_ConfigClockSource+0x15a>
 800706c:	2b20      	cmp	r3, #32
 800706e:	d867      	bhi.n	8007140 <HAL_TIM_ConfigClockSource+0x16c>
 8007070:	2b00      	cmp	r3, #0
 8007072:	d05c      	beq.n	800712e <HAL_TIM_ConfigClockSource+0x15a>
 8007074:	2b10      	cmp	r3, #16
 8007076:	d05a      	beq.n	800712e <HAL_TIM_ConfigClockSource+0x15a>
 8007078:	e062      	b.n	8007140 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6818      	ldr	r0, [r3, #0]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	6899      	ldr	r1, [r3, #8]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	f000 fb5d 	bl	8007748 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800709c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	609a      	str	r2, [r3, #8]
      break;
 80070a6:	e04f      	b.n	8007148 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6818      	ldr	r0, [r3, #0]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	6899      	ldr	r1, [r3, #8]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f000 fb46 	bl	8007748 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689a      	ldr	r2, [r3, #8]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070ca:	609a      	str	r2, [r3, #8]
      break;
 80070cc:	e03c      	b.n	8007148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6818      	ldr	r0, [r3, #0]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	6859      	ldr	r1, [r3, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	461a      	mov	r2, r3
 80070dc:	f000 faba 	bl	8007654 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2150      	movs	r1, #80	; 0x50
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 fb13 	bl	8007712 <TIM_ITRx_SetConfig>
      break;
 80070ec:	e02c      	b.n	8007148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	6859      	ldr	r1, [r3, #4]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	461a      	mov	r2, r3
 80070fc:	f000 fad9 	bl	80076b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2160      	movs	r1, #96	; 0x60
 8007106:	4618      	mov	r0, r3
 8007108:	f000 fb03 	bl	8007712 <TIM_ITRx_SetConfig>
      break;
 800710c:	e01c      	b.n	8007148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6818      	ldr	r0, [r3, #0]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	6859      	ldr	r1, [r3, #4]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	461a      	mov	r2, r3
 800711c:	f000 fa9a 	bl	8007654 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2140      	movs	r1, #64	; 0x40
 8007126:	4618      	mov	r0, r3
 8007128:	f000 faf3 	bl	8007712 <TIM_ITRx_SetConfig>
      break;
 800712c:	e00c      	b.n	8007148 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4619      	mov	r1, r3
 8007138:	4610      	mov	r0, r2
 800713a:	f000 faea 	bl	8007712 <TIM_ITRx_SetConfig>
      break;
 800713e:	e003      	b.n	8007148 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	73fb      	strb	r3, [r7, #15]
      break;
 8007144:	e000      	b.n	8007148 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007146:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007158:	7bfb      	ldrb	r3, [r7, #15]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800717e:	bf00      	nop
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007192:	bf00      	nop
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800719e:	b480      	push	{r7}
 80071a0:	b083      	sub	sp, #12
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071a6:	bf00      	nop
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
	...

080071b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a40      	ldr	r2, [pc, #256]	; (80072c8 <TIM_Base_SetConfig+0x114>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d013      	beq.n	80071f4 <TIM_Base_SetConfig+0x40>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d2:	d00f      	beq.n	80071f4 <TIM_Base_SetConfig+0x40>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a3d      	ldr	r2, [pc, #244]	; (80072cc <TIM_Base_SetConfig+0x118>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d00b      	beq.n	80071f4 <TIM_Base_SetConfig+0x40>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a3c      	ldr	r2, [pc, #240]	; (80072d0 <TIM_Base_SetConfig+0x11c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d007      	beq.n	80071f4 <TIM_Base_SetConfig+0x40>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a3b      	ldr	r2, [pc, #236]	; (80072d4 <TIM_Base_SetConfig+0x120>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d003      	beq.n	80071f4 <TIM_Base_SetConfig+0x40>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a3a      	ldr	r2, [pc, #232]	; (80072d8 <TIM_Base_SetConfig+0x124>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d108      	bne.n	8007206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	4313      	orrs	r3, r2
 8007204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a2f      	ldr	r2, [pc, #188]	; (80072c8 <TIM_Base_SetConfig+0x114>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d02b      	beq.n	8007266 <TIM_Base_SetConfig+0xb2>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007214:	d027      	beq.n	8007266 <TIM_Base_SetConfig+0xb2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a2c      	ldr	r2, [pc, #176]	; (80072cc <TIM_Base_SetConfig+0x118>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d023      	beq.n	8007266 <TIM_Base_SetConfig+0xb2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a2b      	ldr	r2, [pc, #172]	; (80072d0 <TIM_Base_SetConfig+0x11c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d01f      	beq.n	8007266 <TIM_Base_SetConfig+0xb2>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a2a      	ldr	r2, [pc, #168]	; (80072d4 <TIM_Base_SetConfig+0x120>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d01b      	beq.n	8007266 <TIM_Base_SetConfig+0xb2>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a29      	ldr	r2, [pc, #164]	; (80072d8 <TIM_Base_SetConfig+0x124>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d017      	beq.n	8007266 <TIM_Base_SetConfig+0xb2>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a28      	ldr	r2, [pc, #160]	; (80072dc <TIM_Base_SetConfig+0x128>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d013      	beq.n	8007266 <TIM_Base_SetConfig+0xb2>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a27      	ldr	r2, [pc, #156]	; (80072e0 <TIM_Base_SetConfig+0x12c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d00f      	beq.n	8007266 <TIM_Base_SetConfig+0xb2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a26      	ldr	r2, [pc, #152]	; (80072e4 <TIM_Base_SetConfig+0x130>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d00b      	beq.n	8007266 <TIM_Base_SetConfig+0xb2>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a25      	ldr	r2, [pc, #148]	; (80072e8 <TIM_Base_SetConfig+0x134>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d007      	beq.n	8007266 <TIM_Base_SetConfig+0xb2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a24      	ldr	r2, [pc, #144]	; (80072ec <TIM_Base_SetConfig+0x138>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d003      	beq.n	8007266 <TIM_Base_SetConfig+0xb2>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a23      	ldr	r2, [pc, #140]	; (80072f0 <TIM_Base_SetConfig+0x13c>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d108      	bne.n	8007278 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800726c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	4313      	orrs	r3, r2
 8007276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a0a      	ldr	r2, [pc, #40]	; (80072c8 <TIM_Base_SetConfig+0x114>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d003      	beq.n	80072ac <TIM_Base_SetConfig+0xf8>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a0c      	ldr	r2, [pc, #48]	; (80072d8 <TIM_Base_SetConfig+0x124>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d103      	bne.n	80072b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	691a      	ldr	r2, [r3, #16]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	615a      	str	r2, [r3, #20]
}
 80072ba:	bf00      	nop
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	40010000 	.word	0x40010000
 80072cc:	40000400 	.word	0x40000400
 80072d0:	40000800 	.word	0x40000800
 80072d4:	40000c00 	.word	0x40000c00
 80072d8:	40010400 	.word	0x40010400
 80072dc:	40014000 	.word	0x40014000
 80072e0:	40014400 	.word	0x40014400
 80072e4:	40014800 	.word	0x40014800
 80072e8:	40001800 	.word	0x40001800
 80072ec:	40001c00 	.word	0x40001c00
 80072f0:	40002000 	.word	0x40002000

080072f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	f023 0201 	bic.w	r2, r3, #1
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0303 	bic.w	r3, r3, #3
 800732a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	4313      	orrs	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f023 0302 	bic.w	r3, r3, #2
 800733c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	4313      	orrs	r3, r2
 8007346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a20      	ldr	r2, [pc, #128]	; (80073cc <TIM_OC1_SetConfig+0xd8>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d003      	beq.n	8007358 <TIM_OC1_SetConfig+0x64>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a1f      	ldr	r2, [pc, #124]	; (80073d0 <TIM_OC1_SetConfig+0xdc>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d10c      	bne.n	8007372 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f023 0308 	bic.w	r3, r3, #8
 800735e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f023 0304 	bic.w	r3, r3, #4
 8007370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a15      	ldr	r2, [pc, #84]	; (80073cc <TIM_OC1_SetConfig+0xd8>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d003      	beq.n	8007382 <TIM_OC1_SetConfig+0x8e>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a14      	ldr	r2, [pc, #80]	; (80073d0 <TIM_OC1_SetConfig+0xdc>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d111      	bne.n	80073a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	4313      	orrs	r3, r2
 800739a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	621a      	str	r2, [r3, #32]
}
 80073c0:	bf00      	nop
 80073c2:	371c      	adds	r7, #28
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	40010000 	.word	0x40010000
 80073d0:	40010400 	.word	0x40010400

080073d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b087      	sub	sp, #28
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	f023 0210 	bic.w	r2, r3, #16
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800740a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	021b      	lsls	r3, r3, #8
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	4313      	orrs	r3, r2
 8007416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	f023 0320 	bic.w	r3, r3, #32
 800741e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	011b      	lsls	r3, r3, #4
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	4313      	orrs	r3, r2
 800742a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a22      	ldr	r2, [pc, #136]	; (80074b8 <TIM_OC2_SetConfig+0xe4>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d003      	beq.n	800743c <TIM_OC2_SetConfig+0x68>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a21      	ldr	r2, [pc, #132]	; (80074bc <TIM_OC2_SetConfig+0xe8>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d10d      	bne.n	8007458 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	011b      	lsls	r3, r3, #4
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	4313      	orrs	r3, r2
 800744e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007456:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a17      	ldr	r2, [pc, #92]	; (80074b8 <TIM_OC2_SetConfig+0xe4>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d003      	beq.n	8007468 <TIM_OC2_SetConfig+0x94>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a16      	ldr	r2, [pc, #88]	; (80074bc <TIM_OC2_SetConfig+0xe8>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d113      	bne.n	8007490 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800746e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007476:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	4313      	orrs	r3, r2
 8007482:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	4313      	orrs	r3, r2
 800748e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	621a      	str	r2, [r3, #32]
}
 80074aa:	bf00      	nop
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	40010000 	.word	0x40010000
 80074bc:	40010400 	.word	0x40010400

080074c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f023 0303 	bic.w	r3, r3, #3
 80074f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	4313      	orrs	r3, r2
 8007500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	021b      	lsls	r3, r3, #8
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	4313      	orrs	r3, r2
 8007514:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a21      	ldr	r2, [pc, #132]	; (80075a0 <TIM_OC3_SetConfig+0xe0>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d003      	beq.n	8007526 <TIM_OC3_SetConfig+0x66>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a20      	ldr	r2, [pc, #128]	; (80075a4 <TIM_OC3_SetConfig+0xe4>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d10d      	bne.n	8007542 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800752c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	021b      	lsls	r3, r3, #8
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	4313      	orrs	r3, r2
 8007538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a16      	ldr	r2, [pc, #88]	; (80075a0 <TIM_OC3_SetConfig+0xe0>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d003      	beq.n	8007552 <TIM_OC3_SetConfig+0x92>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a15      	ldr	r2, [pc, #84]	; (80075a4 <TIM_OC3_SetConfig+0xe4>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d113      	bne.n	800757a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	4313      	orrs	r3, r2
 800756c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	4313      	orrs	r3, r2
 8007578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	621a      	str	r2, [r3, #32]
}
 8007594:	bf00      	nop
 8007596:	371c      	adds	r7, #28
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	40010000 	.word	0x40010000
 80075a4:	40010400 	.word	0x40010400

080075a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	021b      	lsls	r3, r3, #8
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	031b      	lsls	r3, r3, #12
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a12      	ldr	r2, [pc, #72]	; (800764c <TIM_OC4_SetConfig+0xa4>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d003      	beq.n	8007610 <TIM_OC4_SetConfig+0x68>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a11      	ldr	r2, [pc, #68]	; (8007650 <TIM_OC4_SetConfig+0xa8>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d109      	bne.n	8007624 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007616:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	695b      	ldr	r3, [r3, #20]
 800761c:	019b      	lsls	r3, r3, #6
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	4313      	orrs	r3, r2
 8007622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	621a      	str	r2, [r3, #32]
}
 800763e:	bf00      	nop
 8007640:	371c      	adds	r7, #28
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	40010000 	.word	0x40010000
 8007650:	40010400 	.word	0x40010400

08007654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6a1b      	ldr	r3, [r3, #32]
 8007664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	f023 0201 	bic.w	r2, r3, #1
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800767e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	011b      	lsls	r3, r3, #4
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	4313      	orrs	r3, r2
 8007688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f023 030a 	bic.w	r3, r3, #10
 8007690:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	4313      	orrs	r3, r2
 8007698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	621a      	str	r2, [r3, #32]
}
 80076a6:	bf00      	nop
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b087      	sub	sp, #28
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	f023 0210 	bic.w	r2, r3, #16
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	031b      	lsls	r3, r3, #12
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	011b      	lsls	r3, r3, #4
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	621a      	str	r2, [r3, #32]
}
 8007706:	bf00      	nop
 8007708:	371c      	adds	r7, #28
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007712:	b480      	push	{r7}
 8007714:	b085      	sub	sp, #20
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007728:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4313      	orrs	r3, r2
 8007730:	f043 0307 	orr.w	r3, r3, #7
 8007734:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	609a      	str	r2, [r3, #8]
}
 800773c:	bf00      	nop
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007748:	b480      	push	{r7}
 800774a:	b087      	sub	sp, #28
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
 8007754:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007762:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	021a      	lsls	r2, r3, #8
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	431a      	orrs	r2, r3
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	4313      	orrs	r3, r2
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	4313      	orrs	r3, r2
 8007774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	609a      	str	r2, [r3, #8]
}
 800777c:	bf00      	nop
 800777e:	371c      	adds	r7, #28
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007788:	b480      	push	{r7}
 800778a:	b087      	sub	sp, #28
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f003 031f 	and.w	r3, r3, #31
 800779a:	2201      	movs	r2, #1
 800779c:	fa02 f303 	lsl.w	r3, r2, r3
 80077a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6a1a      	ldr	r2, [r3, #32]
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	43db      	mvns	r3, r3
 80077aa:	401a      	ands	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6a1a      	ldr	r2, [r3, #32]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f003 031f 	and.w	r3, r3, #31
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	fa01 f303 	lsl.w	r3, r1, r3
 80077c0:	431a      	orrs	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	621a      	str	r2, [r3, #32]
}
 80077c6:	bf00      	nop
 80077c8:	371c      	adds	r7, #28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
	...

080077d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d101      	bne.n	80077ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077e8:	2302      	movs	r3, #2
 80077ea:	e05a      	b.n	80078a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	4313      	orrs	r3, r2
 800781c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a21      	ldr	r2, [pc, #132]	; (80078b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d022      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007838:	d01d      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a1d      	ldr	r2, [pc, #116]	; (80078b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d018      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a1b      	ldr	r2, [pc, #108]	; (80078b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d013      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a1a      	ldr	r2, [pc, #104]	; (80078bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d00e      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a18      	ldr	r2, [pc, #96]	; (80078c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d009      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a17      	ldr	r2, [pc, #92]	; (80078c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d004      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a15      	ldr	r2, [pc, #84]	; (80078c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d10c      	bne.n	8007890 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800787c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	4313      	orrs	r3, r2
 8007886:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	40010000 	.word	0x40010000
 80078b4:	40000400 	.word	0x40000400
 80078b8:	40000800 	.word	0x40000800
 80078bc:	40000c00 	.word	0x40000c00
 80078c0:	40010400 	.word	0x40010400
 80078c4:	40014000 	.word	0x40014000
 80078c8:	40001800 	.word	0x40001800

080078cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80078fe:	2300      	movs	r3, #0
 8007900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	4b20      	ldr	r3, [pc, #128]	; (8007994 <FSMC_NORSRAM_Init+0xa0>)
 8007912:	4013      	ands	r3, r2
 8007914:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800791e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007924:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800792a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007930:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007936:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800793c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007942:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007948:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800794e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007954:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800795a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007960:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	4313      	orrs	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	2b08      	cmp	r3, #8
 800796e:	d103      	bne.n	8007978 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007976:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68f9      	ldr	r1, [r7, #12]
 8007980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	fff00080 	.word	0xfff00080

08007998 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007998:	b480      	push	{r7}
 800799a:	b087      	sub	sp, #28
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80079a4:	2300      	movs	r3, #0
 80079a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	1c5a      	adds	r2, r3, #1
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80079ba:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80079c6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80079ce:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80079d6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	3b01      	subs	r3, #1
 80079de:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80079e0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	3b02      	subs	r3, #2
 80079e8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80079ea:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80079f0:	4313      	orrs	r3, r2
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	1c5a      	adds	r2, r3, #1
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6979      	ldr	r1, [r7, #20]
 8007a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
	...

08007a14 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b087      	sub	sp, #28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
 8007a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007a22:	2300      	movs	r3, #0
 8007a24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a2c:	d122      	bne.n	8007a74 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a36:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a4a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007a52:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007a5a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007a60:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	6979      	ldr	r1, [r7, #20]
 8007a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007a72:	e005      	b.n	8007a80 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	371c      	adds	r7, #28
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	cff00000 	.word	0xcff00000

08007a94 <__libc_init_array>:
 8007a94:	b570      	push	{r4, r5, r6, lr}
 8007a96:	4d0d      	ldr	r5, [pc, #52]	; (8007acc <__libc_init_array+0x38>)
 8007a98:	4c0d      	ldr	r4, [pc, #52]	; (8007ad0 <__libc_init_array+0x3c>)
 8007a9a:	1b64      	subs	r4, r4, r5
 8007a9c:	10a4      	asrs	r4, r4, #2
 8007a9e:	2600      	movs	r6, #0
 8007aa0:	42a6      	cmp	r6, r4
 8007aa2:	d109      	bne.n	8007ab8 <__libc_init_array+0x24>
 8007aa4:	4d0b      	ldr	r5, [pc, #44]	; (8007ad4 <__libc_init_array+0x40>)
 8007aa6:	4c0c      	ldr	r4, [pc, #48]	; (8007ad8 <__libc_init_array+0x44>)
 8007aa8:	f000 f820 	bl	8007aec <_init>
 8007aac:	1b64      	subs	r4, r4, r5
 8007aae:	10a4      	asrs	r4, r4, #2
 8007ab0:	2600      	movs	r6, #0
 8007ab2:	42a6      	cmp	r6, r4
 8007ab4:	d105      	bne.n	8007ac2 <__libc_init_array+0x2e>
 8007ab6:	bd70      	pop	{r4, r5, r6, pc}
 8007ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007abc:	4798      	blx	r3
 8007abe:	3601      	adds	r6, #1
 8007ac0:	e7ee      	b.n	8007aa0 <__libc_init_array+0xc>
 8007ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ac6:	4798      	blx	r3
 8007ac8:	3601      	adds	r6, #1
 8007aca:	e7f2      	b.n	8007ab2 <__libc_init_array+0x1e>
 8007acc:	0800aaf4 	.word	0x0800aaf4
 8007ad0:	0800aaf4 	.word	0x0800aaf4
 8007ad4:	0800aaf4 	.word	0x0800aaf4
 8007ad8:	0800aaf8 	.word	0x0800aaf8

08007adc <memset>:
 8007adc:	4402      	add	r2, r0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d100      	bne.n	8007ae6 <memset+0xa>
 8007ae4:	4770      	bx	lr
 8007ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8007aea:	e7f9      	b.n	8007ae0 <memset+0x4>

08007aec <_init>:
 8007aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aee:	bf00      	nop
 8007af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007af2:	bc08      	pop	{r3}
 8007af4:	469e      	mov	lr, r3
 8007af6:	4770      	bx	lr

08007af8 <_fini>:
 8007af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afa:	bf00      	nop
 8007afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007afe:	bc08      	pop	{r3}
 8007b00:	469e      	mov	lr, r3
 8007b02:	4770      	bx	lr
